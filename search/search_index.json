{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> A system for the integration and analysis of heterogeneous functional genomics data. </p> <p>Web Application:  https://www.geneweaver.org</p> <p>API Documentation: https://geneweaver.jax.org/api/docs</p> <ul> <li> <p> Get Going Quickly</p> <p>Architected to make it easy to get started, whichever way makes sense for you.</p> <p> Jump Into Using The Website</p> <p> Use The API</p> <p> Build With Our Python Packages</p> </li> <li> <p> Example Workflows</p> <p>Follow real examples of how GeneWeaver's tools will be used to do analysis.</p> <p> NCI-60 Workflow</p> <p> Mapping Gene Identifiers</p> <p> Authenticating With The Client Library</p> </li> <li> <p> API Standards</p> <p>Developed to be consistent with The Jackson Laboratory's open source API Standards.</p> <p> Standards Documentation</p> </li> <li> <p> Open Source, Apache License 2.0</p> <p>GeneWeaver is open source and available on GitHub.</p> <p> License</p> <p> Our GitHub Repositories</p> </li> </ul>"},{"location":"#what-is-geneweaver","title":"What Is GeneWeaver?","text":"<p>GeneWeaver is a web application for the integrated cross-species analysis of functional genomics data from heterogeneous sources. The application consists of a large database of gene sets curated from multiple public data resources and curated submissions, along with a suite of analysis tools designed to allow flexible, customized workflows through web-based interactive analysis or scripted API driven analysis. Gene sets come from multiple widely studied species and include ontology annotations, brain gene expression atlases, systems genetic study results, gene regulatory information, pathway databases, drug interaction databases and many other sources. Users can retrieve, store, analyze and share gene sets through a graded access system. Gene sets and analysis results can be stored, shared and compared privately, among user defined groups of investigators, and across all users. Analysis tools are based on combinatorics and statistical methods for comparing, contrasting and classifying gene sets based on their members.</p>"},{"location":"#what-is-a-gene-set","title":"What Is a Gene Set?","text":"<p>Each \"gene set\" contains a list of genomic features, free text descriptive content, ontology annotations and gene association scores. Genomic features are mapped within and across multiple species. Currently, 10 species are supported, Mus musculus, Homo sapiens, Rattus norvegicus, Danio rerio, Drosophilia melanogaster, Macaca mulatta, Caenorhabditis elegans, Saccharomyces cervisiae, Gallus gallus, Canis familiaris. Additional species are added in response to community request.</p>"},{"location":"#what-can-you-do-with-geneweaver","title":"What Can You Do With GeneWeaver?","text":"<p>GeneWeaver allows users to integrate these diverse functional genomics data across species, tissue and experimental platform to address questions about the relations among genes and biological functions. Applications include the prioritization of gene-disease associations from multiple evidence sources, the classification and comparison of biological functions based on biological substrates, and the identification of similar genes based on function. Cross species analysis enables the discovery of conserved mechanisms of biological functions, and the discovery of divergent functions served by conserved biological mechanisms. </p>"},{"location":"#what-is-this-documentation","title":"What is this Documentation?","text":"<p>This documentation provides an introduction to the system and ways of working with it, explanations of core concepts, tutorials of general utility, as well as detailed reference documentation for the various components and processes that make up the system.</p>"},{"location":"analysis-tools/","title":"Analysis Tools","text":"<p>GeneWeaver uses a set of analysis tools to operate on genes and gene sets. These tools evaluate a range of data inputs for the purposes of elucidating hierarchical relationships among a set of gene sets of interest. They can be used to visualize bipartite clusters, HiSim Graph or visualize genes with the more common intersections, GeneSet Graph.</p> <p>Generation and visualization of a maximal triclique using the intersection of gene sets with the Triclique Viewer Tool can allow users to discover novel relationships between gene ontology terms. The overlap/similarity of gene sets themselves can be visualized with Jaccard Similarity plots. These set overlaps are also available for Clustering, while component gene intersections can be found on our Gene Intersection Lists.  The Boolean Algebra tool uses advanced set logic to integrate multiple genesets. For each tool, GeneWeaver allows users to expand their search beyond a single species using Homology Mapping.</p>"},{"location":"analysis-tools/#analyze-gene-sets-tab","title":"Analyze Gene Sets Tab","text":"<p>Use the analyze gene sets tab on the navigation bar to move to the analysis tools.</p> <p></p> <p>A registered user or guest user who has a temporary project will see the Analyze page. Down the left side are all the tools. Select one or more projects or gene sets and click on the desired tool. Options will then be displayed below the tool. Select the desired options and click the Run button.</p> <p></p> <p>A tool can take a long time, depending on the size and complexity of the selected gene sets. A message will be displayed showing the progress of the tool. You can now navigate away from this page and later return to the results page.</p> <p></p>"},{"location":"analysis-tools/#view-results","title":"View Results","text":"<p>The link to the results page is on the analyze gene sets tab.</p> <p></p> <p>Your tool has completed once the duration column has a time listed. From this page you can:</p> <ul> <li>Delete a test that you are no longer interested in</li> <li>Re-run a test</li> <li>View the test results</li> <li>Edit the test name</li> <li>Use the Search box to display test name matches</li> <li>Sort the columns by clicking on the header</li> <li>Select up to 100 results to display per page</li> </ul>"},{"location":"analysis-tools/abba/","title":"ABBA Gene Search","text":""},{"location":"analysis-tools/abba/#abba","title":"ABBA","text":"<p>Given a set of interesting genes, do other genes have similar relationships to known sets of genes? For example, given a set of genes known to be related to drug abuse, what other genes share similar expression patterns in drug abuse gene sets? By answering this question, it becomes possible to elucidate under-studied or obfuscated genes that may play a role in complex phenotypes.</p> <p>We have developed a new GeneWeaver tool to address this question, which we call Anchored Biclique of Biomolecular Associations (ABBA). This tool takes advantage of the large number of collected data and cross-species integration to find new genes for investigation.</p> <p>The search begins with a user-provided list of genes of interest, such as highly-studied genes with known pathways and relationships. The database then finds any gene sets that contain at least N of the genes in the provided list. From the resulting list of gene sets, ABBA then isolates any genes that occur in at least M GeneSets but not in the initial list. These resulting genes share similar gene set overlap with the original input set, but may not have been previously considered in relation to the gene set of interest.</p> <p> </p> <p>In the above figure, the lighter nodes indicate less overlap. Using N=2 produces a collection of 37 GeneSets as of 7 July 2010. For brevity, only the top 5 results are shown above. With M=15, the following table lists genes in the result having similar relationships to the input set.</p> <p></p> <p>Without reasonable thresholds, the results quickly become overwhelming. As of this writing, a simple set of 4 genes of interest results in 555 GeneSets and over 38,000 genes in the candidate list. Increasing the input set to 7 genes of interest results in 983 GeneSets and almost 40,000 genes. Simply requiring gene sets to contain at least 3 genes significantly reduces the search space to 11 and 37 GeneSets, respectively.</p> <p></p>"},{"location":"analysis-tools/boolean-algebra/","title":"Boolean Algebra","text":""},{"location":"analysis-tools/boolean-algebra/#boolean-algebra","title":"Boolean Algebra","text":"<p>The Boolean Algebra Tool performs basic set operations on at least two Gene Sets. Results are displayed as lists of genes belonging to one of the three different types of set operations: Union, Intersect, and Symmetric Difference. Furthermore, results allow users to quickly determine new relationships between Gene Sets and create a new Gene Set based on set-derived findings.</p>"},{"location":"analysis-tools/boolean-algebra/#using-the-boolean-algebra-tool","title":"Using the Boolean Algebra Tool","text":"<p>Access the Boolean Algebra Tool through the Analyze Genesets tab, located in the left-hand column and distinguished by the Venn diagram icon.</p> <p></p> <p>To generate Boolean Algebra results, select either a Project of two or more Gene Sets or at least two individual Gene Sets from a project. Next, select the appropriate Boolean Algebra function. These functions are based on basic Set Algebra: Union,  Intersection, Symmetric Difference.</p> <ul> <li>Union: This tool generates a set of all genes located in all sets. It removes   duplicates by default. The results will display what homology mapping was used to   generate a gene entry.</li> </ul> <p>This result shows the union of three Gene Sets, two mouse and one human.</p> <p></p> <ul> <li>Intersection: This option will cause the Boolean tool to return all genes in   common with the selected Gene Set inputs. It has an additional option (\"Genes must   intersect in at least X\") that specifies the minimal amount of overlaps required to   return a result. If a minimal overlap is set to 3, for example, only Gene Sets that   intersect with 3 or more genes will be evaluated, and only the intersecting genes will   be returned. In addition, results are divided into separate groups based on the number   of genes in their intersections.</li> </ul> <p>These three Gene Sets have 4 genes in common. All of them are homologs between mouse and human.</p> <p></p> <p>Changing the overlap to 2 created two sets of results, those in all 3 Gene Sets and those in only 2 of the Gene Sets.</p> <p></p> <ul> <li>Symmetric Difference: This tool will create a set of genes that are unique to the   Gene Sets selected as input. It effectively finds the Union of all Gene Sets minus the   intersection of those Gene Sets.</li> </ul> <p>In this example, there is a result set of unique genes for each input Gene Set.</p> <p></p>"},{"location":"analysis-tools/boolean-algebra/#managing-results","title":"Managing Results","text":"<p>A table located just below the circle overlap diagram and above the results is intended to display a broad survey of genes included in the input Gene Sets, categorized by species. It lists: Genes Specific to Species, Genes In Common with at Least One Other Species, and Total Number of Genes. These values are based on the total number of genes in the input sets, and may not specifically represent results. The table is intended to help aid in the selection of which species to map the results in cases where new Gene Sets are created.</p> <p></p> <p>Genes returned by the Boolean Algebra tool can be added to new Gene Sets. To do this, click on the Create New Gene Set From Results button for the group you want.</p> <p>Since results can contain genes from a mixed set of species, a species must be selected for mapping the genes in the new Gene Set.</p> <p></p> <p>The standard Upload GeneSet page will open. The genes will be listed in the gene information section. If no species is selected, no genes will be listed. You can now edit any of the fields to change the Gene Set name, description, etc. Follow the Upload GeneSet procedure. It is also important to note that very large gene lists may take a few moments to load, during which time the user may experience a dimmed 'Loading' screen.</p>"},{"location":"analysis-tools/boolean-algebra/#circle-overlap-diagram","title":"Circle Overlap Diagram","text":"<p>If the user selects 10 or fewer Gene Sets, a gene overlap diagram will appear near the top of the results page. The Circle Overlap representation is an approximation of Euler fractional overlaps. It represents how the input genesets relate to each other. It uses the same homology mapping as the Boolean Algebra tool to render the approximate fractional overlap of the genes shared between each set.</p> <p></p>"},{"location":"analysis-tools/clustering/","title":"Clustering","text":""},{"location":"analysis-tools/clustering/#why-use-the-clustering-tool","title":"Why Use the Clustering Tool","text":"<p>Clustering is one of the most powerful tools in bioinformatics, where classifications are too strict for data distinction, clustering helps give the user an evaluation that is not so distinct.</p>"},{"location":"analysis-tools/clustering/#using-the-clustering-tool","title":"Using the Clustering Tool","text":"<ol> <li> <p>Select the gene sets from your list of projects that you would like     to analyze.</p> <ul> <li>You need a minimum of 3 gene sets in total to run the tool.</li> </ul> </li> <li> <p>Select if homology is to be included or excluded.</p> <ul> <li>Homology is included by default.</li> </ul> </li> <li> <p>Select the method of clustering.</p> <ul> <li>Average is the default method of clustering.</li> <li>There are five methods of clustering. They are listed in the     methods section.</li> </ul> </li> </ol>"},{"location":"analysis-tools/clustering/#understanding-your-results","title":"Understanding your Results","text":""},{"location":"analysis-tools/clustering/#visualization-types","title":"Visualization Types","text":"<p>There are two methods for visualizing your clustering results.</p> <p>Force Directed Graph</p> <p></p> <ul> <li>Tree representation of each cluster.</li> <li>Clear depiction of hierarchy.</li> <li> <p>The most opaque node of a tree represents the clusters root.</p> </li> <li> <p>Each node is classified as one of the following:</p> <ul> <li>Cluster - Grouping of gene sets<ul> <li>The opacity of the nodes is based on the Jaccard Similarity of its children. The more similar the gene sets, the darker the cluster.</li> <li>On Hover: Reveals Jaccard Similarity of its child nodes. Reveals set notation of the containing hierarchy.</li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li>On Click: Collapses (absorbs its children).</li> </ul> <p></p> <pre><code>-   **Gene Set** - A set of genes\n    -   Colored based on the species contained in the gene set study.\n    -   Sized based on the relative size of the gene set.\n    -   On Hover: Reveals abbreviated gene set information.\n    -   On Click: Reveals and cycles through genes in groups of ten.\n    -   On Double Click: Opens a new page containing extensive gene set information.\n\n-   **Gene**\n    -   On Hover: Reveals the name of the gene.\n\n-   **Edges**\n    -   Connects nodes to its children.\n    -   The opacity of edges leading from cluster nodes is based on the cluster nodes Jaccard Similarity, following the same scale as above.\n</code></pre> <p>Partitioned Sunburst</p> <p></p> <ul> <li>Top-down view of each tree.</li> <li>Center represents the root.</li> <li> <p>Partitioned sub-circles represent clusters, gene set or gene.</p> </li> <li> <p>Partition</p> <ul> <li>Partitions are the equivalent to nodes in a tree</li> <li>Each parition is classified as one of the following:<ul> <li>Cluster - Grouping of gene sets<ul> <li>On Hover: Reveals Jaccard Similarity of its child     partition and highlights all nodes within the cluster.</li> <li>On Right Click: Opens a new \"View GeneSet Overlap\" page     using all gene sets in the cluster as input.</li> </ul> </li> <li> <p>Gene Set - A set of genes</p> <ul> <li>Colored based on the species contained in the gene     set study.</li> <li> <p>Drawn arc sizes are based on the relative size of the     gene set.</p> </li> <li> <p>On Right Click: Opens a new \"View GeneSet Details\" page for the         given gene set.</p> </li> <li>Rings<ul> <li>Each Ring represents a level in the tree.</li> <li>The outer most levels are gene sets.</li> <li>The levels leading up to a gene set represents the hierarchy of     the cluster.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"analysis-tools/clustering/#clustering-methods","title":"Clustering Methods","text":"<p>Listed below are the six different methods that the user can choose from while running the tool. The first five are different clustering methods that will run on the selected genesets and display a force directed tree and a partitioned sunburst based on the clustered genesets.</p> <p>All five of the given clustering methods are agglomerative hierarchical clustering methods that start with each geneset belonging to its own cluster. They then combine the clusters at each iteration based off of a described linkage method that determines how the distance between two clusters is defined. The clusters are combined until there are no more clusters that are similar to each other (the distance between them is too large).</p>"},{"location":"analysis-tools/clustering/#mcquitty","title":"McQuitty","text":"<p>The McQuitty clustering method uses a linkage method where distance depends on the combination of clusters instead of the individual genesets within each cluster. When two clusters are joined together, the distance of the new cluster to any other cluster is calculated as the average distance between the two clusters that are being joined and the other cluster. For example, if clusters 2 and 4 have the greatest similarity and we are going to combine them into a new cluster called 2+4, then the distance from 2+4 to 1 is the average of the distances from 2 to 1 and 4 to 1.</p> <ul> <li>Algorithm<ul> <li>Each gene set is initialized as its own cluster.</li> <li>The initial similarity between each cluster is the Jaccard     Similarity of the two genesets.</li> <li>While we still have similar clusters:<ul> <li>Clusters with highest similarity are clustered together.</li> <li>Calculates the similarity between the new cluster and all     the rest based on the McQuitty linkage method</li> </ul> </li> </ul> </li> <li>Time Complexity<ul> <li>O(n^2^ log n)</li> <li>This method is the most time efficient.</li> </ul> </li> </ul>"},{"location":"analysis-tools/clustering/#ward","title":"Ward","text":"<p>The Ward clustering method uses a linkage method where the distance between two clusters is based off of the Jaccard Similarity score between them. When two clusters are joined together, the new cluster will take the union of the genesets in the two clusters that are being joined and set that as its geneset. It will then calculate the new geneset's similarity score against all the other cluster's genesets and that will be set as the distance between the new cluster and all the other clusters.</p> <ul> <li>Algorithm<ul> <li>Each gene set is initialized as its own cluster</li> <li>The initial distance between clusters is the Jaccard Similarity     score between each of the cluster's genesets</li> <li>While we have clusters that are similar to each other:<ul> <li>Clusters with highest similarity are clustered together.</li> <li>The new cluster contains a geneset which is the union of its     children's genesets</li> <li>Recalculates the Jaccard Similarity score between the new     cluster and all the other clusters</li> </ul> </li> </ul> </li> <li>Time Complexity<ul> <li>O(n^3^)</li> </ul> </li> </ul>"},{"location":"analysis-tools/clustering/#complete","title":"Complete","text":"<p>The Complete clustering method uses a linkage method where the distance between two clusters is the lowest similarity score between any of the genesets in one cluster compared to any of the genesets in the other cluster. When two clusters are combined, the genesets within each of the clusters are put into a new cluster. No new calculations are needed at each iteration because we are simply reusing the similarity scores of all the genesets compared to each other.</p> <ul> <li>Algorithm<ul> <li>Each gene set is initialized as its own cluster.</li> <li>The similarity scores of all the genesets compared to each     other are saved in a matrix</li> <li>While we still have clusters that are similar:<ul> <li>Determine which two clusters to join:<ul> <li>The distance between two clusters is the lowest     similarity score between a geneset in one cluster and a     geneset in the other cluster</li> <li>The highest of these distances determines which two     clusters will be joined</li> </ul> </li> <li>Combines the two clusters to create a new cluster that has     all the genesets that were present in the two children     clusters</li> </ul> </li> </ul> </li> <li>Time Complexity<ul> <li>O(n^3^)</li> </ul> </li> </ul>"},{"location":"analysis-tools/clustering/#average","title":"Average","text":"<p>The Average clustering method uses a linkage method where the distance between two clusters is the average similarity score between all of the genesets in one cluster compared to all of the genesets in the other cluster. When two clusters are combined, the genesets within each of the clusters are put into a new cluster. No new calculations are needed at each iteration because we are simply reusing the similarity scores of all the genesets compared to each other.</p> <ul> <li>Algorithm<ul> <li>Each gene set is initialized as its own cluster.</li> <li>The similarity scores of all the genesets compared to each     other are saved in a matrix</li> <li>While we still have clusters that are similar:<ul> <li>Determine which two clusters to join:<ul> <li>The distance between two clusters is the average     similarity score between every geneset in one cluster     and every geneset in the other cluster</li> <li>The highest of these distances determines which two     clusters will be joined</li> </ul> </li> <li>Combines the two clusters to create a new cluster that has     all the genesets that were present in the two children     clusters</li> </ul> </li> </ul> </li> <li>Time Complexity<ul> <li>O(n^3^)</li> </ul> </li> </ul>"},{"location":"analysis-tools/clustering/#single","title":"Single","text":"<p>The Single clustering method uses a linkage method where the distance between two clusters is the highest similarity score between any of the genesets in one cluster compared to any of the genesets in the other cluster. When two clusters are combined, the genesets within each of the clusters are put into a new cluster. No new calculations are needed at each iteration because we are simply reusing the similarity scores of all the genesets compared to each other.</p> <ul> <li>Algorithm<ul> <li>Each gene set is initialized as its own cluster.</li> <li>The similarity scores of all the genesets compared to each     other are saved in a matrix</li> <li>While we still have clusters that are similar:<ul> <li>Determine which two clusters to join:<ul> <li>The distance between two clusters is the highest     similarity score between any geneset in one cluster and     any geneset in the other cluster</li> <li>The highest of these distances determines which two     clusters will be joined</li> </ul> </li> <li>Combines the two clusters to create a new cluster that has     all the genesets that were present in the two children     clusters</li> </ul> </li> </ul> </li> <li>Time Complexity<ul> <li>O(n^3^)</li> </ul> </li> </ul>"},{"location":"analysis-tools/dbscan/","title":"DBSCAN Gene Clustering","text":""},{"location":"analysis-tools/dbscan/#what-is-dbscan","title":"What is DBSCAN?","text":"<p>DBSCAN (Density-Based Spatial Clustering of Application with Noise) is a clustering algorithm that groups genes into clusters based on how closely related the genes are.</p>"},{"location":"analysis-tools/dbscan/#why-use-the-dbscan-tool","title":"Why Use the DBSCAN Tool?","text":"<p>In general, clustering is used to find patterns or outliers within data sets. In this implementation of DBSCAN, genes in the same cluster would be considered similar, while genes in different clusters would be less similar. An explanation of DBSCAN can be found here. Within Geneweaver, this tool can be used to infer relationships between genes. For example, if clusters with similar genes continue to appear in tests across multiple data sets, one could say that these genes are closely related.</p>"},{"location":"analysis-tools/dbscan/#dbscan-parameters","title":"DBSCAN Parameters","text":"<p>DBSCAN takes in 2 parameters, epsilon and minPoints.</p>"},{"location":"analysis-tools/dbscan/#the-epsilon-parameter","title":"The Epsilon Parameter","text":"<p>Epsilon determines how close the genes need to be in order to be considered in the same cluster. For example, an epsilon of 1 means that genes need to share at least 1 gene set. Another way of describing epsilon would be the \"radius of the neighborhood\". A larger epsilon will have a farther reach when finding clusters.</p>"},{"location":"analysis-tools/dbscan/#the-minpoints-parameter","title":"The minPoints Parameter","text":"<p>The minPoints parameter determines the minimum number of points required to form a cluster. A cluster can have more than the minPoints number of genes, but cannot be less than minPoints. If a cluster has less than minPoints number of genes, it is considered noise.</p>"},{"location":"analysis-tools/dbscan/#the-dbscan-algorithm","title":"The DBSCAN Algorithm","text":"<p>Before the DBSCAN algorithm executes, it must determine how closely related each gene is to the other genes. A bipartite graph is used to show how the genes connect to each gene set. First, all closest paths between genes are found. Following that, the DBSCAN algorithm is run. You can find an example of DBSCAN here.</p>"},{"location":"analysis-tools/dbscan/#run-times-of-dbscan","title":"Run Times of DBSCAN","text":"<p>On average, the worst-case time complexity of DBSCAN is O(n^2^). However, due to the sheer variability of data sets and epsilon and minPoints combinations, it is difficult to accurately predict the run time of this implementation. There are some factors that will typically increase the run time. These include:</p> <ul> <li>Number of Genes: If more genes are tested, the run time is longer</li> <li>Epsilon Value: A larger epsilon will typically give a longer run     time</li> <li>The size of gene sets: Gene sets with more genes in them will take     longer to explore</li> <li>The density of genes: If the data set is denser (more connections),     the run time is longer</li> </ul> <p>Note: Even if no clusters are found, the algorithm may still take time to execute.</p> <p>Below is a graph that shows the run times of the algorithm. The red line shows the run time if all genes are in the same gene set. The blue line shows the genes divided into 10 gene sets, with no overlap. The green line is similar to the blue line, but here the gene sets share one gene in common with one other gene set. This results in one giant cluster with all of the genes.</p> <p>Note: Since the blue line and green line overlap, you may not be     able to see the blue line.</p> <p></p> <p>Below is a table that estimates the run time of the red, blue, and green cases based on number of genes. Note that run times will change based on density of the gene sets and epsilon.</p> Number of Genes 1 Gene Set 10 Gene Sets, No Overlap 10 Gene Sets, Overlap 100 3 3 3 200 3 3 3 500 5 3 3 1,000 10 3 3 1,500 12 3 3 2,000 15 3 3 2,500 28 5 5 3,000 63 8 8 3,500 110 12 12 4,000 160 17 18 4,500 230 24 25 5,000 306 32 33 6,000 487 50 51 7,000 708 72 75 8,000 969 98 100 9,000 1270 129 131 10,000 1612 163 165 <p>Approximate DBSCAN Run Times with Epsilon = 1 and Min Points = 1 (in   seconds)</p>"},{"location":"analysis-tools/dbscan/#visualization","title":"Visualization","text":"<p>Once DBSCAN is completed, results can be visualized in two ways. However, there is a possibility that visualization may not occur. If a data set is too large, the results will not be visualized and a message will be displayed.</p> <p>Note: Due to the rendering of the Cluster / Gene Table, run times may appear longer than estimated in here.</p>"},{"location":"analysis-tools/dbscan/#circles","title":"Circles","text":"<p>The default visualization on the tool is circle packing. This represents the clusters and the genes within them. The outermost circle is the entire data set. The darker blue circles within represent the different clusters. The circles within the clusters represent the genes that belong to the cluster. The color of each gene denotes the species.</p> <p>To see more information about the cluster, you can click on the cluster. This will zoom in on the cluster and display gene IDs. Clicking on a gene ID will redirect to a search for that gene within the GeneWeaver database.</p> <p>Below is an example of the circle packing visualization with zoom functionality.</p> <p></p>"},{"location":"analysis-tools/dbscan/#wires","title":"Wires","text":"<p>The other visualization is a wire representation. This shows the connections between all genes in the same gene set. The color of each gene shows which cluster the gene is in. If a gene is grey, it is considered noise. Mousing over a circle will highlight it and show the gene ID. By clicking and holding a gene, you can drag the gene around the screen.</p> <p>Note: This visualization will only be drawn with small data sets due to the complexity of drawing all lines between genes.</p> <p>Below is an example of the wires visualization.</p> <p></p>"},{"location":"analysis-tools/dbscan/#cluster-gene-table","title":"Cluster / Gene Table","text":"<p>Below the visualizations is a table. This table is split up into clusters, which contains all the genes within that specific cluster. Information about each gene can be seen here as well. This table is similar to the one on the GeneSet Details page.</p> <p></p> <p>If the data set becomes sufficiently large, a minimized table will be shown on screen. An example of the minimized table is below.</p> <p></p>"},{"location":"analysis-tools/dbscan/#dbscan-example","title":"DBSCAN Example","text":"<p>Below is an example of the DBSCAN algorithm. For this example, epsilon is set to 1 and min-points is set to 4. Figure 1 shows the gene-to-gene set bipartite graph.</p> <p></p> <p>Figure 1: The gene-to-gene set bipartite graph</p>"},{"location":"analysis-tools/dbscan/#finding-shortest-paths-between-genes","title":"Finding Shortest Paths Between Genes","text":"<p>Starting at \"Test Set 0\" Prp31, Arr1, baz, and car are all in the same gene set. This means that when building the gene-to-gene graph, all of those genes will be connected to each other. \"Test Set 1\" shows that Arr1 and veli are connected. \"Test Set 2\"has veli and Arr2 connected. \"Test Set 3\" has Arr2 connected to CalX. Finally, \"Test Set 4\" has CalX, CdsA, and Cerk connected. Now that the connections between genes are determined, a map can be drawn showing these connections (Figure 2).</p> <p></p> <p>Figure 2: The gene-to-gene graph denoting shortest paths</p> <p>Using this graph, the shortest path from a gene to any other gene can be determined. For example, the distance between Arr1 and baz is 1. The distance between Prp31 and CalX is 4. This is important when applying epsilon to the algorithm.</p>"},{"location":"analysis-tools/dbscan/#running-the-dbscan-algorithm","title":"Running the DBSCAN Algorithm","text":"<p>This is the pseudocode for the algorithm.</p> <p></p> <p>Starting in the DBSCAN function, the cluster is first initialized to 0. Next, each point is visited only once. For this example, baz will be the first gene visited. baz will first be marked as visited, then the neighbors of baz will be found by regionQuery. The regionQuery function will return all points within radius epsilon, including the point itself. Calling regionQuery on baz with epsilon will return all genes that are one away from baz. In this example baz, car, Prp31, and Arr1 are returned and listed as baz's neighbors.</p> <p></p> <p>The list of [baz, car, Prp31, Arr1] are returned. Now the amount of items in the list is checked with the minPoints parameter. If it is greater than or equal to minPoints, a cluster is formed. Otherwise, the point is labelled as noise. In this example, baz has 4 neighbors, which is equal to the number of points. The \"C = next cluster\" statement means that C is a valid cluster. Next, the expandCluster function is called.</p> <p>The expandCluster will continue to expand the cluster until the edge of the cluster is reached. The edge of a cluster is reached when a point has a list of neighbors that is less than the number of minPoints. When entering the expandCluster function, the point P will be added to the cluster. The cluster is currently [baz]. Next, the algorithm runs through all of the neighbors to see if the cluster can be expanded. The list of neighbor points is now [baz, car, Prp31, Arr1]. First baz is checked, but because it has already been visited, it is not going to be checked again. Next, car is checked. Car will then return a list of all its neighbors, which are [car, baz, Prp31, Arr1]. Then that list is checked against the number of minPoints. Since it is greater than or equal to minPoints, that list is added to the original list of neighbors. The original neighbors list of [baz, car, Prp31, Arr1] and the new neighbors list of [car, baz, Prp31, Arr1] are added together. However, the algorithm does not add duplicate genes to the list. Therefore, nothing is added to the list and the neighbors list is [baz, car, Prp31, Arr1]. Then, the gene is added to the current cluster if it is not already part of a cluster. car is not a part of any other cluster so it is added to the current cluster. Now the cluster contains [baz, car].</p> <p>Next, Prp31 is checked. Its neighbors are [baz, car, Prp31, Arr1]. This list is equal to minPoints, but once again, the list of Prp31's neighbors are already in the list of baz's neighbors. Nothing is added to new neighbors, and since Prp31 is not a part of any other cluster, it is added to the current cluster, which is now [baz, car, Prp31].</p> <p>Now, Arr1 is checked. Its neighbors are [Arr1, baz, car, Prp31, veli]. Notice that a new gene appeared in Arr1's neighbors (veli). This gene is now added to the list of baz's neighbors. Arr1 is added to the current cluster, so the cluster now holds [baz, car, Prp31, Arr1]. Now there is still one gene left to check in baz's neighbors, which is veli.</p> <p></p> <p>veli is checked and it's neighbors are [veli, Arr1, Arr2]. The list is less than the number of minPoints, which means the cluster cannot be expanded past veli.</p> <p></p> <p>However, veli is still part of the current cluster. The current cluster is now [baz, car, Prp31, Arr1, veli]. Since the list of baz's neighbors have all been checked, the cluster is finished.</p> <p></p> <p>Now that baz has been checked, it is time to check other genes. Next, car is checked. However, it was already visited when handling baz's neighbors, so nothing needs to be checked. The same applies for Prp31, Arr1, and veli. The next gene to check is Arr2. Arr2's neighbors are [veli, Arr2, CalX]. This is less than minPoints, so it is marked as noise.</p> <p></p> <p>However, just because a gene is marked as noise, does not guarantee it is noise when the algorithm is finished. Later in the algorithm, it can be added to a cluster.</p> <p></p> <p>Next, CalX is checked. It's neighbors are [CalX, Arr2, CdsA, Cerk]. This list is equal to minPoints, so the cluster needs to be expanded.</p> <p></p> <p>CalX is checked, but it is already visited, and it is not a part of any cluster, so it is added to the 2^nd^ cluster. The 2^nd^ cluster currently holds [CalX]. Next, Arr2 is checked, but it was already visited and marked as noise. However, it is not in any cluster, so it is added to the 2^nd^ cluster. The 2^nd^ cluster now contains [CalX, Arr2]. Next, CdsA is checked. Its neighbors are [CdsA, Cerk, CalX]. This list is not greater than minPoints so nothing is added. CdsA is not added to the 2^nd^ cluster because it is not part of the first cluster. The 2^nd^ cluster is now [CalX, Arr2, CdsA]. Finally, Cerk is checked. Its neighbors are [CdsA, CalX]. The list is smaller than minPoints, so they are not added to Calx's neighbors. Cerk is not a part of any cluster, so it is added to the 2^nd^ cluster. The 2^nd^ cluster is now complete. It contains [CalX, Arr2, CdsA, Cerk].</p> <p>Now that CalX is checked, CdsA is checked. It was already visited in the expandCluster function so nothing needs to be done. The same applies for Cerk. The algorithm is now complete.</p> <p>Two clusters were produced: [baz, car, Prp31, Arr1, Veli] and [Arr2, CalX, CdsA, Cerk]</p> <p>Figure 3 shows the gene-to-gene map visualized in clusters.</p> <p></p> <p>Figure 3: The result of the DBSCAN clustering</p>"},{"location":"analysis-tools/find-variants/","title":"Find Variants","text":""},{"location":"analysis-tools/find-variants/#why-use-the-find-variants-tool","title":"Why Use the Find Variants Tool","text":"<p>The Find Variants tool traverses a graph database representing the relationships of human or mouse variants and genes. The tool starts with a set of human or mouse genes and outputs a list of variants in the other species using orthologous relationships between genes.</p> <p>The graph database is built off a fixed and reproducible set of data sourced mostly from Ensembl-104 as well as some other data from JAX, AGR, and GTEx. The data is gathered, processed, and imported into a Neo4J graph database. </p>"},{"location":"analysis-tools/find-variants/#understanding-the-find-variants-tool","title":"Understanding the Find Variants Tool","text":"<p>If the input to the tool is a list of human genes, the tool would find orthologous genes in mice and variants of those mouse genes either through eQTL relationships or transcript relationships. The tool can also work from mouse genes to human variants.</p> <p></p> <p>Figure 1: Cut of the graph database to map the relationships from a set of human genes to mouse variants.</p> <p>The tool interacts with the graph database built using information from AGR and Ensembl for obtaining information about genes and their orthologous relationships.</p>"},{"location":"analysis-tools/find-variants/#using-the-find-variants-tool","title":"Using the Find Variants Tool","text":"<p>Access the Find Variants Tool through the Analyze Genesets tab.</p> <p>To generate variants, you must first select GeneSets from a project. Projects may be created and updated by uploading GeneSets, searching the GeneWeaver database, or through the use of other tools in the GeneWeaver system. See the documentation for uploading GeneSets, Search, or Manage GeneSets to learn more about these functions. To select an entire project or multiple projects for analysis, check the box next to the project name. To select individual GeneSets within a project, click on the + beside the project name and check individual GeneSets using the check boxes. Next, click on the Jaccard Similarity icon in the Analysis tools box to the left of the project list.</p> <p>You must select at least one GeneSet to be analyzed. All GeneSets selected must be from the same species, either mouse or human.</p> <p>Once you have selected GeneSets from a project, select the Find Variants icon from the Analysis Tools box, to the left of your GeneSets.</p> <p>After the tool has finished, a results table is displayed containing information about the variants found. The results can be searched for keywords using the searchbar and all the results can be downloaded using the 'Download' button which will create a CSV file titled 'FindVariants_*.csv' where the * is a string of unique numbers.</p>"},{"location":"analysis-tools/find-variants/#options","title":"Options","text":""},{"location":"analysis-tools/find-variants/#species","title":"Species","text":"<p>Choosing \"Human to Mouse\" will look for relationships from human genes to mouse variants. Choosing \"Mouse to Human\" will look for relationships from mouse genes to human variants.</p>"},{"location":"analysis-tools/find-variants/#path","title":"Path","text":"<p>Choosing \"eQTL\" will only find variants that are related to genes through the eQTL relationship and will also return the tissue name. Choosing \"Transcript\" will find variants related to genes through the Transcript relationship and will return a Transcript ID but no information about the tissue name. Selecting both will return variants for both options.</p> <p>The \"Transcript\" option will naturally return many more variants than the \"eQTL\" option and as a result can take much longer to run.</p>"},{"location":"analysis-tools/geneset-graph/","title":"GeneSet Graph","text":""},{"location":"analysis-tools/geneset-graph/#why-use-the-geneset-graph-tool","title":"Why Use the GeneSet Graph Tool","text":"<p>The GeneSet Graph is designed for the user in need of a partitioned display to illustrate just how tied genes are to one another. For example: a user in need of a GeneSet Graph would look for visual references more than chemical references or references by utility. A GeneSet Graph can also help pick apart the most valuable or most occurring genes depending on the user's preference.</p>"},{"location":"analysis-tools/geneset-graph/#understanding-the-geneset-graph-tool","title":"Understanding the GeneSet Graph Tool","text":"<p>The GeneSet Graph Tool presents a partitioned display of genes and GeneSets. Genes are represented by elliptical nodes, and GeneSets are represented by boxes. The least-connected genes are displayed on the left, followed by the GeneSets, then the more-connected genes in increasing order to the right. Genes and GeneSets are connected by colored lines to show what genes are in which GeneSets. In this way, the GeneSet Graph displays the bipartite graph of the genes and GeneSets, but modifies the display of the gene partition to make it easier to visually interpret.</p> <p> Figure 1: Least connected genes to the left, GeneSets in the middle, most connected genes on the right.</p>"},{"location":"analysis-tools/geneset-graph/#using-the-geneset-graph-tool","title":"Using the GeneSet Graph Tool","text":"<p>Access the GeneSet Graph Tool through the Analyze Genesets tab.</p> <p>To generate a GeneSet Graph, you must first select gene sets from a project. Projects may be created and updated by uploading GeneSets, searching the GeneWeaver database, or through the use of other tools in the GeneWeaver system. See the documentation for uploading GeneSets, Search, or Manage GeneSets to learn more about these functions. To select an entire project or multiple projects for analysis, check the box next to the project name. To select individual GeneSets within a project, click on the + beside the project name and check individual GeneSets using the checkboxes. Next, click on the GeneSet Graph icon in the Analysis tools box to the left of the project list. (For users that want to change options, press the green + sign before they start the tool).</p> <p> Figure 2: GeneSet Graph Selection Icon.</p> <p>The GeneSet Graph can be interactively panned and zoomed with the mouse, and more details of each gene or GeneSet can be viewed by clicking on the individual nodes in the display. In addition to these interactive features, there are also a few options available to optimize the display.</p> <p>Clicking on a gene node executes a search for other GeneSets containing the gene of interest or its homologues. Clicking on a GeneSet node reveals full publication and annotation information, including the GeneSet description.</p> <p> Figure 3: Selecting GeneSets will navigate users to the GeneSet page; selecting the gene will initiate a search of that gene.</p>"},{"location":"analysis-tools/geneset-graph/#options","title":"Options","text":""},{"location":"analysis-tools/geneset-graph/#suppress-disconnected","title":"Suppress Disconnected","text":"<p>When enabled, this option will suppress the display of GeneSets which are not connected to any displayed genes. This helps remove unnecessary information for users that only want relations. This is only relevant when MinDegree is greater than 1.</p>"},{"location":"analysis-tools/geneset-graph/#homology","title":"Homology","text":"<p>Include homology to integrate multi-species data. If excluded, data from multiple species will be segregated into distinctly separate graphs.</p> <p> Figure 4: 2 GeneSets each from mouse and rat.</p>"},{"location":"analysis-tools/geneset-graph/#mindegree","title":"MinDegree","text":"<p>The minimum number of connections for a displayed gene. A value of 2 means that any displayed genes must be found in at least two of the input gene sets. Increasing this value will basically shift the resulting gene display left. Since lower-order overlaps are generally more likely and more numerous than higher-order intersections, this can quickly reduce the number of genes displayed and make the result more manageable.</p> <p> Figure 5</p>"},{"location":"analysis-tools/hisim-graph/","title":"HiSim Graph","text":""},{"location":"analysis-tools/hisim-graph/#about-the-hisim-graph-tool","title":"About the HiSim Graph Tool","text":"<p>The HiSim Graph, short for Hierarchical Similarity Graph, is a tool for grouping functional genomic datasets based on the genes they contain. For example: The user may want to determine what a set of experiments on alcohol preference have in common, and what makes various experiments unique from one another. Alternatively, one may wish to take a large set of studies of related phenomena and identify their shared or distinct substrates. In this situation one may want to know whether there is a shared biological basis for addiction and learning, and if so, what the substrate is. The user might also want to examine studies of a large number of related disorders and determine whether a more appropriate biologically-based classification can be constructed.</p> <p>The HiSim Graph Tool is designed to address these goals; it presents a tree of hierarchical relationships for a set of input GeneSets. The structure is determined solely from the gene overlaps of every combination of GeneSets.</p>"},{"location":"analysis-tools/hisim-graph/#understanding-the-results-of-the-hisim-graph","title":"Understanding the Results of the HiSim Graph","text":"<p>It's best to use the HiSim Graph Tool with knowledge on what set intersections are: If GeneSet A contains Gene A, Gene B, and Gene C, and GeneSet B contains Gene A, Gene B, and Gene D; then the intersection of GeneSet A and GeneSet B will contain Gene A and Gene B, because an intersection of sets are whatever is contained in all sets intersected.</p> <p>In terms of GeneSets, the smallest intersections (fewest GeneSets, most genes) are towards the right, and the largest intersections (most GeneSets, fewest genes) are on the left. When thinking about the genes in all the GeneSets, the roles are reversed ( smallest number of genes on the left, largest number of genes on the right).</p> <p></p> <p>Figure 1: Relation of GeneSets to the HiSim Graph</p> <p>HiSim Graphs must be interpreted in the context of the input GeneSets. The above example represents differentially expressed genes in multiple brain regions of alcohol preferring rats from a single study. The highest intersection represents a gene differentially expressed in all 5 brain regions. In this case, the highest intersection represents the highest amount of correspondence between data sets. As you move to the right, genes become more specific to the brain regions tested. Each solid node has children and can be collapsed by clicking on it. Leaf nodes are empty and colored by species, which is identified in a legend at the bottom of the screen.</p> <p> Figure 2: A HiSIm Graph for diverse functions</p> <p>If one were to start with multiple alcohol preference measures from different studies, the top of the HiSim Graph represents the correspondence between the experiments (such as well-characterized alcohol preference genes), and as you descend the graph the intersections describe more specific features shared between experiments (such as stress response or tissue source).</p> <p>When starting with more loosely related inputs, interpretation becomes more difficult. If one started with alcohol preference, nicotine dependence, and traumatic brain injury data (Figure 2), the top of the HiSim Graph would represent more generic processes such as neural plasticity in this case.</p>"},{"location":"analysis-tools/hisim-graph/#using-the-hisim-graph-tool","title":"Using the HiSim Graph Tool","text":"<p>Access the HiSim Graph Tool through the Analyze Genesets tab.</p> <p>To generate a HiSim Graph, you must first select gene sets from a project. Projects may be created and updated by uploading GeneSets, searching the GeneWeaver database, or through the use of other tools in the GeneWeaver system. See the documentation for uploading GeneSets, Search, or Manage GeneSets to learn more about these functions. To select an entire project or multiple projects for analysis, check the box next to the project name. To select individual GeneSets within a project, click on the + beside the project name and check individual GeneSets using the check boxes. Next, click on the HiSim Graph icon in the Analysis tools box to the left of the project list. Select the options you would like for the tool to run on, and click Run.</p> <p> Figure 3: Selecting gene sets and executing an analysis from the Analyze GeneSets page</p> <p> Figure 4: The results page for the HiSim Graph.</p> <p>Most genes are connected to two of the input GeneSets. One gene is connected to three of the input sets. (Inset)</p>"},{"location":"analysis-tools/hisim-graph/#the-geneset-intersection-page","title":"The GeneSet Intersection page","text":"<p>GeneSet intersection data can be downloaded as a csv file for subsequent analyses. The GeneSets giving rise to each node can be stored in a separate project.</p> <p>The HiSim Graph opens and the nodes can be selected to expand the graph. More details of each intersection can be viewed by clicking on the individual nodes in the tree. A link at the bottom of the frame allows download of the csv.</p> <p> Figure 5: These options are available for the HiSim Graph, to change the way nodes interact with each other. The stats of the graph, as well as shortcuts and the legend identifying each species in the graph, are also displayed.</p> <p> Figure 6. This shows the search function, which highlights paths between nodes containing the item searched for, whether it be gene, geneset, or species.</p>"},{"location":"analysis-tools/hisim-graph/#options","title":"Options","text":"<p>There are a number of options available to optimize the HiSim Graph analyses. You may access the following options on the Analyze GeneSets page by clicking on the HiSim Graph Tool.</p>"},{"location":"analysis-tools/hisim-graph/#disablebootstrap","title":"DisableBootstrap","text":"<p>When the resulting HiSim Graph is unimaginably large, a bootstrapping filter is applied to reduce the output size. This step removes edges that are weakly supported by the underlying data, for example, those partitions of GeneSet subgroups that are driven by a single gene difference between the groups. If you would like the large, unfiltered graph instead, set this option to True to disable bootstrapping. Be warned this may stretch the graph's size.</p> <p></p> <p>Figure 6: A HiSim Graph with DisableBootstrap turned on (True).</p> <p> Figure 7: A HiSim Graph with DisableBootstrap turned off (False).</p>"},{"location":"analysis-tools/hisim-graph/#homology","title":"Homology","text":"<p>Include homology to integrate multi-species data. This is done by using homologene mappings to relate identifiers across species. If homology is excluded, data from multiple species will be segregated into separate trees.</p> <p></p> <p>Figure 8: Homology excluded. A separate map is drawn for mouse, no overlap with human is allowed.</p> <p></p> <p>Figure 9: Homology included. GeneSets from mouse and human are allowed to be mixed and are intertwined as one.</p>"},{"location":"analysis-tools/hisim-graph/#mingenes","title":"MinGenes","text":"<p>The minimum number of genes for an intersection. The default of 1 means that all intersections will be displayed. Increasing the value means that intersections with fewer genes will not be displayed in the output, decreasing noise and displaying more robust correspondence between GeneSets. This generally has the effect of removing the topmost nodes.</p> <p> Figure 10: As shown above, the left tree is with the default MinGenes = 1, the right tree is with the default MinGenes = 5.</p>"},{"location":"analysis-tools/hisim-graph/#permutations","title":"Permutations","text":"<p>The HiSim Graph can ultimately address questions among highly curated data such as how much dimension reduction does gene overlap provide. For example, one may take a large set of gene sets associated with mood disorders and ask whether the data are similar enough to group together, i.e., of all possible subset intersections, how many are populated, and is this result better than chance?</p> <p>The maximum number of permutations to run is set to 0 by default since it can take a long time to run for large input sets. The genes contained in each GeneSet are permuted over the union of all genes in the input sets, controlling for the size of each GeneSet. The permutation tests measure the likelihood of getting a similar tree structure ( Parsimony) or of getting a similar aggregation of genes in each intersection (Gene Aggregation). Note that this is a maximum value since the actual results may be fewer due to the time limit.</p> <p>Parsimony is a simple measure of the percentage of observed intersections out of all possible intersections. This is mathematically defined as:</p> <p></p> <p>Figure 11: For those that aren't aware of the mathematical implications of parsimony, think of it as one of the many measures of accuracy for a map. You want more parsimony, but you can't always get full parsimony.</p> <p>Gene Aggregation is a measure of the total node/tree probability. Each node is scored based on the intersection of genes and gene sets. Then the product of these scores is used to assign an overall tree aggregation probability:</p> <p></p> <p>Figure 12: Aggregation is another measure of accuracy that balances with parsimony. In this tool, neither are ever fully accurate alone, but together they are more fine-tuned.</p>"},{"location":"analysis-tools/hisim-graph/#permutation-time-limit","title":"Permutation Time Limit","text":"<p>The maximum amount of time to spend doing permutations. For example, if Permutations is set to 100,000 and this value is 5 minutes, the result will either have 100,000 permutations (if they finished within 5 minutes), or will be truncated to the number of permutations which were able to finish within 5 minutes. The more time you give to Permutation Time Limit, the more accurate your results will be.</p>"},{"location":"analysis-tools/jaccard-similarity/","title":"Jaccard Similarity","text":""},{"location":"analysis-tools/jaccard-similarity/#why-use-the-jaccard-similarity-tool","title":"Why Use the Jaccard Similarity Tool","text":"<p>The Jaccard Similarity Tool displays a matrix of Venn diagrams, which can be very useful for quickly finding overlapping GeneSets and evaluating the similarity of results across a collection of experiments. This snapshot may enable you to determine which can be removed or kept for more complex comparison analysis (such as the HiSim Graph).</p>"},{"location":"analysis-tools/jaccard-similarity/#understanding-the-jaccard-similarity-tool","title":"Understanding the Jaccard Similarity Tool","text":"<p>Each Venn Diagram represents the pairwise gene overlap between the two GeneSets depicted for each row and column. Text overlays show the exact gene counts, Jaccard Similarity coefficient and p-value for every pair. The p-value is calculated based on the cumulative probability of obtaining a Jaccard coefficient greater than or equal to the observed value, using formula [17] in Real and Vargas, 1996.</p> <p>For those less knowledgeable of Jaccard Similarity, it's the ratio of elements in both sets over the elements only found in separate sets. If your matrix produces two separate blue and red circles, rather than a touching Venn Diagram, it means nothing is alike in either of those two GeneSets.</p> <p></p>"},{"location":"analysis-tools/jaccard-similarity/#background-processes","title":"Background Processes","text":"<p>The Jaccard Similarity Tool now implements the calculation of the p-value for the Jaccard Similarity score based on an empirical sampling distribution. The distribution is approximated for each unique gene set cardinality (gene set size) pair. Each unique pair of cardinalities are randomly sampled (10,000 samples) from the actual gene list of the geneweaver database and plotted based on the frequency of Jaccard Similarity. The result is a Frequency versus Jaccard Similarity histogram that is used as the distribution for the calculation of the p-value. To calculate the p-value, the tool will simply compare the Jaccard Similarity of the user-selected gene set and grade it based on the curve stored in the database.</p> <p>If the Jaccard Similarity does not exist in the curve - that is, if the Similarity is too high to occur randomly - the $p$-value is simply zero. If the Jaccard Similarity were to have a value of 1, this would indicate that either one is a subset or both are identical. In this case, we assign a special $p$-value of 1* since we agree that the probability of a set matching itself (and not some other set which contains other genes) will always occur.</p> <p>The implementation of this process is coded and optimized for C++ which runs in the background as your results are loading onto the next page.</p>"},{"location":"analysis-tools/jaccard-similarity/#using-the-jaccard-similarity-tool","title":"Using the Jaccard Similarity Tool","text":"<p>Access the Jaccard Similarity Tool through the Analyze Genesets tab.</p> <p>To generate a Jaccard Similarity Matrix, you must first select gene sets from a project. Projects may be created and updated by uploading Gene Sets, searching the GeneWeaver database, or through the use of other tools in the GeneWeaver system. See the documentation for uploading GeneSets, Search, or Manage GeneSets to learn more about these functions. To select an entire project or multiple projects for analysis, check the box next to the project name. To select individual GeneSets within a project, click on the + beside the project name and check individual gene sets using the check boxes. Next, click on the Jaccard Similarity icon in the Analysis tools box to the left of the project list.</p> <p></p> <p>Figure 1: Once you have selected GeneSets from a project, select the Jaccard Similarity icon from the Analysis Tools box, to the left of your GeneSets.</p> <p>Tool results are displayed as a grid of proportional overlaps. The grid, itself, is written in d3 for dynamic user interaction.</p> <p></p> <p>Figure 3: Venn diagram for 9 GeneSets. The detail below highlights Column 3, Row 2.</p> Jaccard Overlap GS row = pink circle (left) GS column = green circle (right)J = Jaccard coefficientp = $p$-valueGreen circles show emphasis genes <p>The resulting matrix can be zoomed in and out by scrolling the mouse up and down. There is a reset zoom button just in case the user's place is lost in the matrix of venn diagrams. The user can also click and, in addition to these interactive features, the gene sets can be highlighted by row and column by shift+clicking on the intersection of two gene sets.</p> <p></p> <p>The gene sets can be deselected by alt+clicking on any highlighted gene set.</p>"},{"location":"analysis-tools/jaccard-similarity/#rerun-option","title":"Rerun Option","text":"<p>The user is able to rerun the tool with different parameters with the rerun tool options.</p> <p></p> <p>Figure 7: Rerun tool option</p> <p>This option is expandable/collapsable by simply clicking on the Rerun Tool Options text.</p>"},{"location":"analysis-tools/jaccard-similarity/#geneset-panel","title":"Geneset Panel","text":"<p>The geneset panel shows the Jaccard coefficients and the p-values for every geneset pair for the project the user has chosen. The geneset panel does not recieve the same reduction as the venn diagram as it would be helpful to still view every geneset pairing for convenience.</p> <p>The user may also click the checkboxes located next to the geneset names for them to add those selected genesets to a project or to export the genes.</p> <p></p> <p>Figure 2: Click Run to produce Jaccard Similarity Results for your selected GeneSets. Text overlays show the exact gene counts, Jaccard Similarity coefficient and p-value for every pair.</p>"},{"location":"analysis-tools/jaccard-similarity/#options","title":"Options","text":""},{"location":"analysis-tools/jaccard-similarity/#homology","title":"Homology","text":"<p>Include homology in order to integrate multi-species data. If excluded, homologous genes from different species will not be counted as intersecting. Data from separate species will never show an overlap without homology.</p>"},{"location":"analysis-tools/jaccard-similarity/#pairwisedeletion","title":"PairwiseDeletion","text":"<p>Pairwise Deletion is used to pick off problematic missing values from data while still aiming to get the remaining values for comparison-based use:</p> Values Obj1 Obj2 Obj3 Length 23 N/A 13 Width 21 22 14 Depth N/A 20 11 <p>Figure 7: In Pairwise Deletion, when comparing length, only Obj1 and Obj3 will be compared. When comparing width, all will be compared, and when comparing depth, only Obj2 and Obj3 will be compared. This prevents missing data from being assigned a default value such as 0 in the system.</p>"},{"location":"analysis-tools/mset/","title":"MSET","text":"<p>Modular single-set enrichment tool (MSET): randomization-based test for list over- or under-representation</p>"},{"location":"analysis-tools/mset/#about-mset","title":"About MSET","text":"<p>MSET was developed to compare gene lists. From four character lists (gene_list1, gene_list2, background1, background2), it computes a randomization-based p-value describing the likelihood that the intersect of gene_list1 and gene_list2 is underexpressed or overexpressed relative to randomness alone.</p> <p>MSET is based on work from Eisinger et al., 2013, \"Development of a versatile enrichment analysis tool reveals  associations between the maternal brain and mental health disorders, including autism.\" BMC Neuroscience.</p>"},{"location":"analysis-tools/mset/#why-mset","title":"Why MSET?","text":"<p>MSET permits the selection, or customization, of the genes against which enrichment is performed. This yields the  ability to perform more focused hypothesis testing relative to other enrichment tests. For example, genes specific to  Alzheimer's may be selected to serve as the genes of interest against which enrichment testing is performed.</p>"},{"location":"analysis-tools/mset/#how-does-mset-work","title":"How Does MSET Work?","text":"<p>MSET performs enrichment testing using several entities:</p> <p>User Selected:</p> <ul> <li>Gene Set 1: The first set of genes to perform MSET on</li> <li>Gene Set 2: The second set of genes to perform MSET on</li> <li>Number of Trials: The number of simulated sets to create</li> </ul> <p>MSET Computed:</p> <ul> <li>Gene Set 1 Background: Determined from Gene ID Type and Species of Gene Set 1</li> <li>Gene Set 2 Background: Determined from Gene ID Type and Species of Gene Set 2</li> <li>The Universe: The intersection of Gene Set 1 Background and Gene Set 2 Background</li> <li>Gene Set 1-U: Genes in Gene Set 1 that are also contained in the The Universe</li> <li>Gene Set 2-U: Genes in Gene Set 2 that are also contained in the The Universe</li> </ul> <p>MSET then takes the following steps:</p> <ol> <li>First, the computed inputs are calculated,</li> <li>Then, MSET calculates the v     (said another way, it counts the number of shared genes)</li> <li>For the Number of Trials, MSET then samples randomly without replacement from The Universe to generate two simulated gene sets of sizes Gene Set 1-U and Gene Set 2-U respectively,<ul> <li>For each trial, the intersection of the two simulated gene sets is recorded</li> </ul> </li> <li>MSET then calculates the p-value as:</li> </ol> <p></p>"},{"location":"analysis-tools/mset/#an-example","title":"An Example","text":"<p>The example below illustrates MSET with four trials.</p> <p>Given the following:</p> <ul> <li> <p>Two gene sets, e.g. GS001001 and GS001002</p> </li> <li> <p>A background for both GS001001 and GS001002 (we can call them B001001 and B001002, respectively)</p> <ul> <li>Geneweaver determines this automatically by inspecting the gene ID type and species of each gene set</li> </ul> </li> <li> <p>The number of trials MSET should perform (in this case, four)</p> </li> <li> <p>First, MSET defines The Universe as the intersection of B001001 and B001002.</p> </li> </ul> <p></p> <ol> <li>Any genes in GS001001 or GS001002 that aren't in The Universe are discarded from the analysis. GS001001 and GS001002 now only contain those genes that also exist in The Universe.</li> </ol> <p></p> <ol> <li>MSET then calculates the cardinality of the intersection of GS001001 and GS001002. Let's assume that GS001001 and GS001002 only share the gene j, then the intersect size is determined to be 1. Here we show simulated GS001001 set in green, and simulated GS001002 sets in pink. Genes which have been selected for either simulated set are circled in their set's color.</li> </ol> <p></p> <ol> <li>MSET then samples randomly without replacement to create four simulated sets each of GS001001 and GS001002. Here we assume that GS001001 has size 2, and GS001002 has size 3.</li> </ol> <p></p> <ol> <li>From the simulated gene sets above, MSET calculates the size of the intersect of each simulated set of GS001001 and GS001002. </li> </ol> <p></p> <ol> <li>MSET calculates a p-value using this formula:</li> </ol> <p></p> <p>We performed four trials, three of which had samples with an intersection at least as large as our observed gene sets. So MSET would return a p-value of 3/4, or 0.75.</p>"},{"location":"analysis-tools/mset/#using-mset","title":"Using MSET","text":"<p>Access the MSET Tool through the Analyze Genesets tab.</p> <p>To analyze your genes, select two gene sets. You will often have organized these sets into a project relevant to your work. Projects may be created and updated by uploading GeneSets, searching the GeneWeaver database, or through the use of other tools in the GeneWeaver system. See the documentation for uploading GeneSets, Search, or Manage GeneSets to learn more about these functions. MSET can only accept two gene sets as input, so you can only use the whole-project select box if your project only contains two sets.</p> <p>Next, click on the MSET icon in the Analysis tools box to the left of the project list and specify how many trials you'd like MSET to perform. Once you're ready click the run button.</p> <p> </p> <p>Once the tool has completed the analysis you will be directed to the results page. There you can view the distribution graph of all simulated intersect sizes, an accurate size comparison graph of the selected sets and the background, and the genes shared by the two input sets. You can download both graphs for later use, and you can also create a new gene set from the genes shared by your two input sets. </p> <p> </p>"},{"location":"analysis-tools/similar-variant-set/","title":"Similar Variant Set","text":""},{"location":"analysis-tools/similar-variant-set/#about-the-similar-variant-set-tool","title":"About the Similar Variant Set Tool","text":"<p>The Similar Variant Set tool finds variant sets of the same species that are the most similar to the input variant set. The tool uses the Unweighted Pair Group Method with Arithmetic mean (UPGMA) approach in order to do this. To run UPGMA, a distance matrix is first created from the results of the VariantDistanceMatrix tool that are stored in the database. </p> <p>The Similar Variant Set tool assumes that the variant sets being tested reference the same reference genome. This allows for the tool to determine similarity based solely on the information provided in the variant sets since any possible variant not present in the variant set can be assumed to be equal to the reference genome. </p>"},{"location":"analysis-tools/similar-variant-set/#api-tool","title":"API Tool","text":"<p>The SimilarVariantSet tool can be run via api at the following url. </p> <p><code>https://www.geneweaver.org/api/tool/similarvariantset/&lt;apikey&gt;/&lt;gs_id&gt;</code> </p> <p>Options</p> <ul> <li>apikey - your geneweaver apikey </li> <li>gs_id - the geneset id of your variant set </li> </ul>"},{"location":"analysis-tools/similar-variant-set/#visualization","title":"Visualization","text":"<p>The result of Similar Variant Set tool is visualized in a hierarchy graph. From computing with UPGMA algorithm, the relations between each variant will be constructed and sent to the visualization pipeline.  This hierarchy relation is simply visualized by the color: for each connection, the blue end is parent, and the red end is child. The hierarchy could be traced from each variant\u2019s name as well: we use (A,B) to denote the parent of variant A and variant B. Additionally, user could hover on the links or nodes of interest to see a highlighted version on that part.</p>"},{"location":"analysis-tools/variant-distance-matrix/","title":"Variant Distance Matrix","text":""},{"location":"analysis-tools/variant-distance-matrix/#about-the-variant-distance-matrix-tool","title":"About the Variant Distance Matrix Tool","text":"<p>The Variant Distance Matrix tool calculates the disimilarity between variant sets in the database and stores the results back into the database. It only calculates the distances between variant sets of the same species and includes sanity checks to ensure that duplicate or improper calculations do not occur. This allows for other tools, most notably the SimilarVariantSet tool, to quickly determine relationships between variant sets. </p> <p>The Variant Distance Matrix tool makes one assumption when calculating the distance between variant sets: the genome is static within the same species. In other words, the variant distance matrix tool assumes that any two variant sets for which the distance is calculated have the same reference genome. This allows the tool to assume that the distance between two variant sets is only a function of the differences between the variants in the variant sets and not any other outside variables. Since both variant sets have the same static genome, the distance is calculated using the following formula:</p> <p></p>"},{"location":"analysis-tools/variant-distance-matrix/#using-the-variant-distance-matrix-tool","title":"Using the Variant Distance Matrix Tool","text":"<p>This tool mainly functions as a helper tool to the VariantBatchUpload and SimilarVariantSet tools and is unable to be called from the website. Upon the upload of a VariantSet, multiple Variant Distance Matrix instances are forked off to calculate the distances between the new VariantSet and all existing variant sets in the database. The SimilarVariantSet uses this tool when any two uploaded variant sets do not already have an existing distance in the database. The SimilarVariantSet then forks off instances of the Variant Distance Matrix tool in order to calculate these distances.</p> <p>Both tools pass in two parameters to the Variant Distance Matrix tool: new_gsid and gs_ids. The new_gsid contains the new genset id for which the distances between all of the geneset ids in the gs_ids parameter must be calculated for.</p> <p>The results of the tool run are inaccessible for users through the website.</p>"},{"location":"analysis-tools/variant-distance-matrix/#options","title":"Options","text":"<p>There is one option that can be used in conjunction with this tool.</p>"},{"location":"analysis-tools/variant-distance-matrix/#disable-sanity-check","title":"Disable Sanity Check","text":"<p>The Disable Sanity Check option can be set to True in order to speed up distance matrix creation. This option disables the two sanity checks that are present in the tool and does the following checks.</p> <ul> <li>the genesets are of the same species</li> <li>the distance hasn't already been calculated</li> <li>the geneset is a variantset   If it is assured that the genesets passed in fulfill these criteria, the sanity checks can be turned off in order to speed up the creation of the distance matrix.</li> </ul>"},{"location":"analysis-tools/variant-distance-matrix/#api-tool","title":"API Tool","text":"<p>To run the VariantDistanceMatrix tool, use the following API url. <code>https://www.geneweaver.org/api/tool/VariantDistanceMatrix/&lt;apikey&gt;/&lt;gs_id&gt;/&lt;gs_ids&gt;/&lt;sanity_check&gt;/</code></p> <p>The parameters are as follows:</p> <ul> <li>apikey - your geneweaver apikey </li> <li>gs_id - the gs_id of one of your variant sets that you wish to calculate a distance matrix for </li> <li>gs_ids - the remaining gs_ids of your variant sets that you wish to calculate a distance matrix for</li> </ul>"},{"location":"analysis-tools/variant-pipeline/","title":"Variant pipeline","text":""},{"location":"analysis-tools/variant-pipeline/#variant-pipeline","title":"Variant Pipeline","text":"<p>5 api endpoints are created for the following 5 pipelines: eggo, eggv, eggr, eggix, and eggin. Each pipeline has a get endpoint to retrieve the information from running each entire pipeline. </p> <p>The pipeline can be found on Swagger UI through running Geneweaver on Watson and using this link: http://localhost:8889/api/</p> <p>Each api will load a default configuration file in yaml format. The suggested configuration information is the following:</p> <p>environment:</p> <pre><code>- hpc: true \n- local: false  \n- custom: false   \n- cores: 4    \n- processes: 4    \n- jobs: 15\n- memory: '40GB'\n- walltime: '05:00:00'  \n- interface: 'ib0'\n</code></pre> <p>directories:</p> <pre><code>- data: 'data/'  \n- temp: ~\n</code></pre> <p>scheduler: ~</p> <p>workers: ~</p> <p>overwrite: true  </p> <p>species: ~  </p> <p>format: tsv  </p> <p>orthology:</p> <ul> <li>species1: hg38  </li> <li>species2: mm10  </li> </ul> <p>And the following is the requirement for Eggv:</p> <p>The EGG:V pipeline has some hefty storage and memory requirements. Storage: To be safe, at least 500GB of disk space should be available if both hg38 and mm10 builds will be processed. Memory: The lowest amount of total available memory this pipeline has been tested with is 450GB. Since processing is done in-memory, all at once, systems with total memory below 400GB might not be able to run the complete pipeline. CPU: Use as many CPU cores as you possibly can.</p>"},{"location":"analysis-tools/variant-sets/","title":"Variant Sets","text":""},{"location":"analysis-tools/variant-sets/#visualization","title":"Visualization","text":"<p>Data</p> <p>The data of the raw Variant Set contains both variants and genes. The connection between each variant with its corresponding gene is saved in the data as well.  The Variant Set utilizes different colors to indicate different genes and different evidences for the variants. </p> <p>The radius bar is used to customize the size of the node. This visualization supports mouse-hovering to highlight the genes of interest.</p> <p></p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>In this section, we will explore the fundamental concepts and principles that underlie  Geneweaver. Understanding these core concepts is essential for gaining a deeper  understanding of how the web application, analysis tools, and software packages work,  and for using it effectively in your education, work or research.</p> <p>In this section, we will cover key concepts such as definitions, data structures, and algorithms, and will explore how these concepts are used in the context of Geneweaver.</p> <p>Whether you are new to the tool or have been using it for some time, this section will  provide you with the knowledge and understanding that you need to use the tool more  effectively, and to get the most out of its capabilities. So, let's get started and dive into the core concepts that underlie Geneweaver.</p>"},{"location":"concepts/genes-and-genesets/","title":"Genes and GeneSets","text":""},{"location":"concepts/genes-and-genesets/#genomic-features-genes","title":"Genomic Features (Genes)","text":"<p>A genomic feature \ud83e\uddec is any region of DNA that has a specific function or role in the  genome. Some common genomic features include genes, exons, introns, promoters, and  enhancers. Genomic features can be identified by a variety of methods, including  sequencing, hybridization, and annotation.</p> <p>In GeneWeaver, a genomic feature is a unique identifier for a genomic feature in a particular organism, mapped from an external data source. Genomic features are the basic unit of analysis, and are used the building blocks of GeneSets. </p> <p>Genomic features are important because they provide a framework for understanding the  structure and function of the genome. </p>"},{"location":"concepts/genes-and-genesets/#genesets","title":"GeneSets","text":"<p>GeneSets \ud83e\uddec+\ud83d\udcc2 are the fundamental unit of analysis in GeneWeaver.</p> <p>A GeneSet contains a list of genomic features, free text descriptive content, ontology  annotations and gene association scores. In GeneWeaver, Genomic features are mapped  within and across multiple species. </p> <p>a researcher might use Geneweaver to analyze gene expression data from a set of cancer  patients. By comparing the expression profiles of genesets associated with cancer  pathways such as the p53 signaling pathway or the cell cycle pathway, the researcher  might be able to identify genes or pathways that are dysregulated in the cancer samples.</p>"},{"location":"concepts/genes-and-genesets/#geneset-tiers","title":"Geneset Tiers","text":"<p>Genesets are organized into a hierarchy of tiers \ud83e\udd47\ud83e\udd48\ud83e\udd49\ud83c\udf31\ud83d\udd12, which are used to provide an easily  recognizable and intuitive way for users to understand the quality and reliability of the data in a geneset.</p> Geneset Tier Description \ud83e\udd47Tier IPublic Resource Data Professionally curated into another major database and are imported into GeneWeaver,which ensures consistency of metadata. \ud83e\udd48Tier IIMachine-Generated from public sources Computationally generated from data in public sources. \ud83e\udd49Tier IIIHuman-Curated Data Directly entered or reviewed by a professional curator for redundancy with existing records and adherence to documentation standards. \ud83c\udf31Tier IVSubmitted to Public-Provisional User submitted data that has been shared to the public prior to review. \ud83d\udd12Tier VPrivate User and Group Data, Uncurated Private data that is considered confidential and is not reviewed by a professional curator. <p>Tip</p> <p>For reference level description of Genset Tiers, see the Geneset Tiers reference page.</p>"},{"location":"concepts/geneweaver-data-model/","title":"Geneweaver Data Model","text":"<p>GeneWeaver utilizes a relational normalized data model to store both user data, and external sources data. The database is  designed to be flexible and extensible, and to allow for the addition of new data types  and analysis tools without requiring changes to the data model.</p> <p>On a high level the data model uses three  schemas to organize the types of data that are stored in the database. The schemas are:</p> <ul> <li><code>production</code>: Geneweaver Application Data</li> <li><code>odestatic</code>: Static Data</li> <li><code>extsrc</code>: External Sources Data</li> </ul> <p>This page discusses the concepts and structure of the data model in detail, but is not  intended to be used as a reference for the database and data model. For example, this  page does not use the actual database table and column names, but instead uses full  descriptive name of the entities and their relationships.</p> <p>Tip</p> <p>For a complete reference of the Geneweaver data model, see the  data model reference page. </p>"},{"location":"concepts/geneweaver-data-model/#production-schema","title":"Production Schema","text":"<p>The <code>production</code> schema is the primary schema used to store user data. The schema's  central entity is the <code>geneset</code> \ud83e\uddec+\ud83d\udcc2. The schema contains tables &amp; relationships for user data, but external source and static data relationships utilize tables in the <code>odestatic</code> and <code>extsrc</code> schemas.</p> <pre><code>erDiagram\n    GENESET }o--o| PUBLICATION : hasA\n    GENESET }o--|| USER : ownedBy\n    GENESET }o--o{ PROJECT: containedIn</code></pre>"},{"location":"concepts/geneweaver-data-model/#odestatic-schema","title":"ODEStatic Schema","text":"<p>The <code>odestatic</code> schema contains tables for static data, such as species, gene databases, and geneset tier. The schema is used to store data that is not expected to change, and is used to provide a reference for the <code>production</code> schema.</p> <p>The following diagram shows how the <code>geneset</code> \ud83e\uddec+\ud83d\udcc2 entity is related to the <code>odestatic</code> schema entities: <code>species</code> and <code>tier</code>. <pre><code>erDiagram\n    SPECIES }o--|| GENE_DB : usedBy\n    SPECIES ||--o{ GENESET : usedBy\n    GENESET }o--|| TIER : isOfA</code></pre></p> <p>The <code>odestatic</code> schema also contains tables that are used for internal tracking and configuration. Above, the <code>gene_db</code> entity for the <code>platform</code>, <code>tool</code>, and  <code>attribution</code> entities. These entities are used internally by the system to track information about enabled analysis tools, microarray expression platforms, and data  sources.</p> <pre><code>erDiagram\n    PLATFORM\n    TOOL\n    ATTRIBUTION</code></pre>"},{"location":"concepts/geneweaver-data-model/#extsrc-schema","title":"Extsrc Schema","text":"<p>The <code>extsrc</code> schema contains tables for external sources data, this is where the  magic \ud83e\ude84 happens. </p> <p>Fundamentally, the gene \ud83e\uddec to geneset \ud83e\uddec+\ud83d\udcc2 association is a many-to-many association. A geneset can contain many genes, and a gene can be associated with many genesets. To  represent this relationship, the association is stored in an  associative table, which we call  <code>geneset_value</code>.</p> <p>The <code>gene</code> entity is a  polymorphic entity that can be associated with multiple external sources, which are represented by the <code>gene_db</code> entity.</p> <p>The following diagram shows how the <code>geneset</code> \ud83e\uddec+\ud83d\udcc2 entity is related to the <code>extsrc</code> schema entities: <code>geneset_value</code>, <code>gene</code>, and <code>gene_db</code>.</p> <pre><code>erDiagram\n  GENESET_VALUE }o--|| GENESET : isOfA\n  GENESET_VALUE }o--|| GENE : isOfA\n  GENE ||--o{ GENE_DB : isOfA</code></pre> <p>Microarray Expression Data</p> <p>Geneweaver also supports microarray expression data. Due to its complexity, this  document does not cover the data model that supports this feature.</p> <p>For more information on microarray expression data, see the Data Model reference page.</p>"},{"location":"concepts/geneweaver-data/","title":"External Source Data","text":"<p>GeneWeaver utilizes several external data sources to provide users with a rich set of  genomic features and gene associations. </p> <p>These data sources include:</p> <ul> <li>Ensembl</li> <li>Entrez</li> <li>UniGene</li> <li>MGI</li> <li>HGNC</li> <li>RGD</li> <li>ZFIN</li> <li>FlyBase</li> <li>Wormbase</li> <li>SGD</li> <li>miRBase</li> <li>CGNC</li> </ul>"},{"location":"concepts/geneweaver-data/#background","title":"Background","text":"<p>Why bother with all these external data sources? Why not just use one?</p> <p>In genomics research, there are different types of gene and microarray identifiers  because the same gene can be referred to by different names or IDs, depending on the  context or the source of the information. This can happen even for genomic features  within the same species! All these different identifiers can create confusion and make  it difficult to compare and integrate data from different sources.</p> <p>Why are there so many different identifiers, you ask? There are a multitude of reasons, some of which are historical, some of which are technical, and some of which inherent to biology. </p> <p>A given gene may have multiple names or IDs that have been used in different  contexts as a result of how naming and annotation has evolved over time. It also can be the case that different databases just used different conventions. Annotations and naming conventions are also updated as new information about the function and structure  of genes becomes available.</p> <p>Genotype platforms, the methods or tool used to identify and detect genetic variations, can differ in their design and layout, which can affect the way genes are represented. This can lead to different probe IDs or other identifiers being used to refer to the  same genomic features on different platforms.</p> <p>Genomic feature identifiers can also differ between different species, since different  organisms have different sets of genes and thus different naming conventions for those  genes. Even if the same identifier is used across species, it may not refer to the same genomic feature, and the genomic feature itself might have entirely different  function. </p>"},{"location":"concepts/geneweaver-data/#geneweavers-solution","title":"GeneWeaver's Solution","text":"<p>GeneWeaver solves this problem by integrating data from multiple sources (listed above) and mapping all the different identifiers to a single, unified set of internal  identifiers.</p> <p>This allows researchers to upload data from different sources to the same platform, and allows tools to operate of data from different sources without having to worry about the differences in the identifiers used by those sources.</p> <p>Geneweaver also uses homology information to map paralogs and orthologs (collectively knows as homologs) across and within species. This allows researchers to perform  cross-species analysis, and to identify conserved and divergent biological functions.</p> <p>This concept is explained in more detail in the  Geneweaver Data Model concepts page, and in the Data model reference page.</p>"},{"location":"concepts/package-based-architecture/","title":"Package Based Architecture","text":"<p>GeneWeaver utilizes a package based architecture to allow for the development of new analysis tools and data types without requiring changes to the core GeneWeaver codebase. The GeneWeaver project is composed of several python packages that are used to build the GeneWeaver web application. These packages are also available for use in other projects.</p> <p>This page describes the GeneWeaver package based architecture, and provides an overview of why this architecture was chosen for the GeneWeaver project.</p>"},{"location":"concepts/package-based-architecture/#architecture-overview","title":"Architecture Overview","text":"<p>A  package-based architecture is a software design approach in which the functionality  of an application is divided into separate modules, or packages, each of which provides  a specific set of features or services. These packages can be thought of as  self-contained units of code that can be developed and maintained independently of one  another, and can be combined and reused to build larger, more complex systems.</p> <p>In a package-based architecture, each package typically has a well-defined interface or  API (application programming interface), which defines how other packages can interact  with it. This interface provides a clear separation of concerns, allowing developers to  focus on the specific functionality provided by each package, without having to worry  about the details of how other packages are implemented.</p> <p>One of the main benefits of a package-based architecture is modularity. By dividing an  application into separate packages, developers can more easily manage the complexity of  the code, and can develop and maintain each package independently of the others. This  can also make it easier to reuse code between projects, since individual packages can  be easily extracted and reused as needed.</p>"},{"location":"concepts/package-based-architecture/#motivation-for-package-based-architecture","title":"Motivation for Package Based Architecture","text":"<p>The package based architecture was chosen for the Geneweaver project so that it remains  flexible, modular, and scalable over time, while also making it easier to manage and  maintain the complexity of the codebase.</p>"},{"location":"concepts/package-based-architecture/#modularity-and-flexibility","title":"Modularity and Flexibility","text":"<p>A package-based architecture provides a modular design that makes it easier to manage  and maintain the complexity of the codebase. Geneweaver includes a range of complex  algorithms, processes and data structures, and dividing the application into separate  packages allows developers to focus on developing and maintaining each package  independently of the others. This helps ensure that the application remains stable  and scalable over time.</p>"},{"location":"concepts/package-based-architecture/#reusability","title":"Reusability","text":"<p>A package-based architecture promotes code reuse, which saves time and effort during  development. In a scientific application like Geneweaver, there is a need to reuse  certain algorithms, processes and data structures across different parts of the  application, and a package-based architecture makes this process easy.</p>"},{"location":"concepts/package-based-architecture/#collaboration","title":"Collaboration","text":"<p>A package-based architecture makes it easier for developers to work collaboratively  on the Geneweaver. By dividing the code into separate packages, developers can work  on different parts of the application independently, without having to worry about  conflicts or dependencies on other parts of the codebase.</p>"},{"location":"concepts/package-based-architecture/#testing","title":"Testing","text":"<p>A package-based architecture makes it easier to test the application. By dividing the application into separate packages, developers can test each package independently of the others, which makes it easier to write tests, and easier to identify and fix bugs.</p> <p>Available Packages</p> <p>A complete reference of the available packages can be found in the  Available Packages section.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The pages in the \"Getting Started\" are intended to provide all new users with a clear  and concise introduction to the Geneweaver ecosystem. No matter who you are, this  section will help you quickly get up and running with basic features and functionalities in Geneweaver.</p>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":"<ul> <li>The Quick Start Guide is designed to help get new users up and running  quickly with a basic two page GeneWeaver Guide.</li> <li> <p>The GeneWeaver Tutorial provides a guided tutorial exercise to get you  familiar with using and interpreting basic GeneWeaver analyses and tools through applied examples. The exercise is suitable for use in demonstrations, workshops and courses.</p> </li> <li> <p>For more details on how to get started by searching for some specific genes of   interest and analyzing them, read the General Search section.</p> </li> <li> <p>To learn more about how to work with other researchers and their data within   GeneWeaver check out Users and Groups.</p> </li> <li>GeneWeaver Movie provides video   clips featuring examples of the use of GeneWeaver tools.</li> <li>FAQ</li> </ul> <p>For more in-depth information about the concepts presented in this section, please see the Concepts section and the Reference section.</p>"},{"location":"getting-started/#contextual-quick-start","title":"Contextual Quick Start","text":"<p>If you're already familiar with Geneweaver, and just need to find content specific to your use-case, you can use the following links to jump to the appropriate documentation. If you find that you need more information, head back to this website and keep reading!</p> Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>Genomics researchers will find the web application to be the most straightforward way to get started with GeneWeaver. The web application is a fully integrated platform for the analysis of heterogeneous functional genomics data. Without ever leaving the  website, it will allow you to:</p> <ul> <li>Search \ud83d\udd0d for genomics data,</li> <li>Upload \ud83d\udce4 and curate genomic data, and</li> <li>Analyze \ud83c\udfd7\ufe0f and visualize genomic data.</li> </ul> <p>To learn more, you can either jump right in and head over to the GeneWeaver Web Application.</p> <p>Or you can read the extensive documentation that is specific to the web application Geneweaver Web Application Documentation.</p> <p>General documentation on the available analysis tools can be found on the  Analysis Tools page.</p> <p>If you want to run the analysis tools on your local computer, you can find more information in the Running Tools Locally section.</p> <p>Educators and students will find the ecosystem of software packages to be the most straightforward way to get started with GeneWeaver. The ecosystem of software packages is a collection of python packages that are used to build the GeneWeaver web application.</p> <p>If you just want to get started using Geneweaver to build cool stuff \ud83d\udcbb, the  Available Packages section might be what you want.</p> <p>What's Next?</p> <p>If you're new to Geneweaver, the documentation in this website is probably best read in order. Next up, we'll discuss the  Foundational Concepts that underpin the entire  Geneweaver software ecosystem.</p> <p>Click the \"Next\" button on the bottom of the page to continue your journey.</p>"},{"location":"getting-started/command-line-interface/","title":"Command Line Interface","text":"<p>Geneweaver provides a command line interface for interacting with the GeneWeaver web  application. The command line interface is a python package called  <code>geneweaver-client</code>, available on  PyPI. Users should consider using the command line interface if they want to run the analysis tools locally, if they want to automate the uploading or downloading of data to/from  the web application, </p>"},{"location":"getting-started/command-line-interface/#installation","title":"Installation","text":""},{"location":"getting-started/command-line-interface/#requirements","title":"Requirements","text":"<p>The <code>geneweaver-client</code> package requires python 3.7 or greater.</p>"},{"location":"getting-started/command-line-interface/#from-pypi","title":"From PyPI","text":"<p>To install the <code>geneweaver-client</code> package from PyPI, run the following command:</p> <pre><code>$ pip install geneweaver-client\n</code></pre>"},{"location":"getting-started/command-line-interface/#from-source","title":"From Source","text":"<p>To install the <code>geneweaver-client</code> package from source, run the following commands:</p> <p>Note</p> <p>You will need to have poetry installed.</p> <pre><code>git clone git@github.com:bergsalex/geneweaver-client.git\ncd geneweaver-client\npoetry install\n</code></pre>"},{"location":"getting-started/command-line-interface/#usage","title":"Usage","text":"<p>Tip</p> <p>Check out the command line interface reference documentation.</p>"},{"location":"getting-started/foundational-concepts/","title":"Foundational Concepts","text":"<p>This section provides a quick introduction to some key concepts that underpin the entire Geneweaver ecosystem. This section should be enough to get you started, but for a  comprehensive definition, please see the Concepts section.</p>"},{"location":"getting-started/foundational-concepts/#genes-genomic-features","title":"Genes (Genomic Features)","text":"<p>In GeneWeaver, a \"Gene\" \ud83e\uddec is a unique identifier for a gene in a particular organism.  Genes are the basic unit of analysis, and are used to build GeneSets. GeneWeaver  identifies genes using their unique identifiers, which are called \"Gene Identifiers\". A gene identifier is a unique name or number assigned to a gene. </p> <p>GeneWeaver supports a variety of different Gene Identifiers from different sources, including Ensemble (Gene, Protein, and Transcript), MGI, HGNC, and Entrez. Internally, each Gene Identifier is mapped to a unique Gene ID, which is used to identify genes across all data sources.</p> <p>For more information about Genes and GeneSets, please see the Genes and GeneSets page.</p>"},{"location":"getting-started/foundational-concepts/#genesets","title":"GeneSets","text":"<p>The central entity in GeneWeaver is called a \"GeneSet\" \ud83e\uddec+\ud83d\udcc2. A GeneSet  is a collection of genomic features that are related by a common biological function, pathway, process,  or other biological concept. GeneSets are used to organize and analyze heterogeneous  functional genomics data.</p> <p>Genesets are a fundamental component of Geneweaver, as the system uses them to perform  integrative analysis of functional genomics data. Researchers can compare and combine  multiple genesets to identify overlaps or similarities, which can provide insights into  the biological processes and pathways that are involved in the data being analyzed.</p>"},{"location":"getting-started/foundational-concepts/#species","title":"Species","text":"<p>Genomic features in Geneweaver are mapped within and across multiple species. Cross  species analysis enables the discovery of conserved mechanisms of biological functions,  and the discovery of divergent functions served by conserved biological mechanisms.</p> <p>Currently, 10 species are supported:</p> <ul> <li>Mus musculus - The Mouse \ud83d\udc01</li> <li>Homo sapiens - The Human \ud83e\uddcd</li> <li>Rattus norvegicus - The Rat \ud83d\udc00</li> <li>Danio rerio - The Zebrafish \ud83d\udc1f</li> <li>Drosophilia melanogaster - The Fruit Fly \ud83e\udeb0</li> <li>Macaca mulatta - Rhesus Monkey \ud83d\udc12 </li> <li>Caenorhabditis elegans - The Roundworm \ud83e\udeb1</li> <li>Saccharomyces cervisiae - Brewer's Yeast \ud83c\udf7a</li> <li>Gallus gallus - The Chicken \ud83d\udc13</li> <li>Canis familiaris - The Dog \ud83d\udc15</li> </ul>"},{"location":"getting-started/running-tools-locally/","title":"Running Tools Locally","text":"<p>Tip</p> <p>If you a researcher, you will find that the integrated tools in the web application are the most convenient way to run the analysis tools.</p>"},{"location":"getting-started/running-tools-locally/#introduction","title":"Introduction","text":"<p>Geneweaver is designed to allow you to run the analysis tools on your local computer. This pattern allows for developers to easily get started on tool development, and  allows analysis tools to be delivered as independent research products in their own right.</p> <p>Running tools locally can also be useful if you want to run the tools on a large  dataset, or if you want to run the tools on a dataset that is not available on the web  application. However, the web application will almost always be the most convenient way  to use the tools for most users, even with large datasets.</p>"},{"location":"getting-started/running-tools-locally/#pre-requisites","title":"Pre-requisites","text":"<p>To run any of the tools, you will need to have access to data that you want to analyze.</p> <p>In the examples below, we will utilize the  Command Line Interface to provide data to the tools.</p>"},{"location":"getting-started/running-tools-locally/#installation","title":"Installation","text":"<p>Coming Soon</p> <p>The local tools are currently in development, and are not yet available for  download. This section is a work in progress and will be updated as the tools become available.</p> Container Image (Recommended)From Source <p>The recommended way to run the tools locally is to use the container images that are  available on Docker Hub.</p> <p>To run the tools locally, you will need to download the source code for the specific tool that you want to run, and then install the dependencies for that tool. Each  tool has its own repository, and each repository has its own documentation.</p>"},{"location":"getting-started/running-tools-locally/#requirements","title":"Requirements","text":"<p>To run the tools locally, you will need to have Docker  installed.</p>"},{"location":"getting-started/running-tools-locally/#from-docker-hub","title":"From Docker Hub","text":""},{"location":"getting-started/running-tools-locally/#from-source","title":"From Source","text":"<p>```bash git clone</p>"},{"location":"getting-started/running-tools-locally/#usage","title":"Usage","text":"<p>The specific usage of each tool will vary by tool, but each follows a similar pattern.</p>"},{"location":"getting-started/web-application/","title":"Web Application","text":""},{"location":"getting-started/web-application/#introduction","title":"Introduction","text":"<p>The Geneweaver web application in a fully integrated platform  for the integration and analysis of heterogeneous functional genomics data. It is  designed to be a one-stop-shop for researchers looking to integrate and analyze complex  datasets in order to gain new insights into biological processes and pathways.</p> <p>Users of the web application users can benefit from a more  streamlined workflow, reduced learning curve, and improved collaboration and data  sharing capabilities. They can also benefit from the convenience of having all of their  tools and data accessible from a single, web-based interface, which can be accessed from any device with an internet connection.</p> <p></p> <p>Users that do not anticipate using the web application will still benefit from an  understanding of the concepts in this page. Fundamentally, all components of the  GeneWeaver ecosystem were designed and created to support the development the web  application.</p>"},{"location":"getting-started/web-application/#basic-workflow","title":"Basic Workflow","text":"<p>A basic workflow for a user of the web application is as follows:</p> <p>Step 1: Upload GeneSets / Search for GeneSets</p> <p>A user needs to either upload their own data, or search for (and find) data that they are interested in using the GeneSet search tool.</p> <p>Step 2: Create Projects / View Projects &amp; Tools</p> <p>In order to analyze GeneSets, they need to be added to a project. So a user needs to either create a new project, or select an existing project to add GeneSets to.</p> <p>Step 3: Analyze</p> <p>Once a user has added GeneSets to a project, they can then analyze the data using the tools available to them on the \"Analyze GeneSets\" page.</p> <p>Step 4: Interpret &amp; Annotate Results</p> <p>Once a user has analyzed their data, they can then interpret and annotate the results using the tools available to them on the \"View Results\" page.</p> <p>Step 5: User Groups &amp; Sharing Data</p> <p>Once a user has analyzed their data, they can then share their results with other users by adding them to a user group.</p>"},{"location":"getting-started/web-application/#continued-exploration","title":"Continued Exploration","text":"Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>To learn more, you can either jump right in and head over to the GeneWeaver Web Application</p> <p>Or you can read the extensive documentation that is specific to the web application: Geneweaver Web Application Documentation</p> <p>Work in Progress</p> <p>To learn more, you can either jump right in and head over to the</p> <p>GeneWeaver Web Application</p> <p>Or you can read the extensive documentation that is specific to the web application: Geneweaver Web Application Documentation</p> <p>Work in Progress</p> <p>To learn more, you can either jump right in and head over to the</p> <p>GeneWeaver Web Application</p> <p>Or you can read the extensive documentation that is specific to the web application: Geneweaver Web Application Documentation</p>"},{"location":"reference/","title":"Reference Documentation","text":"<p>This section is designed to be a comprehensive resource for all the technical details  you may need in relation to Geneweaver. Here, you'll find in-depth explanations of  various concepts, detailed specifications for components of Geneweaver, and other  important technical information. Information in this section prefers completeness to conciseness. If you're looking for a quick overview of a topic, you may want to check out the Concepts section instead.</p>"},{"location":"reference/acknowledgements/","title":"Acknowledgements","text":""},{"location":"reference/acknowledgements/#support","title":"Support","text":"<p>GeneWeaver / The Ontological Discovery Environment was initiated as a project of the  NIAAA Integrative Neuroscience Initiative on Alcoholism (<code>U01AA13499</code>, <code>U24AA13513</code>),  and is currently supported by R01 <code>AA018776</code>, jointly funded by NIDA and NIAAA. </p> <p>Additional support comes from the Center for Precision Genetics, NIH U54 <code>OD020351</code>.</p>"},{"location":"reference/acknowledgements/#citing-geneweaver","title":"Citing GeneWeaver","text":"<p>When using GeneWeaver, please cite:</p> <p>Erich J. Baker, Jeremy J. Jay, Jason A. Bubier, Michael A. Langston, and  Elissa J. Chesler. GeneWeaver: a web-based system for integrative functional genomics. Nucleic Acids Research; (2012) 40(D1): D1067-D1076</p>"},{"location":"reference/acknowledgements/#team-members","title":"Team Members","text":""},{"location":"reference/acknowledgements/#current-members-of-the-geneweaver-team","title":"Current members of the GeneWeaver team:","text":"<ul> <li>Elissa J. Chesler, Fearless Leader, Jive Translator</li> <li>Erich J. Baker, Database Design Leader</li> <li>Michael A. Langston, Graph Algorithms Team Leader</li> <li>Jason A. Bubier, Data Curator</li> <li>Charles Phillips, Graph Algorithms</li> <li>Computational Sciences Group, The Jackson Laboratory, Development and QA team<ul> <li>Alexander Berger, Software Engineer / Technical Lead</li> <li>Matthew Gerring, Software Engineer / Graph Database Engineer</li> <li>Beth Sundberg, Quality Assurance</li> </ul> </li> </ul>"},{"location":"reference/acknowledgements/#former-team-members","title":"Former team members:","text":"<ul> <li>Roumyana Kirova, Statistics and Data Mining</li> <li>Vivek Philip, Visualization</li> <li>Timothy Reynolds, Lead Developer</li> <li>Zuopan Li, Web Programmer</li> <li>Yun Zhang, Graph Algorithms</li> <li>Michael Marion, Data Curator</li> <li>Jeremy Jay, Lead Developer</li> </ul> <p>Geneweaver.org and  Geneweaver.org/help are maintained by the GeneWeaver  team and the  Chesler Lab at The Jackson Laboratory in Bar Harbor, Maine.</p>"},{"location":"reference/available-packages/","title":"Available Packages","text":"<p>GeneWeaver is a collection of python packages that are used to build the GeneWeaver web  application. </p> <p>These packages are also available for use in other projects. The packages are:</p> <ul> <li><code>geneweaver-core</code>:  Foundational shared functionality for the GeneWeaver project.</li> <li><code>geneweaver-client</code>:  A command line interface interacting with GeneWeaver ReST APIs.</li> <li><code>geneweaver-testing</code>:  GeneWeaver's shared automated tests.</li> <li><code>geneweaver-tools</code>: A framework for creating analysis tools for the GeneWeaver project.</li> <li><code>geneweaver-boolean-algebra</code>: A package for performing boolean algebra operations on GeneWeaver data.</li> <li><code>geneweaver-db</code>:  A package for interacting with the GeneWeaver database.</li> </ul> <p>Each package has its own documentation and code repository, which can be found in the  links above.</p>"},{"location":"reference/available-packages/#package-relationships","title":"Package Relationships","text":"<p>The following diagram shows the relationships between the packages.</p> <pre><code>graph LR\n    G[GeneWeaver Application]\n    D[geneweaver-db]\n    T[geneweaver-tools]\n    BA[geneweaver-boolean-algebra]\n    A[geneweaver-core]\n    E[geneweaver-testing]\n    C[geneweaver-client]\n    T &amp; E &amp; A --&gt; BA --&gt; G\n    E --&gt; A &amp; D --&gt; G\n    E &amp; A --&gt; C\n    E --&gt; G &amp; T\n    A --&gt; D</code></pre> <p>The client consumes the ReST APIs provided by the GeneWeaver application.  <pre><code>sequenceDiagram\n    geneweaver-client -&gt;&gt;+ GeneWeaver Application: ReST API Call\n    GeneWeaver Application -&gt;&gt;+ Database: Database Query\n    Database --&gt;&gt;- GeneWeaver Application: Database Response\n    GeneWeaver Application --&gt;&gt;- geneweaver-client: ReST API Response</code></pre></p>"},{"location":"reference/available-packages/#next-steps","title":"Next Steps","text":"Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>Researchers should consider using the GeneWeaver web application to upload and  analyze their data. The web application is available at  geneweaver.org.</p> <p>Sometimes, it might be useful to use the command line interface to automate the uploading or downloading of data to/from the web application. This can be done using the python package called  <code>geneweaver-client</code>, which can either be installed directly <pre><code>pip install geneweaver-client\n</code></pre> or into a virtual environment <pre><code>python -m venv my-venv\nsource my-venv/bin/activate\npip install geneweaver-client\n</code></pre></p> <p>Coming Soon</p> <p>Documentation for educators and students is coming soon.</p> <p>Coming Soon</p> <p>Documentation for software developers is coming soon.</p>"},{"location":"reference/contributing-guide/","title":"Contributing Guide","text":"<p>This document outlines the baseline contribution guidelines for all packages in the <code>geneweaver-*</code> ecosystem. These guidelines are intended to concretely define what  processes and practices a developer should follow when contributing to the project for their contribution to be accepted.</p>"},{"location":"reference/contributing-guide/#tests","title":"Tests","text":"<p>GeneWeaver is a community driven project with a variety of contributors. The project relies on automated tests to allow developers to be confident that their changes do not break existing functionality. </p> <p>All contributed code should be tested. Test code coverage is calculated using the  <code>pytest-cov</code> module. The minimum code coverage threshold varies per module. Code should be well tested through a variety of tests, not just a high code coverage percentage.</p> <p>The <code>geneweaver-testing</code> module provides baseline automated tests and fixtures, as do the other <code>geneweaver-*</code> modules. The testing tools in these modules can be utilized to make writing tests for your code as straightforward as possible.</p>"},{"location":"reference/contributing-guide/#code-style","title":"Code Style","text":"<p>In order to make the code in the <code>geneweaver-*</code> ecosystem consistent, and to make it  as easy as possible to contribute to the codebase, we have adopted a set of code style standards and auto-formatting tools. </p>"},{"location":"reference/contributing-guide/#docstrings","title":"Docstrings","text":"<p>All PyTest Tests and PyTest Fixtures should have docstrings. The docstrings should follow the Google Style for docstrings.</p>"},{"location":"reference/contributing-guide/#type-annotations","title":"Type Annotations","text":"<p>All PyTest Tests and PyTest Fixtures should have type annotations. MyPy will be used to check type annotations.</p>"},{"location":"reference/contributing-guide/#code-linting-ruff-and-mypy","title":"Code Linting - Ruff and MyPy","text":"<p>All code in the <code>geneweaver-*</code> ecosystem is linted using  ruff and mypy.</p> <p>GeneWeaver strives to use the most comprehensive set of linting rules reasonably  available, to both ensure that the code is as clean as possible, and to provide as much feedback as possible to the developer.</p> Ruleset Configuration for <code>ruff</code>: <pre><code>[tool.ruff]\nselect = [\n# Pyflakes Ruleset\n    \"E\", \n# Pycodestyle Ruleset (E - Error, W - Warning)\n    \"F\", \"W\", \n# McCabe Complexity\n    \"C90\",\n# pep8-naming\n    \"N\",\n# flake8-builtins\n    \"A\",\n# flake8-bugbear\n    \"B\", \n# flake8-annotations\n    \"ANN\",\n# flake8-pytest-stlye    \n    \"PT\",\n# pydocstyle\n    \"D\", \n# Isort\n    \"I\", \n# eradicate\n    \"ERA\", \n# pandas-vet\n    \"PD\", \n# NumPy-specific rules\n    \"NPY\", \n]\n</code></pre> <p>You can find comprehensive documentation on theses rulesets in the ruff documentation</p>"},{"location":"reference/contributing-guide/#code-formatting-black-and-ruff","title":"Code Formatting - Black and Ruff","text":"<p>All code in the <code>geneweaver-*</code> ecosystem is formatted using  black and isort.</p>"},{"location":"reference/contributing-guide/#development-process","title":"Development Process","text":"<p>Before submitting a pull request, please run the following commands to check your code: <pre><code>ruff check src/geneweaver tests --fix\nblack src/geneweaver tests\npytest tests\n</code></pre></p>"},{"location":"reference/data-model/","title":"Data Model","text":"<p>Work In Progress</p> <p>This page is currently under construction, and not all tables in the data model are currently listed on this page. </p>"},{"location":"reference/data-model/#geneset-table","title":"Geneset Table","text":"<p>The geneset table is the heart of the geneweaver data model. The geneset table is  contained in the <code>production</code> schema. The geneset table contains the following columns: <pre><code>erDiagram\n    geneset {\n        bigint gs_id\n        integer usr_id\n        bigint file_id\n        varchar gs_name\n        varchar gs_abbreviation\n        integer pub_id\n        integer res_id\n        integer cur_id\n        varchar gs_description\n        integer sp_id\n        integer gs_count\n        integer gs_threshold_type\n        varchar gs_threshold\n        varchar gs_groups\n        varchar gs_attribution_old\n        varchar gs_uri\n        integer gs_gene_id_type\n        date gs_created\n        varchar admin_flag\n        timestamp gs_updated\n        varchar gs_status\n        varchar gsv_qual\n        integer gs_attribution\n        boolean gs_is_edgelist\n    }</code></pre></p>"},{"location":"reference/data-model/#genes-geneset-values","title":"Genes &amp; Geneset Values","text":"<p>Geneset values are the genomic features in the geneset. The geneset values table is contained in the <code>extsrc</code> schema. The geneset values table is an associative table between the geneset table and the gene table. The geneset values table and the genes table contain the following columns: <pre><code>erDiagram\n    geneset }o--|| geneset_value : hasA\n    gene }o--|| geneset_value : hasA\n    geneset_value {\n        bigint gs_id\n        bigint ode_gene_id\n        numeric gsv_value\n        bigint gsv_hits\n        character_varying[] gsv_source_list\n        numeric[] gsv_values_list\n        boolean gsv_in_threshold\n        date gsv_date\n    }\n    gene {\n        bigint ode_gene_id\n        varchar ode_ref_id\n        integer gdb_id\n        integer sp_id\n        boolean ode_pref\n        date ode_date\n        bigint[] old_ode_gene_ids\n    }</code></pre></p>"},{"location":"reference/data-model/#files","title":"Files","text":"<p>Genesets are created from user uploaded files. The file table is contained in the <code>production</code> schema. The file table contains the following columns: <pre><code>erDiagram\n    geneset ||--o{  file : createdFrom\n    file {\n        bigint file_id\n        bigint file_size\n        varchar file_uri\n        text file_contents\n        varchar file_comments\n        date file_created\n        text file_changes\n    }</code></pre></p>"},{"location":"reference/data-model/#species","title":"Species","text":"<p>Genesets are of a species, that is, the genomic features in the geneset are from a specific species. The species table is contained in the <code>odestatic</code> schema. The species table contains the following columns: <pre><code>erDiagram\n    geneset ||--o{ species: hasA\n    species {\n        integer sp_id\n        varchar sp_name\n        integer sp_taxid\n        integer sp_ref_gdb_id\n        date sp_date\n        varchar sp_biomart_info\n        text sp_source_data\n    }</code></pre></p>"},{"location":"reference/data-model/#tier-curation-level","title":"Tier (Curation Level)","text":"<p>Geneset tiers are indicated using the curation levels table. The curation levels table is contained in the <code>odestatic</code> schema. The curation levels table contains the following columns: <pre><code>erDiagram\n    geneset ||--o{  curation_levels: hasA\n    curation_levels {\n        integer cur_id\n        varchar cur_name\n        varchar cur_desc\n        varchar cur_curator\n    }</code></pre></p>"},{"location":"reference/data-model/#publications","title":"Publications","text":"<p>Genesets can be associated with publications. The publication table is contained in the <code>production</code> schema. The publication table contains the following columns:</p> <pre><code>erDiagram\n    geneset ||--o{  publication : associatedWith\n    publication {\n        integer pub_id\n        varchar pub_authors\n        varchar pub_title\n        varchar pub_abstract\n        varchar pub_journal\n        varchar pub_volume\n        varchar pub_pages\n        varchar pub_month\n        varchar pub_year\n        varchar pub_pubmed\n    }</code></pre>"},{"location":"reference/data-model/#projects","title":"Projects","text":"<p>Genesets can be added to projects. Project membership is modeled using an associative (intermediate) table named the <code>project2geneset</code> table. The project and project2geneset tables are contained in the <code>production</code> schema. The tables contain the following  columns: <pre><code>erDiagram\n    geneset }o--|| project2geneset: containedIn\n    project }o--|| project2geneset: contains\n    project {\n        integer pj_id\n        integer usr_id\n        varchar pj_name\n        varchar pj_groups\n        varchar pj_sessionid\n        date pj_created\n        text pj_notes\n        char pj_star\n    }\n    project2geneset {\n        integer pj_id\n        bigint gs_id\n        date modified_on\n    }</code></pre></p>"},{"location":"reference/data-model/#user-table","title":"User Table","text":"<p>The user table is used to store user information, and is used to associate users with other Geneweaver entities. <pre><code>erDiagram\n    geneset ||--o{  usr : createdBy\n    usr }o--|| notifications: canHave \n    usr }o--|| usr2grp: memberOf\n    grp }o--|| usr2grp: hasMember\n    usr {\n        integer usr_id\n        varchar usr_first_name\n        varchar usr_last_name\n        varchar usr_email\n        varchar usr_password\n        varchar usr_prefs\n        integer usr_admin\n        timestamp usr_last_seen\n        date usr_created\n        text ip_addr\n        varchar apikey\n        boolean is_guest\n        varchar usr_sso_id\n    }\n    notifications {\n        integer notification_id\n        text message\n        integer usr_id\n        timestamp time_sent\n        boolean read\n        varchar subject\n        boolean dismissed\n    }\n    grp {\n        integer grp_id\n        varchar grp_name\n        boolean grp_private\n        date grp_created\n    }\n    usr2grp {\n        integer usr_id\n        integer grp_id\n        integer u2g_privileges\n        integer u2g_status\n        varchar u2g_comment\n        date u2g_created\n    }</code></pre></p>"},{"location":"reference/data-model/#full-relational-diagram","title":"Full Relational Diagram","text":"<p>Work In Progress</p> <p>This page is currently under construction, and not all tables in the data model are currently listed on this page. This diagram only contains tables that have been defined in the page, and does not represent the full data model.</p> <pre><code>erDiagram\n    geneset }o--|| geneset_value : hasA\n    gene }o--|| geneset_value : hasA\n    geneset ||--o{  usr : ownedBy\n    geneset ||--o{  file : createdFrom\n    geneset ||--o{  publication : associatedWith\n    geneset ||--o{  curation_levels: hasA\n    geneset ||--o{ species: hasA\n    geneset }o--|| project2geneset: containedIn\n    project }o--|| project2geneset: contains\n    usr }o--|| notifications: canHave \n    usr }o--|| usr2grp: memberOf\n    grp }o--|| usr2grp: hasMember\n    geneset {\n        bigint gs_id\n        integer usr_id\n        bigint file_id\n        varchar gs_name\n        varchar gs_abbreviation\n        integer pub_id\n        integer res_id\n        integer cur_id\n        varchar gs_description\n        integer sp_id\n        integer gs_count\n        integer gs_threshold_type\n        varchar gs_threshold\n        varchar gs_groups\n        varchar gs_attribution_old\n        varchar gs_uri\n        integer gs_gene_id_type\n        date gs_created\n        varchar admin_flag\n        timestamp gs_updated\n        varchar gs_status\n        varchar gsv_qual\n        integer gs_attribution\n        boolean gs_is_edgelist\n    }\n    geneset_value {\n        bigint gs_id\n        bigint ode_gene_id\n        numeric gsv_value\n        bigint gsv_hits\n        character_varying[] gsv_source_list\n        numeric[] gsv_values_list\n        boolean gsv_in_threshold\n        date gsv_date\n    }\n    gene {\n        bigint ode_gene_id\n        varchar ode_ref_id\n        integer gdb_id\n        integer sp_id\n        boolean ode_pref\n        date ode_date\n        bigint[] old_ode_gene_ids\n    }\n    file {\n        bigint file_id\n        bigint file_size\n        varchar file_uri\n        text file_contents\n        varchar file_comments\n        date file_created\n        text file_changes\n    }\n    publication {\n        integer pub_id\n        varchar pub_authors\n        varchar pub_title\n        varchar pub_abstract\n        varchar pub_journal\n        varchar pub_volume\n        varchar pub_pages\n        varchar pub_month\n        varchar pub_year\n        varchar pub_pubmed\n    }\n    usr {\n        integer usr_id\n        varchar usr_first_name\n        varchar usr_last_name\n        varchar usr_email\n        varchar usr_password\n        varchar usr_prefs\n        integer usr_admin\n        timestamp usr_last_seen\n        date usr_created\n        text ip_addr\n        varchar apikey\n        boolean is_guest\n        varchar usr_sso_id\n    }\n    notifications {\n        integer notification_id\n        text message\n        integer usr_id\n        timestamp time_sent\n        boolean read\n        varchar subject\n        boolean dismissed\n    }\n    curation_levels {\n        integer cur_id\n        varchar cur_name\n        varchar cur_desc\n        varchar cur_curator\n    }\n    species {\n        integer sp_id\n        varchar sp_name\n        integer sp_taxid\n        integer sp_ref_gdb_id\n        date sp_date\n        varchar sp_biomart_info\n        text sp_source_data\n    }\n    project {\n        integer pj_id\n        integer usr_id\n        varchar pj_name\n        varchar pj_groups\n        varchar pj_sessionid\n        date pj_created\n        text pj_notes\n        char pj_star\n    }\n    project2geneset {\n        integer pj_id\n        bigint gs_id\n        date modified_on\n    }\n    grp {\n        integer grp_id\n        varchar grp_name\n        boolean grp_private\n        date grp_created\n    }\n    usr2grp {\n        integer usr_id\n        integer grp_id\n        integer u2g_privileges\n        integer u2g_status\n        varchar u2g_comment\n        date u2g_created\n    }</code></pre>"},{"location":"reference/development-guide/","title":"Development Guide","text":""},{"location":"reference/development-guide/#project-dependencies","title":"Project Dependencies","text":""},{"location":"reference/development-guide/#python-version","title":"Python Version","text":"<p>All packages in the <code>geneweaver-*</code> ecosystem depend on Python version 3.9 or higher. </p> <p>If you need to manage multiple version of python on your development machine, we  recommend using pyenv to manage your python versions.</p> <p>Support for Python 3.7</p> <p>It's possible that some of the packages in the <code>geneweaver-*</code> ecosystem will work with Python 3.7, but this is not guaranteed, and is not tested.</p>"},{"location":"reference/development-guide/#poetry","title":"Poetry","text":"<p>All packages in the <code>geneweaver-*</code> ecosystem use poetry to manage dependencies and build packages. </p> <p>The Python Poetry Documentation maintains a list of installation instructions for all major operating systems.</p>"},{"location":"reference/development-guide/#pytest","title":"PyTest","text":"<p>All packages in the <code>geneweaver-*</code> ecosystem use  PyTest as their test runner.</p>"},{"location":"reference/development-guide/#package-based-architecture","title":"Package Based Architecture","text":"<p>Package Based Architecture</p> <p>The <code>geneweaver-*</code> ecosystem is built around the concept of a package based  architecture. This means that each package in the ecosystem is designed to be  independent of the other packages. This allows for the ecosystem to be extended  and modified without breaking the other packages.</p> <p>For more information, see the  Package Based Architecture page.</p>"},{"location":"reference/external-data-sources/","title":"External Data Sources","text":""},{"location":"reference/external-data-sources/#external-data-resources","title":"External Data Resources","text":"<p>GeneWeaver contains publicly available sets of genes annotated to structured  vocabularies and ontologies that are assigned Tier I, or public resource data. Other  sets of genes, such as MeSH term-to-gene annotations, are derived from the processing  of public sources and attributed to Tier II. In the case of MeSH, we take advantage of  NCBI's gene-to-Pubmed and Pubmed-to-mesh files to produce sets of genes annotated  through their transitive associations.</p> Tier Resource Description Number of Gene Sets (2012) Number of Gene Sets (2015) Number of Gene Sets (2018) 1 Allen Brain Atlas (ABA) Sets containing upregulated genes found within mouse brain regions and structures. These genes exhibit a &gt;= 2.0 fold change in expression energies compared to all other basic cell groups and brain regions (ABA refers to this area as 'grey' contrast structures). These sets are generated using the ABA API and its differential gene search pipeline. 785 740 785 1 Comparative Toxicogenomics Database (CTD) Sets of genes associated with CTD chemical-gene interactions are obtained via CTD flat files. 6266 6177 21630 1 Drug Related Gene Database (DRG) Drug Related Gene Database, compiled bt the Neuroscience Informatics Framework (NIF) contains gene expression data related to drug abuse research. 1208 253 238 1 Human and Mouse Gene Ontology (GO) Sets of genes from human and mouse annotated to the Gene Ontology (GO), obtained from the Gene Ontology Consortium  and MGI. 33668 33668 85573 1 Human Phenotype Ontology Annotations (HP) Gene sets derived from annotations of genes to HPO. 6276 4011 6276 1 Kyoto Encyylopedia of Genes and Genomes (KEGG) Pathways derived from the KEGG API are directly parsed for identifiers that map to GeneWeaver. Pathway data for humans, mice, rats, and rhesus monkeys is currently included. 0 1172 1339 1 Mammalian Phenotype Annotations (MP) Gene sets derived from annotations of mutant mice to MP terms in MGI, with transitive closure. 7966 7966 7931 2 Medical Subject headings (MeSH) Genes annotated to MeSH terms were aggregated with gene2publication associations from PubMed. Associations must appear in a minimum of two publications. Genes associated with the closure of each set were obtained. 0 12069 12069 1 Molecular Signature Database (MSigDB) Sets of genes annotated to disease for use with Gene Set Enrichment Analysis (GSEA) downloaded from MSigDB v.5.0. Only sets derived from hallmark, C1, C3, C4, C6, and C7 collections are incorporated<sup>*</sup>. MSigDB genesets that are curated from other resources (e.g. KEGG or GO) are ignored to eliminate data redundancy. 0 3738 3738 1 MouseQTLs from MGI Sets of positional candidate genes for the confidence interval around all the QTLs within MGD. 0 5050 3405 1 Online Mendelian Inheritance in Man (OMIM) Gene-disease phenotype data is retrieved from OMIM's Morbid Map and Phenotype Series list. Unconfirmed and spurious mappings are ignored. 0 738 738 1 Pathway Commons (PC) Sets of genes derived from the \"top\" pathways: those that are neither controlled nor a pathway component of another biological process. KEGG pathways are removed from this data set to prevent duplicate genesets. 0 1036 1149 1 Rat QTLs from RGD Sets of positional candidate genes for the confidence interval around all the QTLs within the RGD. 0 2048 2064 1 Genome Wide Association Studies (GWAS) Catalog of Published Genome-Wide Association Studies 0 0 3389 <p><sup>*</sup>Information on the MSigDB file types included in GenWeaver (H, C1, C3, C4, C6 and C7)</p>"},{"location":"reference/geneset-tiers/","title":"GeneSet Tiers","text":"<p>GeneSet tiers \ud83e\udd47\ud83e\udd48\ud83e\udd49\ud83c\udf31\ud83d\udd12 are used to provide an easily recognizable and intuitive way  for users to understand the quality and reliability of the data in a geneset. The  following table provides a reference description of each tier.</p> Geneset Tier Description \ud83e\udd47Tier IPublic Resource Data Tier I data are professionally curated into another major database and are imported into GeneWeaver,which ensures consistency of metadata. Resource grade data is updated on a six-month cycle. These include: gene annotations to KEGG, MP and GO, curated functional associations in Neuroinformatics Framework, and Comparative Toxicogenomics Database. \ud83e\udd48Tier IIMachine-Generated from public sources Tier II data are computationally generated from data in public sources. These include empirical data obtained from public sources and their associated analytical tools, e.g. bulk analysis of gene co-expression to phenotypes across mouse strains from GeneNetwork.org, or QTL positional candidates from MGI. In contrast to Tier I in which the individual gene annotations to function are manually curated, Tier II includes machine generated gene annotations to functions from curated experimental data. GeneWeaver curators examine data and metadata. \ud83e\udd49Tier IIIHuman-Curated Data Tier III data are directly entered or reviewed by a professional curator for redundancy with existing records and adherence to documentation standards. Users who submit data under Tier IV have the option of sharing their data to the public. These data will be marked provisional until reviewed by the curator for data entry errors, compliance to metadata standards and redundancy with existing data. The submitter of the data will have the opportunity to approve the curators modifications to them prior to upgrade to Tier III status. For some research areas, a professional curator has identified and entered gene expression, quantitative trait locus and genomewide association studies (GWAS). Where possible, the curator has obtained results directly from the study authors, supplements or data repositories such as GEO, in addition to the often highly-filtered set of results reported in publications. \ud83c\udf31Tier IVSubmitted to Public-Provisional Tier IV consists of user submitted data that has been shared to the public prior to review. This data is indicated as provisional, but can be used in all analyses. Curatorial review is required to remove the provisional label. \ud83d\udd12Tier VPrivate User and Group Data, Uncurated Data in user accounts that is assigned private or group level access is confidential, is not exposed to analyses by users outside of the group to whom it is shared, and is therefore not reviewed by the professional curator."},{"location":"reference/geneset-utilities/","title":"GeneSet Utilities","text":"<p>GeneSet Details Pages allow users to view vital information about gene sets of interest, including associated genes, homologs and references to external links. Gene Intersection Lists are useful for determining which information is shared between gene sets of interest. In addition, GeneWeaver tools allow users to Combine gene sets of interest or perform more complex set operations based on Boolean Algebra. Gene sets may also be annotated with information about * Emphasis Genes*, allowing users to augment GeneWeaver tools with gene-specific information.</p>"},{"location":"reference/geneset-utilities/#emphasis-genes","title":"Emphasis Genes","text":"<p>The Emphasis Genes utility enables users to select genes or an entire set of genes that may be highlighted in various analysis tools.</p> <p>To set emphasis genes choose \"Emphasize Genes\" from the Analyze GeneSets drop-down on the navigation bar or from the footer.</p> <p></p> <p>The current emphaisis genes are listed on the left side of the page.</p> <p>To modify your emphasis genes, you can remove genes one at a time using the \"x\" icon next to each gene. To clear the entire list, click the \"Clear all genes\" button at the top of the page.</p> <p></p> <p>To add a gene, type the gene name or part of it in the box on the right side of the page. A list will appear based on the partial name. Select one and click the \"Go\" button.</p> <p></p> <p>The gene or genes if the selection included several, will be listed on the page. Use the \"Add all genes\" or \"Add\" link to select the desired gene(s).</p>"},{"location":"reference/geneset-utilities/#homology-mapping","title":"Homology Mapping","text":"<p>GeneWeaver uses the concept of Homology Mapping to expand search and analysis capabilities beyond a single species. Currently, we rely on data provided by Homologene to assert homology between clustered sets of reference gene ids. That is, GeneWeaver creates a set of unique id clusters (representing Entrez, Ensembl, Gene Cards, etc.) representing specific genes, these clusters are connected across species using mappings established by Homologene.</p>"},{"location":"reference/geneset-utilities/#gene-intersection-lists","title":"Gene Intersection Lists","text":"<p>Gene Intersection Lists are useful for determining which information is shared between gene sets of interest.</p> <p>Gene intersection lists can be generated by clicking on the output of various tools including the Hypergeometric tests, Jaccard similarity matrix Venn diagrams and HiSim Graph nodes. A table of genes by GeneSets is displayed. Next to each gene symbol are links to gene specific queries of external resources. Each gene has links to associated databases, such as NCBI, Ensembl, STRING, MGI, GeneNetwork, etc. For users with the FireGoose GAGGLE extension installed, you will also find the genes on the page available for broadcast on the page. Filled circles indicate the presence of a gene in a GeneSet. Green (light) circles indicate that the exact gene is present in multiple gene sets. Dark (maroon) circles indicate a homologous gene is present in multiple gene sets. The table can be exported using the export .csv feature at the bottom of the window.</p>"},{"location":"reference/geneset-utilities/#combine","title":"Combine","text":"<p>GeneWeaver tools allow users to combine gene sets of interest. GeneWeaver tools operate on a weighted bi-partite adjacency matrix, a table of Association Scores in a Gene (row) x GeneSet (col) tab delimited text format. For many GeneSets, the scores are binary.</p> <p>To create sample GeneWeaver data for development or off-line analysis:</p> <ol> <li>Perform a database query using the search field.</li> <li>Add the GeneSets to a project.</li> <li>Go to the \"Analyze GeneSets\" page.</li> <li>Select the project or specific GeneSets from projects.</li> <li>Select the \"Combine GeneSets\" tool, pick homology included or    excluded and click run.</li> <li>Save the file to your computer.</li> </ol> <p></p>"},{"location":"reference/geneset-utilities/#external-data-resources","title":"External Data Resources","text":"<p>GeneWeaver contains publically available sets of genes annotated to structured vocabularies and ontologies that are assigned Tier I, or public resource data. Other sets of genes, such as MeSH term-to-gene annotations, are derived from the processing of public sources and attributed to Tier II. In the case of MeSH, we take advantage of NCBI\u2019s gene-to-Pubmed and Pubmed-to-mesh files to produce sets of genes annotated through their transitive associations.</p>"},{"location":"reference/license/","title":"License","text":"<p>Apache License</p> <p>Version 2.0, January 2004</p> <p>http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"reference/policies/","title":"Policies","text":""},{"location":"reference/policies/#usage-policy-and-disclaimer","title":"Usage Policy and Disclaimer","text":"<p>Data and web site providers make no guarantees or warranties as to the accuracy or completeness of results obtained from accessing and using information from GeneWeaver. We will not be liable to any user or anyone else for any inaccuracy, error or omission, regardless of cause, in the data contained in the GeneWeaver databases or any resulting damages. In addition, the data providers do not warrant that the databases will meet your requirements, be uninterrupted or error-free. Data providers expressly exclude and disclaim all expressed and implied warranties of merchantability and fitness for a particular purpose. Data providers shall not be responsible for any damage or loss of any kind arising out of or related to your use of the databases, including without limitation data loss or corruption, regardless of whether such liability is based in tort, contract or otherwise.</p> <p>To report any errors found in the GeneWeaver database, please notify the appropriate person listed on our Contacts page.</p>"},{"location":"reference/policies/#data-sharing-policy","title":"Data Sharing Policy","text":"<p>Data sharing in GeneWeaver is as broad or restrictive as the investigator allows. When uploading data, it can be made private, public or accessible only to selected groups. Access restrictions can be changed at any time. All group members are also visible on the account setup page. The only people with access to your data are those who you personally allow, or those who your group administrator(s) allow. GeneWeaver will make no use of the data outside of normal metrics used to optimize algorithm or database efficiency, or in other internal use solely for the development of GeneWeaver, see Privacy Policy for more.</p> <p>In addition, our directives to share data stem from the NIH Data Sharing Policy that states:</p> <p>Data should be made as widely and freely available as possible while safeguarding the privacy of participants, and protecting confidential and proprietary data.</p>"},{"location":"reference/policies/#privacy-policy","title":"Privacy Policy","text":"<ul> <li>In order to integrate data from many users, while protecting private     data, we must store data on your server. User contact information is     collected for optional display with your gene sets to foster     collaborative research.</li> <li>Entering user information is not mandatory.</li> <li>User information will not be sold or otherwise distributed.</li> <li>GeneWeaver records some information about how the site is used such     as the IP address of machines accessing data sets. This information     is used to monitor our system performance, to prevent abuse of the     system, and to guide further development of the GeneWeaver. This     information is stored on the server in files that are accessible to     members of the development group. Specific information will not     be released.</li> <li>When you visit GeneWeaver, your use of the site is recorded in     two ways. First, your use is logged by the Web server in standard     log files. The IP address of your machine, the date and time, and     the name of the page you visit are recorded. Second, for each     request from the SQL database, the GeneWeaver records your IP     number, the time, and the data set from which you     request information. This information is collected for     statistical purposes. Our system uses a software program (Analog) to     create summary statistics that we find helpful in assessing patterns     of data use, in measuring system performance and in     detecting problems. This information is used to provide you with     better internet service.</li> <li>GeneWeaver also may request permission to place a so-called 'cookie'     text file on your system to allow you to retain information on your     set-up preferences.</li> <li>For site security purposes and to ensure that this server remains     available to users, this computer system employs programs that     monitor network traffic to identify unauthorized attempts to upload     or change information, and to detect unusually high numbers of     requests from single IP addresses. By accessing this site, you     expressly consent to usage monitoring of this site for unauthorized     or unusual activities. Unauthorized attempts to upload information     and change information are prohibited.</li> <li>In some cases, personal identifier information such as name or     e-mail is requested or required. This information may be posted for     public access along with the submitted comments and messages that     it accompanies. In all cases, participation is strictly voluntary     and no other use is made of the information. User data can be     labeled as private, group or public on submission. Permissions can     be changed. Gene sets that are not marked as public will not be     included in global analyses of the database contents.</li> </ul>"},{"location":"reference/publications/","title":"Publications","text":""},{"location":"reference/publications/#how-to-cite-geneweaver","title":"How to cite GeneWeaver","text":"<p>Erich J. Baker, Jeremy J. Jay, Jason A. Bubier, Michael A. Langston, and Elissa J. Chesler. GeneWeaver: a web-based system for integrative functional genomics. Nucleic Acids Research; (2012) 40(D1): D1067-D1076</p>"},{"location":"reference/publications/#publications-describing-geneweaver","title":"Publications Describing GeneWeaver","text":"<ul> <li> <p>Erich J. Baker, Jeremy J. Jay, Jason A. Bubier, Michael A. Langston, and Elissa J. Chesler. GeneWeaver: a web-based system for integrative functional genomics. Nucleic Acids Research; (2012) 40(D1): D1067-D1076.</p> </li> <li> <p>Jason A. Bubier, Michael A. Langston, Erich J. Baker, and  Elissa J. Chesler. Integrative functional genomics for systems genetics in GeneWeaver.org. Methods Mol Biol.; (2017). 1488:131-152.</p> </li> <li> <p>Jeremy J. Jay; Cross species integration of functional genomics experiments. International Review of Neurobiology; (2012) 104:1-24.</p> </li> <li> <p>Jeremy J. Jay, John D. Eblen, Yun Zhang, Mikael Benson, Andy D. Perkins, Arnold M. Saxton, Brynn H. Voy and Elissa J. Chesler and Michael A. Langston; A systematic comparison of genome-scale clustering algorithms. BMC Bioinformatics; (2012) Jun 25;13 Supplement 10:S7.</p> </li> <li> <p>Erich J. Baker, Jeremy J. Jay, Vivek M. Philip, Yun Zhang, Zuopan Li, Roumyana Kirova, Michael A. Langston and Elissa J. Chesler; Ontological Discovery Environment: a system for integrating gene-phenotype associations. Genomics; (2009) Dec;94(6):377-87.</p> </li> </ul>"},{"location":"reference/publications/#other-relevant-geneweaver-citations","title":"Other Relevant GeneWeaver Citations","text":"<ul> <li> <p>Ahmadi Adl, A., &amp; Qian, X. (2015). Tumor stratification by a novel graph-regularized bi-clique finding algorithm. Computational Biology and Chemistry, 57, 3-11. 10.1016/j.compbiolchem.2015.02.010</p> </li> <li> <p>Baker, E.J. (2012). Biological databases for behavioral neurobiology. International Review of Neurobiology, 103:19-38.</p> </li> <li> <p>Baker, E., Culpepper, C., Philips, C., Bubier, J., Langston, M., &amp; Chesler, E. (2014). Identifying common components across biological network graphs using a bipartite data model.- BMC Proceedings; Oct 13; 8.</p> </li> <li> <p>Baker E., Bubier J.A., Reynolds T., Langston M.A., &amp; Chesler E.J. (2016). GeneWeaver: data driven alignment of cross-species genomics in biology and disease. Nucleic Acids Res., 44(D1):D555-9.</p> </li> <li> <p>Bettembourg, C., Diot, C., &amp; Dameron, O. (2014). Semantic particularity measure for functional characterization of gene sets using gene ontology. PLoS ONE, 9:e86525.</p> </li> <li> <p>Bhandari, P., Hill, J.S., Farris ,S.P., Costin, B., Martin, I., Chan, C-L., Alaimo, J.T., Bettinger, J.C., Davies, A.G., Miles, M.F., &amp; Grotewiel, M. (2012). Chloride intracellular channels modulate acute ethanol behaviors in Drosophila, Caenorhabditis elegans and mice. Genes, Brain, and Behavior; Jun; 11(4):387-97.</p> </li> <li> <p>Bhattacharyya, T., Gregorova, S., Mihola, O., Anger, M., Sebestova, J., Denny, P., Simecek, P., &amp; Forejt, J. (2013). Mechanistic basis of infertility of mouse intersubspecific hybrids. PNAS; 2013 110 (6) E468-E477.</p> </li> <li> <p>Bubier, J.A., &amp; Chesler, E.J. (2012). Accelerating discovery for complex neurological and behavioral disorders through systems genetics and integrative genomics in the laboratory mouse. Neurotherapeutics; Apr; 9(2):338-48.</p> </li> <li> <p>Bubier, J.A., Jay, J.J., Baker, C.L., Bergeson , S.E., Ohno, H., Metten, P., Crabbe, J.C., &amp; Chesler, E.J. (2014). Identification of a QTL in Mus musculus for Alcohol Preference, Withdrawal, and Ap3m2 Expression Using Integrative Functional Genomics and Precision Genetics- Genetics; Jun 11;197(4):1377-1393.</p> </li> <li> <p>Bubier, J.A., &amp; Chesler, E.J. (2015). GeneWeaver: finding consilience in heterogeneous cross-species functional genomics data. -' Mammalian Genome'; Oct 26.</p> </li> <li> <p>Cesar, A.S., Regitano, L.C., Mour\u00c3\u00a3o, G.B., Tullio, R.R., Lanna, D.P., Nassu, R.T., Mudado, M.A., Oliveira, P.S., do Nascimento, M.L., Chaves, A.S., Alencar, M.M., Sonstegard, T.S., Garrick, D.J., Reecy, J.M., &amp; Coutinho, L.L. (2014). Genome-wide association study for intramuscular fat deposition and composition in Nellore cattle.- BMC Genetics; Mar 25; 15:39.</p> </li> <li> <p>Chan, R.F. (2013). Genetic analysis of ethanol sensitivity and tolerance in drosophila. Master's Thesis.</p> </li> <li> <p>Chen, H.C., Zou, W., Lu, T.P., &amp; Chen, J.J. (2014). A composite model for subgroup identification and prediction via bicluster analysis. PLoS ONE , 9 (e111318). 10.1371/journal.pone.0111318</p> </li> <li> <p>Chesler, E.J., Plitt, A., Fisher, D., Hurd, B., Lederle, L., Bubier, J.A., Kiselycznyk, C., &amp; Holmes, A. (2012). Quantitative trait loci for sensitivity to ethanol intoxication in a C57BL/6J\u00c3\u2014129S1/SvImJ inbred mouse cross. Mammalian Genome; Jun;23(5-6):305-21.</p> </li> <li> <p>Chesler, E.J., Logan, R.W. (2013). Opportunities for bioinformatics in the classification of behavior and psychiatric disorders- International Review of Neurobiology; 104:183-211</p> </li> <li> <p>Devera, S.M., Costina, B.N., Xub, R., El-Hagea, N., Balinang, J., Samoshkin, A., ... Hausera, K.F. (2014). Differential expression of the alternatively spliced OPRM1 isoform \u00c3\u017d\u00c2\u00bc -opioid receptor-1K in HIV-infected individuals'. AIDS, 28, 19-30. 10.1097/QAD.0000000000000113</p> </li> <li> <p>Eblen, J.D., Phillips, C.A., Rogers, G.L., &amp; Langston, M.A. (2012). The maximum clique enumeration problem: algorithms, applications, and implementations.- BMC Bioinformatics; Jun 25;13 Suppl 10:S5.</p> </li> <li> <p>Farris, S.P. (2016).Moving toward understanding the proteome involved in substance abuse. Biological Psychiatry, 79 , 422-424. 10.1016/j.biopsych.2016.01.003</p> </li> <li> <p>Groshaus, M., &amp; Montero, L. (2016). Tight lower bounds on the number of bicliques in false-twin-free graphs. Theoretical Computer Science, 636, 77-84. 10.1016/j.tcs.2016.05.027</p> </li> <li> <p>Grubb, S.C., Bult, C.J., &amp; Bogue, M.A. (2014). Mouse Phenome Database.Nucleic Acids Research; 42:D825-D834.</p> </li> <li> <p>Ha, T.J., Swanson, D.J., Kirova, R., Yeung, J., Choi, K., Tong, Y., Chesler, E.J., &amp; Goldowitz, D. (2012). Genome-wide microarray comparison reveals downstream genes of Pax6 in the developing mouse cerebellum.- European Journal of Neuroscience; Oct 36(7); 2888-98.</p> </li> <li> <p>Haendel, M.A., &amp; Chesler, E.J. (2012). Lost and found in behavioral informatics.- International Review of Neurobiology; 103:1-18.</p> </li> <li> <p>Hait, N.C., Wise, L.E., Allegood, J.C., O'Brien, M., Avni, D., Reeves, T.M., Knapp, P.E., Lu, J., Luo, C., Miles, M.F., Milstien, S., Lichtman, A.H., &amp; Spiegel, S. (2014). Active, phosphorylated fingolimod inhibits histone deacetylases and facilitates fear extinction memory.' Nature Neuroscience.'</p> </li> <li> <p>Han, B.W., &amp; Chen, Y.Q. (2013). Potential pathological and functional links between long noncoding RNAs and hematopoiesis.' Science Signaling'; 6.</p> </li> <li> <p>Jay, J.J., &amp; Chesler, E.J. (2014). Performing integrative functional genomics analysis in GeneWeaver.org.' Methods in Molecular Biology'; pp 13-29.</p> </li> <li> <p>Jegga, A.G. (2014). Candidate gene discovery and prioritization in rare diseases.Methods in Molecular Biology; 1168:295-312.</p> </li> <li> <p>Kang, H., Choi, I., Cho, S., Ryu, D., Lee, S., &amp; Kim, W. (2014). GsGator: An integrated web platform for cross-species gene set analysis. BMC Bioinformatics, 15 (13). 10.1186/1471-2105-15-13</p> </li> <li> <p>Kershenbaum, A., Cutillo, A., Darabos, C., Murray, K., Schiaffino, R., &amp; Moore, J.H. (2016). Bicliques in graphs with correlated edges: From artificial to biological networks. In Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics) (138-155). 10.1007/978-3-319-31204-0_10</p> </li> <li> <p>Logan, R.W., Robledo, R.F., Recla, J.M., Philip, V.M., Bubier, J.A., Jay, J.J., Harwood, C., Wilcox, T., Gatti, D.M., Bult, C.J., Churchill, G.A., &amp; Chesler, E.J. (2013). High-precision genetic mapping of behavioral traits in the diversity outbred mouse population- Genes, Brain and Behavior; Jun; 12(4):424-37.</p> </li> <li> <p>Louati, A., Haddad, J.E., &amp; Pinson, S. (2015). A multi-agent approach for trust-based service discovery and selection in social networks. Scalable Computing, 16, 381-402. doi: 10.12694/scpe.v16i4.1129</p> </li> <li> <p>McWhite, C.D., Liebeskind, B.J., &amp; Marcotte, E.M. (2015). Applications of comparative evolution to human disease genetics. Current Opinion in Genetics and Development, 35, 16-24. doi: 10.1016/j.gde.2015.08.004</p> </li> <li> <p>Meehan, T.F., Carr, C.J., Jay, J.J., Bult, C.J., Chesler, E.J., &amp; Blake, J.C. (2011). Autism candidate genes via mouse phenomics. Journal of Biomedical Informatics; Dec; 44 Supplement 1:S5-11.</p> </li> <li> <p>Mooney, M., &amp; McWeeney, S. (2014). Data integration and reproducibility for high-throughput transcriptomics. In International Review of Neurobiology (55-71). doi: 10.1016/B978-0-12-801105-8.00003-5</p> </li> <li> <p>Nestor, C.E., Barren\u00c3\u00a4s, F., Wang, H., Lentini, A., Zhang, H., Bruhn, S., J\u00c3\u00b6rnsten, R., Langston, M.A., Rogers, G., Gustafsson, M., &amp; Benson, M. (2014). DNA methylation changes separate allergic patients from healthy controls and may reflect altered CD4+ T-cell population structure- PLoS Genetics; Jan;10(1):e1004059.</p> </li> <li> <p>O'Brien, M.A., Costin, B.N., &amp; Miles, M.F. (2012). Using genome-wide expression profiling to define gene networks relevant to the study of complex traits: from RNA integrity to network topology.- International Review of Neurobiology;104:91-133.</p> </li> <li> <p>Oren, Y., Nachshon, A., Frishberg, A., Wilentzik, R., &amp; Gat-Viks, I. (2015). Linking traits based on their shared molecular mechanisms. eLife , 2015 (e04346). 10.7554/eLife.04346</p> </li> <li> <p>Padula, A.E., Griffin, W.C. 3rd, Lopez, M.F., Nimitvilai, S., Cannady, R., McGuier, N.S., Chesler, E.J., Miles, M.F., Williams, R.W., Randall, P.K., Woodward, J.J., Becker, H.C., &amp; Mulholland, P.J. (2015). KCNN Genes that Encode Small-Conductance Ca2+-Activated K+ Channels Influence Alcohol and Drug Addiction.- Neuropsychopharmacology; Feb 9.</p> </li> <li> <p>Recla, J.M., Robledo, R.F., Gatti, D.M., Bult, C.J., Churchill, G.A., &amp; Chesler, E.J. (2014). Precise genetic mapping and integrative bioinformatics in Diversity Outbred mice reveals Hydin as a novel pain gene.' Mammalian Genome'; 25:211-222.</p> </li> <li> <p>Rojas-Mu\u00c3\u00b1oz, A., Maurya, M.R., Lo, F., &amp; Willems, E. (2014). Integrating omics into the cardiac differentiation of human pluripotent stem cells Wiley Interdisciplinary Reviews: Systems Biology and Medicine, 6, 247-264. doi: 10.1002/wsbm.1268</p> </li> <li> <p>Roth, A., Kyzar, E.J., Cachet, J., Stewart, A.M., Green, J., Gaikwad, S., O'Leary, T.P., Tabakoff, B., Brown, R.E., &amp; Kalueff, A.V. (2013). Potential translational targets revealed by linking mouse grooming behavioral phenotypes to gene expression using public databases. Progress in Neuro-Psychopharmacology &amp; Biological Psychiatry; 40:313-325.</p> </li> <li> <p>Saccone, S.F. (2012). Applying in silico integrative genomics to genetic studies of human disease. In International Review of Neurobiology (133-156). doi: 10.1016/B978-0-12-388408-4.00007-1</p> </li> <li> <p>Smith, C.L., &amp; Eppig, J.T. (2012). The Mammalian Phenotype Ontology as a unifying standard for experimental and high-throughput phenotyping data. Mammalian Genome, 23, 653-668. doi: 10.1007/s00335-012-9421-3</p> </li> <li> <p>Talishinsky, A., &amp; Rosen, G.D. (2012). Systems Genetics of the Lateral Septal Nucleus in Mouse: Heritability, Genetic Control, and Covariation with Behavioral and Morphological Traits. PLoS ONE; 7(8): e44236.</p> </li> <li> <p>Tsiliki, G., Tsaramirsis, K., &amp; Kossida, S. (2014). AmalgamScope: merging annotations data across the human genome.- BioMed Research International.; Epub 2014 May 20.</p> </li> <li> <p>Van Steen, K., &amp; Malats, N. (2014). Perspectives on data integration in human complex disease analysis. In Big Data Analytics in Bioinformatics and Healthcare (284-322). 10.4018/978-1-4666-6611-5.ch013</p> </li> <li> <p>Williams, R.W. (2011). Genetic and genomic web resources for research on alcohol use and abuse. Alcohol Research and Health, 34 , 378-380.</p> </li> <li> <p>Williams, R.W., &amp; Mulligan, M.K. (2012). Genetic and molecular network analysis of behavior. International Review of Neurobiology; 104:135-57.</p> </li> <li> <p>Wiltshire, T., Ervin, R.B., Duan, H., Bogue, M.A., Zamboni, W.C., Cook, S., Chung, W., Zou, F., &amp; Tarantino, L.M. (2015). Initial locomotor sensitivity to cocaine varies widely among inbred mouse strains. - Genes, Brain and Behavior, 14, 271-280. 10.1111/gbb.12209</p> </li> <li> <p>Wittkop, T., TerAvest, E., Evani, U.S., Fleisch, K.M., Berman, A.E., Powell, C., Shah, N.H., &amp; Mooney, S.D. (2013). STOP using just GO: A multi-ontology hypothesis generation tool for high throughput experimentation. BMC Bioinformatics, 14.</p> </li> <li> <p>Zhang, Y., Phillips, C.A., Rogers, G.L., Baker, E.J., Chesler, E.J., &amp; Langston, M.A. (2014). On finding bicliques in bipartite graphs: a novel algorithm and its application to the integration of diverse biological data types. BMC Bioinformatics, 15.</p> </li> </ul>"},{"location":"reference/publications/#related-resources-and-publications","title":"Related Resources and Publications","text":"<p>GeneNetwork</p>"},{"location":"reference/restful-api/","title":"ReST APIs","text":""},{"location":"reference/restful-api/#geneweaver-rest-api","title":"Geneweaver ReST API","text":"<p>The Geneweaver ReST API powers the Geneweaver web application. The API is available at geneweaver.jax.org/api/docs .</p> <p>You can find information on our latest release on GitHub .</p>"},{"location":"reference/restful-api/#geneweaver-aon-rest-api","title":"Geneweaver A.O.N. ReST API","text":"<p>The A.O.N geneweaver ortholog and homolog ReST API is a powerful tool for mapping gene  IDs between species. </p> <p>The API is available at  geneweaver.jax.org/aon/api/docs .</p> <p>Read the paper here.</p>"},{"location":"reference/restful-api/#api-standards","title":"API Standards","text":"<p>GeneWeaver follows the API Standards set forth by The Jackson Laboratory. These  standards help to make using the GeneWeaver API easier and consistent.</p> <p>You can read more about the standards at the  API Standards GitHub Repository.</p>"},{"location":"reference/scientific-workflows/","title":"Scientific workflows","text":"<p>A scientific workflow is a series of interconnected tasks or computational steps  that are designed to solve a specific problem or address a scientific question. </p> <p>Nextflow and  Cromwell are examples of programs that  allow researchers to define, automate, and execute such workflows.</p> <p>Scientific workflows can be beneficial when an analysis involves multiple steps, is  complex, needs to be repeated, involves different platforms or environments, or requires collaboration.</p>"},{"location":"reference/scientific-workflows/#workflows-in-geneweaver","title":"Workflows in Geneweaver","text":"<p>Geneweaver uses scientific workflows as part of its model for how its analysis tools are defined and executed. The <code>geneweaver.tools.framework</code> module provides a <code>AbstractTool</code> class that, when used, allows Geneweaver to infer the workflow definition for single step analysis tools. The <code>AbstractTool</code> class also provides a mechanism for defining workflow definitions for more complex analysis tools that require  multiple steps or complex execution environments that would be difficult for the  application to infer.</p> <p>By default, Geneweaver uses the Nextflow workflow engine to  define and execute workflows. Support for  Cromwell is planned for a future release.</p> How Does Geneweaer Do This? <p>Geneweaver uses a service that implements the Ga4GH WES specification to define and execute workflows.</p> <p>The service is responsible for executing the workflow and returning the results to Geneweaver.</p> <p>Geneweaver's WES service is known as \"WESly\" and is currently in development. If you  are interested in contributing to the development of WESly, head over to the WESly GitHub repository.</p>"},{"location":"reference/scientific-workflows/#why-use-workflows","title":"Why Use Workflows?","text":"<p>Geneweaver uses scientific workflows as part of its analysis model for many of the  same reasons scientists use them in their research. Workflows allow Geneweaver to define and execute complex analysis tools in a way that is easy to understand and share with others, and which is both reproducible and platform-agnostic.</p> <p>Utilizing workflows as the baseline for how Geneweaver implements analysis tools also  allows Geneweaver to utilize the processes that scientists and researchers use when defining and executing their own workflows. </p>"},{"location":"reference/command-line/","title":"<code>gweave</code> Command Line Interface","text":"<p>The geneweaver-client library comes with a command line interface that exposes common functionality for Geneweaver.</p>"},{"location":"reference/command-line/#installation","title":"Installation","text":"<p>This library is tested on python version <code>3.9</code>, <code>3.10</code>, and <code>3.11</code> on Ubuntu Linux. The  library should work on any version of python <code>3.9</code> or higher on any system that runs python.</p> <p>Using a Virtual Environment</p> <p>A virtual environment is a way to isolate the dependencies of a project from the dependencies of the system. This is useful for managing multiple projects with different dependencies, and for ensuring that the dependencies of a project do not conflict with the dependencies of the system.</p> <p>To create a virtual environment for the <code>geneweaver-client</code> package. <pre><code>python3 -m venv geneweaver-client\nsource geneweaver-client/bin/activate\n</code></pre></p> <p>To install the <code>geneweaver-client</code> package from PyPI, run the following command: <pre><code>pip install geneweaver-client\n</code></pre></p>"},{"location":"reference/command-line/#help-documentation","title":"Help Documentation","text":"<p>All of the <code>gweave</code> commands come with built-in help. To see the help for a specific command, use the <code>--help</code> flag.</p> <pre><code>gweave --help\n</code></pre>"},{"location":"reference/command-line/#alpha-beta-commands","title":"Alpha &amp; Beta Commands","text":"<p>The <code>gweave</code> client is how the Geneweaver team ships early access functionality, and how we test new features. The <code>alpha</code> and <code>beta</code> commands are how we expose this functionality to the community.</p> Alpha Commands <p>The <code>alpha</code> commands are for early access functionality. They are not guaranteed to work, and they are not guaranteed to be stable. They are for testing purposes only.</p> <p>They are considered to be experimental, and they may be removed or changed without warning.</p> <p>Alpha commands do not have the same level of testing requirements as the rest of the  CLI, and may break or change in unexpected ways.</p> <p>You can always see information about alpha commands, as well as all commands available in the <code>gweave</code> CLI, by using the <code>--help</code> flag.</p> <pre><code>gweave alpha --help\n</code></pre> Beta Commands <p>The <code>beta</code> commands are for functionality that is intended for general release, is considered to be stable and safe to use, but which is still undergoing testing. </p> <p>There is also no guarantee that beta commands will be released beyond beta testing.</p> <p>Beta commands are subject to future change and/or removal.</p> <p>You can always see information about beta commands, as well as all commands available in the <code>gweave</code> CLI, by using the <code>--help</code> flag.</p> <pre><code>gweave beta --help\n</code></pre>"},{"location":"reference/command-line/#command-groups","title":"Command Groups","text":"<p>The <code>gweave</code> CLI is organized into command groups. Each command group is a collection of related commands. The alpha and beta commands referenced in the previous section are  actually two examples of these groups. </p> <p>Command groups can also have nested command groups. </p> <pre><code>gweaver &lt;group&gt; &lt;subgroup&gt; &lt;command&gt; &lt;arguments&gt; &lt;options&gt;\n</code></pre> <p>In the following example, <code>alpha</code> is a command group, and <code>auth</code> is a nested command  group, login is a command, and <code>--reauth</code> is an option.</p> <pre><code>gweaver alpha auth login --reauth\n</code></pre>"},{"location":"reference/command-line/api-commands/","title":"API Commands","text":"<p>The <code>gweave</code> client has a command group for interacting with the Geneweaver API. This allows you to do many of the tasks you would usually do on the website from the command line.</p> <p>This can be useful for automating tasks, or for running analysis tools locally.</p>"},{"location":"reference/command-line/api-commands/#requirements","title":"Requirements","text":"<p>You will need to have installed the <code>gweave</code> tool. See  Command Line Interface for installation instructions.</p> <p>You will need to have logged in to the <code>gweave</code> tool. See Logging In for instructions on how to log in.</p>"},{"location":"reference/command-line/api-commands/#the-api-command-group","title":"The <code>api</code> Command Group","text":"<p>Still in alpha!</p> <p>The <code>api</code> command group is still in alpha! In the following examples we will prepend the <code>alpha</code> command group to all of our examples.</p> <p>The <code>api</code> command group collects all api interaction commands into a single group. There are several subgroups, each with their own set of commands.</p> Command Groups <p>If you are not familiar with command groups, see the documentation on <code>gweave</code> Command Groups.</p>"},{"location":"reference/command-line/api-commands/#genesets","title":"Genesets","text":"<p>The <code>genesets</code> command group is for interacting with genesets.</p> <p>You can see up-to-date documentation on the command group by using the following help command: <pre><code>gweaver alpha api genesets --help\n</code></pre></p>"},{"location":"reference/command-line/api-commands/#downloading-a-geneset","title":"Downloading a Geneset","text":"<p>Downloading a geneset can be as simple as specifying the geneset ID (without the <code>GS</code> prefix).</p> <pre><code>gweave -p alpha api genesets get $GS_ID\n</code></pre> <p>For example, to download geneset <code>GS1234</code>, you can use the following command:</p> <pre><code>gweave -p alpha api genesets get 1234 \n</code></pre> <p>If you want to download the geneset in a specific gene ID type, you can specify the <code>--gene-id-type</code> flag.</p> <pre><code>gweave -p alpha api genesets get 1234 --gene-id-type=Wormbase\n</code></pre> <p>To save the geneset to a file, you can use the <code>&gt;</code> operator.</p> <pre><code>gweave -p alpha api genesets get 1234 --gene-id-type=Wormbase &gt; geneset_123.json\n</code></pre>"},{"location":"reference/command-line/api-commands/#pretty-printing","title":"Pretty Printing","text":"<p>The <code>-p</code> flag will format the results in a way that is easier to read.</p> <p>You can save the results to a file by using the <code>&gt;</code> operator. <pre><code>gweave -p alpha api genesets get 1234 --gene-id-type=Wormbase &gt; geneset_123.json\n</code></pre></p>"},{"location":"reference/command-line/api-commands/#geneidentifier-types","title":"GeneIdentifier Types","text":"<p>Warning</p> <p>The <code>GeneIdentifier</code> types are reproduced here for convenience, but the most  up-to-date list can be found in the <code>geneweaver-core</code> package by using the <code>geneweaver.core.enum.GeneIdentifier</code> class.</p> <ul> <li>\"Entrez\"</li> <li>\"Ensemble Gene\"</li> <li>\"Ensemble Protein\"</li> <li>\"Ensemble Transcript\"</li> <li>\"Unigene\"</li> <li>\"Gene Symbol\"</li> <li>\"Unannotated\"</li> <li>\"MGI\"</li> <li>\"HGNC\"</li> <li>\"RGD\"</li> <li>\"ZFIN\"</li> <li>\"FlyBase\"</li> <li>\"Wormbase\"</li> <li>\"SGD\"</li> <li>\"miRBase\"</li> <li>\"CGNC\"</li> </ul>"},{"location":"reference/command-line/logging-in/","title":"Logging In","text":"<p>This page describes how to log in to the GeneWeaver command line application (<code>gweave</code>).</p>"},{"location":"reference/command-line/logging-in/#requirements","title":"Requirements","text":"<p>You will need to have installed the <code>gweave</code> tool. See  Command Line Interface for installation instructions.</p>"},{"location":"reference/command-line/logging-in/#the-auth-command-group","title":"The <code>auth</code> Command Group","text":"<p>Still in beta!</p> <p>The auth command group is still in beta! In the following examples we will prepend the <code>beta</code> command group to all of our examples.</p> <p>To log in to the command line application, we will be using the <code>auth</code> command group.</p> Command Groups <p>If you are not familiar with command groups, see the documentation on <code>gweave</code> Command Groups.</p>"},{"location":"reference/command-line/logging-in/#first-steps","title":"First Steps","text":"<p>If you have never logged in before, the first thing you will need to do is use  the <code>login</code> command.</p> <pre><code>gweaver beta auth login\n</code></pre> <p>This will prompt you to open a link in your web browser. Once you have opened the link, you will be prompted to log in to the GeneWeaver web application. Once you have logged  in, navigate back to the command line application to continue using the <code>gweave</code> tool.</p> <p>You will see the following message in your terminal: <pre><code>1. On your computer or mobile device navigate to:  https://geneweaver.auth0.com/activate?user_code=SOME-CODE\n2. Enter the following code:  SOME-CODE\n</code></pre></p> <p>Note that the code may have been entered automatically for you, in which case you can continue through without entering the code.</p>"},{"location":"reference/command-line/logging-in/#viewing-your-tokens","title":"Viewing your Tokens","text":"<p>You should not need to view your tokens, but if you do, you can use the two tokens  commands: <pre><code>gweaver beta auth print-access-token\ngweaver beta auth print-identity-token\n</code></pre></p>"},{"location":"reference/command-line/logging-in/#re-authenticating","title":"Re-authenticating","text":"<p>You should not have to manually reauthenticate, but if you need to, you can use the  <code>--reauth</code> flag.</p> <pre><code>gweaver beta auth login --reauth\n</code></pre> <p>This will force the <code>gweave</code> tool to restart the loginc process from the beginning.</p>"},{"location":"reference/curation/","title":"Curation","text":"<p>Controlling the quality and validity of the large-scale analysis of secondary data requires the enforcement of interpretable standards for gene set construction and description. GeneWeaver\u2019s use of discrete analysis eliminates many barriers to the integration of heterogeneous data sets across species and experiments. However, it is important for users to be able to rapidly interpret the nature of gene sets retrieved from the site, requiring a minimal standard for metadata associated with secondary data. For this purpose, both unstructured textual descriptions of the data and structured ontology annotations to the terms in these descriptions are used to define gene sets.</p> <p>Our Curation Standards provide detailed guidance to GeneWeaver curation policies and sample curation types. We have also included a brief explanation of the Curation Process, which includes a guide to our new curation interface.</p>"},{"location":"reference/curation/curation-process/","title":"Curation Guide","text":"<p>The Curation menu in GeneWeaver provides options for managing curation tasks and searching and assigning publications</p> <p></p> <p>Managing Curation Tasks</p> <p></p> <p>When selecting \u201cManage Curation Tasks\u201d from the navigation menu you\u2019ll be presented with a page containing in the side bar, all of the curation groups you belong to separated by groups you administer and groups of which you are just a member. The main body of the page will contain the list of curation tasks for the selected group in the side bar. The curation tasks are a mix of publications and genesets, which have been assigned to this group, with the tasks, which have not yet been assigned to a curator, appearing at the top of the table.</p> <p></p> <p>You can change the selected group in the main part of the page just by clicking on the group of interest in the side bar.</p> <p>Immediately above the table, there are buttons which will allow you to filter the contents of the table to contain: All results, Assigned tasks, Unassigned tasks, tasks which are Ready for review and tasks which have been Reviewed. In this context Assigned and Unassigned are referring to curator assignment.</p> <p></p> <p>The columns of the table are mostly self-explanatory, however it\u2019s worth explaining PUB ASSIGNMENT and # GENESETS.</p> <p>The PUB ASSIGNMENT column will display the associated PubMed ID for a geneset task, when it was entered via an association when a Publication Assignment. The link on the PubMed ID will take you to the publication assignments page.</p> <p>The # GENESETS column indicates for a publication, how many genesets are associated with it as part of this specific publication assignment. If this publication is assigned to another curation group as well, genesets as part of that publication Assignment will not be part of this number.</p> <p>If you are an administrator of the curation group for which you are managing tasks, there should also be an Assign Curator button at the top right of the page. You are able to select one or more task rows in the table, at which point they should be highlighted yellow.</p> <p></p> <p>One note about how row selection works: There are no Shift or Control operations for selecting multiple rows. Rows are selected one at a time, and remain selected until you click on the row again, when it becomes deselected. Also, selections do not persist when you move to the next page of results. This latter issue is something we intend to address in a future release. However, for the time being it\u2019s recommended you select the visible rows you would like to assign, assign them, and then move onto the next page of results.</p> <p>Once you\u2019ve chosen the tasks you want to assign (or reassign), you will select the Assign Curator button.</p> <p></p> <p>You will then be presented with a modal dialog box, where you can select the individual you wish to curate the tasks, and include a note regarding the curation assignment.</p> <p>Once a curator has been selected, click the Assign For Curation button. If you select Close instead no assignment will be made.</p> <p>For your convenience, if you realized while in the Curation Task Management page that you want to assign a publication to this group, so that you can subsequently assign it to a curator, there is also an Add Publication button at the top of the page.</p> <p></p> <p>This button will take you to the Search/Assign Publications page with only publication generators listed that were created for the curation group.</p> <p></p> <p>Search/Assign Publications</p> <p></p> <p>When selecting \u201cSearch/Assign Publications\u201d from the page menu you\u2019ll be presented with a page containing an \u201caccordion\u201d display, with the middle section opened by default. The assumption is that most times the user will be interested in generating a list of publications from which to make assignments.</p> <p></p> <p>The section is broken into 3 parts:</p> <ol> <li>Single Publication Assignment</li> <li>Publication Generators</li> <li>Generated Publication Listing</li> </ol> <p>Single Publication Assignment</p> <p>If you select the + symbol next to Single Publication Assignment you will be presented with a simple search box. This would be used in the case where you have a specific PubMed ID that you know and want to assign for curation. You simply enter the PubMed ID and select the Find Publication button.</p> <p></p> <p>Assuming you\u2019ve entered a valid PubMed ID, the citation will be returned so that you can confirm that this is indeed your publication of interest.</p> <p></p> <p>To assign the publication to a curation group to work on, just select the Assign To Curation Group button and you will be presented with the following modal dialog box displaying a drop down so you can select the curation group and a text box so that you can enter any curation notes you might have.</p> <p></p> <p>Publication Generation</p> <p>If you select the + symbol next to Publication Generators you will be presented with a table of generators that have been created for groups of which you are a member, and an Add Generator button.</p> <p></p> <p>The columns of the table represent: the NAME that was assigned to the generator when it was queried; the PUBMED SEARCH term that is used to search PubMed and bring back a list of publications; FOR GROUP which is the curation group for which the generator was created; the date the generator was LAST RUN; and a series of ACTIONS which can be executed on a generator (will discuss these later).</p> <p>In the case where there are no generators already created for any of the groups to which you belong, the first step would be to click Add Generator. This will bring up a modal dialog box</p> <p></p> <p>You will be presented with three fields, which are all mandatory in order to have the Save button enabled. Generator Name is a self selected name to represent your generator. PubMed Query must be a valid PubMed search term. You can learn more about valid PubMed terms using the following YouTube video (https://www.youtube.com/watch?v=dncRQ1cobdc&amp;feature=relmfu). There is also a link to the PubMed search string builder (https://www.ncbi.nlm.nih.gov/pubmed/advanced) directly in the dialog box.</p> <p></p> <p>Once created the generator becomes available in the table of generators.</p> <p>Generator Actions</p> <p>There are three actions available to be used with generators:</p> <ul> <li> Run</li> <li> Edit</li> <li> Delete</li> </ul> <p>We\u2019ll discuss Run last as it\u2019s most involved and leads to the next section.</p> <p>Edit is fairly straight forward. It presents you with a modal dialog identical to the one you get when creating a new generator. You are able to update any of name, search term or group association.</p> <p> Delete will simply bring up a confirmation dialog box.</p> <p></p> <p> Lastly the Run option will cause the generator to run against PubMed, automatically collapse the Publication Generators accordion section and will expand the Generated Publication Listing section, with the results of the generator displayed.</p> <p>Generated Publication Listing</p> <p>If you select the + symbol next to Generated Publication Listing you will be presented with a table of publications that have been pulled from PubMed and are the result of the PubMed search term associated with a given generator. This section is populated by selecting the Run  icon in the generator table.</p> <p></p> <p>Publications that are pulled by a publication generator are not persisted in the GeneWeaver database. At least, not until the time they are assigned to a curation group. Instead the publications that are not already assigned to a group are pulled directly from PubMed at the time of generation. Some of these queries can result in a very large number of publications (hundreds of thousands). Therefore we only display a slice of the publications at a time. We do keep track of the total number that match the search term, and allow you to page through the results, each time going back out to PubMed to pull in the next set.</p> <p>Similar to the Curation Task Management page, you can select multiple rows to be assigned to a curation group all at once. This is done by individually selecting each publication of interest. There are no features for multi select all at once using either the control or shift keys. The only way you can de-select a row, is by clicking the row again.</p> <p>You can get more detail about a publication by clicking the + symbol at the beginning of the row. This will display the title, authors, journal and publication date, a link to the full text of the publication and the abstract.</p> <p></p> <p>Once you\u2019ve selected the publication or publications that you would like to assign to a curation group, you select the Assign to Curation Group button. This will bring up a modal dialog box where you will select a curation group, and optionally type in a note regarding the curation that is to be done.</p> <p></p> <p>Once assigned the publications that have been assigned to a curation group should now have a View icon appearing at the end of the row, and if you cursor over the icon you will see a tool tip telling you what group or groups are curating this publication.</p> <p></p> <p>Also, if you select the + symbol at the beginning of the row now, the groups will be listed under Assigned to Curation Groups under the expanded details.</p> <p>Once an assignment has been done a notification will be sent to the administrator of the curation group so they know that there is a new publication that needs to be assigned to a curator. Notifications will be discussed in another section. If you now return the the Manage Curation Tasks page for the curation group to which the publication has been assigned, you should now see the publication listed at the top of the tasks table.</p> <p></p> <p>Publication Curation Assignment</p> <p>You can get to the Publication Curation Assignment page from the Curation Task Management page in one of two ways.</p> <ul> <li>Click on the PubMed ID in the TASK column of a publication row of the task table.</li> <li>Click on the PubMed ID in the PUB ASSIGNMENT column of a geneset row of the task   table.</li> </ul> <p></p> <p>If you select a publication that has not been assigned to a curator yet, you\u2019ll get to a page that looks something like this:</p> <p></p> <p>The citation information is present, and the curation group is identified, but there is no curator assigned and no associated genesets.</p> <p>Assignment to a curator could have been done via the Curation Task Management page as detailed previously, or by using the Assign To Curator button on this page. The functionality of that button is essentially the same as on the other page, with an option to select a curator, and include a curation note.</p> <p>Once the curator is assigned, the curator\u2019s name and any notes that have been entered will appear in the upper right hand side of the page.</p> <p></p> <p>As the assignee of a publication, you will be presented with an additional button below Save Notes to be used to Create New Geneset. The Reassign button that was visible to the administrator now becomes a * Mark as Complete* button.</p> <p></p> <p>Clicking on the Create New Geneset button brings up a dialog that allows you to enter a \u201cstub\u201d for one or more new genesets. A stub is essentially a placeholder for a geneset that will be more completely populated at a later time. This gives a curator the ability to quickly create a bunch of stubs while reviewing an article without having to enter the full information for each.</p> <p></p> <p>The curator can select the species of interest and then just enter the name, the label to be used in figures and a description. They can add multiple for this species by selecting Add Row, and when they\u2019ve entered the information for all the geneset stubs associated with this species, they hit Submit.</p> <p>When you\u2019ve hit Submit, some automatic annotation of the geneset happens in the background. Your geneset stub will not immediately become visible under GeneSets Created For This Assignment. Instead you will see \u201cloading\u2026\u201d. Once the geneset stubs are created the page will display the new geneset stubs.</p> <p></p> <p>Once it\u2019s loaded the geneset stub will appear under GeneSets Created For This Assignment. It might take a while for the new geneset stub(s) to appear in the list of genesets associated with the publication assignment, since GeneWeaver is calling out to an external text annotator to annotate the geneset description and publication abstract.</p> <p>If there are other genesets visible to the user that are associated with this publication, but were not created through this publication assignment, then they will show up under Other Visible GeneSets Associated With This Publication.</p> <p></p> <p>Once the geneset stubs have been created, the curator can click on the link for any one of the genesets, and begin curation of an actual geneset.</p> <p>When curation of all of the associated genesets for this publication are complete, the curator should click the Mark as Complete button on the Publication Curation Assignment page.</p>"},{"location":"reference/curation/curation-process/#curation-page","title":"Curation Page","text":"<p>The geneset curation page is essentially the standard view geneset details page with some of the features turned off. On this page the curator can add or remove genes from the geneset, set a threshold, edit meta content, or update the curation notes. Once the curator has finished editing the geneset they can mark is Ready for Review, which will send the geneset back to the group administrator for review. If the group has multiple administrators then the geneset will be sent to the administrator that assigned the curation task to the curator.</p> <p></p>"},{"location":"reference/curation/curation-standards/","title":"Curation Standards Documentation","text":"<p>Secondary functional genomics data consists of the results of analyzed experiments in functional genomics. In contrast to primary data stores such as Gene Expression Omnibus (GEO) in which raw experimental data are stored, a secondary data store attempts to collect the results of experimental design and decision-making process of the researcher so that one may interpret and integrate the gene set centered outcomes of the studies. Controlling the quality and validity of the large-scale analysis of secondary data requires the enforcement of interpretable standards for gene set construction and description. GeneWeaver\u2019s use of discrete analysis eliminates many barriers to the integration of heterogeneous data sets across species and experiments. However, it is important for users to be able to rapidly interpret the nature of gene sets retrieved from the site, requiring a minimal standard for metadata associated with secondary data. For this purpose, both unstructured textual descriptions of the data and structured ontology annotations to the terms in these descriptions are used to define gene sets. In the interest of encouraging submission we are cautious not to be too prescriptive or burdensome to users, but rather to provide guidelines on standards used by internal curators to assess data quality and clarity to enable rapid acceptance of community submissions to the data repository.</p>"},{"location":"reference/curation/curation-standards/#curation-tiers","title":"Curation Tiers","text":"Tier Name Curator Description Tier I Public Resource Grade                    Resource GeneWeaver   Large data sets primarily curated by their parent resource. GeneWeaver ensures consistency of metadata (gene annotations to KEGG, MP and GO, curated functional associations in the Neuroinformatics Framework, Comparative Toxicogenomics Database) Tier II Machine-Generated from public sources    GeneWeaver            Gene sets resulting from genome analysis, not otherwise published in total, e.g. gene co-expression to behavior from GeneNetwork.org, QTL positional candidates from MGI. GeneWeaver curators examine data and metadata. Tier III Human-Curated                            GeneWeaver            Curated user-deposited data and publication supplements in domains of interest. Tier IV Submitted to Public- Provisional User                  User-deposited data made available to the public. All Tier IV is examined for promotion to Tier III Tier V Private User and Group data- Uncurated   User                  Data sets deposited for private or group-only analysis <p>Tip</p> <p>GeneSet tiers also have a non-curation meaning, which can be referenced on the GeneSet Tiers page.</p>"},{"location":"reference/curation/general-definitions/","title":"General Definitions","text":"<p>Gene Set Name: A brief title for the gene set, approximately sentence length, that should provide a clear and concise description of the contents of a gene set interpretable to most users of GeneWeaver, but with sufficient detail to satisfy a domain expert. This is the major gene set name that is displayed in all search results, project directory and table views of analysis results. Standards for specific gene set types are given in the following section.</p> <p>Gene Set Figure Label: A brief 23 character abbreviation to facilitate recognition of the gene set in a graph or other display.</p> <p>Gene Set Description: A detailed description of the gene set, including rules for its construction, experimental methods and analyses used to generate data, anatomical terms, and traceable references to source data including accession information and date. Abbreviations should be avoided.</p> <p>Ontology Annotations: Relevant terms from Disease Ontology, Mammalian Ontology and other OBO ontologies supplied by curators or identified through the application of the NCBO Annotator to textual descriptions including publication abstracts.</p> <p>Publication Information:   PubMed ID, title, authors, publication information and full-text of the abstract.</p>"},{"location":"reference/curation/geneset-type-standards/","title":"Standards for Common GeneSet Types","text":""},{"location":"reference/curation/geneset-type-standards/#type-of-data-differential-expression-profiling","title":"Type of Data: Differential Expression Profiling","text":"<p>Gene Set Name: Genes [upregulated/downregulated/differentially expressed] in [tissue] [comparison]. Example: Genes differentially expressed in striatum of C57Bl/6J compared to C57Bl/6C. Note: spell out anatomical terms as nouns, e.g. striatum, not striatal. Include complete strain names, e.g. C57BL/6J not B6.</p> <p>Gene Set Figure Label: B6JvsB6CStriatum</p> <p>Gene Set Description: Indicate which samples were compared. What experimental manipulations or tissue differences are being examined? Indicate statistical methodology, significance thresholds and which changes are reported here. Indicate if uploaded p-value, q-value, effect size or fold change and fold change reference. Example: Striatum gene expression differences between naive C57BL/6J and C57BL/6C substrains corresponding to a 5% FDR. A small number of genes are highly differentially expressed between B6 substrains, C57BL/6J (high alcohol consumption preference) and C57BL/6C (low alcohol consumption preference). Fold expression change are relative to B6/J.</p> <p>Gene Set Contents: Gene identifier and statistical score for differential expression, e.g. p-value, q-value, correlation coefficient, binary score, effect size or fold change.</p>"},{"location":"reference/curation/geneset-type-standards/#type-of-data-published-qtl-candidate-gene-list","title":"Type of Data: Published QTL Candidate Gene List","text":"<p>Gene Set Name: Description (name, Published QT Chr # MGI:#). Example: cocaine related behavior 10 (Cocrb10, Published QTL Chr #)</p> <p>Gene Set Figure Label: (QTL-name-Organism-Chr #). Example: QTL-Cocrb10-Mouse-Chr 9</p> <p>Gene Set Description: QTL Name Definition, candidate gene selection method (e.g. 1.5 LOD drop; inter-marker interval). Exact description of phenotype. Strains used for mapping should be included. Example:                     Rats were subjected to a forced swim test (FST) procedure in which they are placed in water for 5 min, and their behavior was scored every 5 sec as immobility, climbing, or swimming. Data were analyzed for each activity with consideration given to their non-independence. p-value:0.0002, Variance: 3.6, Peak Marker: D5Rat40 (BLAT 16538053) Spans 1-41538053. This interval was obtained by using a fixed interval width of 25 Mbp around the peak marker. Strains were WKY/NHsd and F344/NHsd. Also defined as Imm3.</p> <p>Gene Set Contents: Gene identifier and binary score.</p>"},{"location":"reference/curation/geneset-type-standards/#type-of-data-co-expression-to-phenotype","title":"Type of Data: Co-Expression to Phenotype","text":"<p>Gene Set Name: Describe tissue and phenotype correlated. Example: Cerebellum gene expression correlates of acetic acid writhing behavior in BXD recombinant inbred mice.</p> <p>Gene Set Figure Label: Co-expression writhing</p> <p>Gene Set Description: Indicate what the comparison was that was made and any statistical cut-offs that were used. Example: Cerebellum gene co-expression with acetic acid writhing in BXD RI mice. Gene expression data was obtained from genenetwork.org SJUT Cerebellum mRNA M430 (Mar05) RMA data set. Behavioral phenotype data was collected by RMQ and consisted of the number of writhes in response to 0.6% acetic acid i.p.</p> <p>Gene Set Contents: Gene identifier and statistical score for co-expression. e.g. R-squared, p-value, q-value, binary threshold.</p>"},{"location":"reference/curation/geneset-type-standards/#type-of-data-reference-ontology","title":"Type of Data: Reference Ontology","text":"<p>Gene Set Name: Term # and name. Example: MP:XXXXXXX Abnormal.</p> <p>Gene Set Figure Label: Term #. Example: Term #</p> <p>Gene Set Description: Term Definition. Example: \u201cIncrease in the dose or concentration of a foreign compound required to induce a specific level of response\u201d www.informatics.jax.org, 2010-12-01</p> <p>Gene Set Contents: All gene sets include genes, mutant alleles or gene products annotated to an ontology term by a professional curator. Each gene directly annotated to the term is given a score of 1, each gene connected to a term through annotations to its higher order parents is given a score of 2. To use only direct annotations in an analysis assign a threshold of &lt; 2 to each Gene Set.</p>"},{"location":"reference/curation/geneset-type-standards/#type-of-data-co-expression-clusters","title":"Type of Data: Co-Expression Clusters","text":"<p>Gene Set Name: Co-Expression clusters. Example: Co-expression cluster of nicotine Dependence genes significantly expressed in the adolescent PFC, VS and Hippocampus.</p> <p>Gene Set Figure Label: Abbreviated description. Example: Adolesc Rat Nic Dependence</p> <p>Gene Set Description: Indicate what samples were compared and what was clustered. Example: Studies analyzing brain samples from female rats that had been injected with nicotine at four different ages show that nicotine exerts the greatest influence during adolescence. Using DNA microarrays, gene expression correlates were obtained from the prefrontal cortex (PFC), ventral striatum (VS), and hippocampus. Principal cluster analysis was then used to identify 76 genes that changed significantly in at least one of these three brain regions during the experiment.</p> <p>Gene Set Contents: Gene identifier and statistical score for cluster analysis or binary threshold.</p>"},{"location":"reference/curation/geneset-type-standards/#type-of-data-genome-wide-association-study","title":"Type of Data: Genome Wide Association Study","text":"<p>Gene Set Name: GWAS of ... Example: GWAS of Alcohol and Nicotine Dependence in Australian DNA-Pools.</p> <p>Gene Set Figure Label: Abbreviated description. Example: GWAS Alcohol Nicotine</p> <p>Gene Set Description: List of positional candidate genes after correcting for multiple testing and controlling the false discovery rate from genome wide association study. Represents genes associated with a linked cytological region or genes \u2018near\u2019 an associated SNP. Example: Genome-wide association study identifies a locus at 7p15.2 associated with endometriosis.</p> <p>Gene Set Contents: Gene identifier and binary threshold.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>In this tutorial section, we will explore the various tools and functionalities offered  by Geneweaver.org. Whether you are a biologist, a geneticist, or a bioinformatician,  a software engineer, or studying to become any of the former, this tutorial section will provide you with the necessary knowledge to fully utilize Geneweaver.org in your  research.</p> <p>The documents in this section are focused on providing detailed guidance and instruction for users who are already familiar with the basics of the software. They will cover more advanced features, specific use cases, and best practices for using the tool  effectively. They are usually more in-depth than \"getting started\" sections, and may  include step-by-step instructions, code examples, or other resources to help you  master a particular aspect of the software.</p>"},{"location":"tutorial/creating-new-tools/","title":"Creating new tools","text":"<p>This page describes the process of creating a Geneweaver Analysis Tool that can be  integrated directly with rest of the Geneweaver ecosystem, including the Geneweaver web application.</p> <p>To create a new tools, you will need to write the interface for your tool in Python, and then write the interface for your tool in JavaScript. The Python interface will be used to run your tool locally, and the JavaScript interface will be used to run your tool in the web application.</p> <p>Your analysis tool does not need to be implemented in Python. It can be implemented in any language that can be run in a Docker container. The only requirements are that  your tool must have a public interface implemented in Python, described below, and that  your tool must be available as a Docker image.</p>"},{"location":"tutorial/creating-new-tools/#quick-start","title":"Quick Start","text":""},{"location":"tutorial/creating-new-tools/#python","title":"Python","text":"<p>To create a new tool in Python, you will need to create a new python package. When  creating a new package, make sure to follow the  contributing guide and the development guide.</p> <p>Geneweaver tools use namespaced packages to organize tools and provide a plugin-like interface. The namespace for Geneweaver tools is <code>geneweaver.tools</code>. The name of your tool should be the name of your package, and should be a subpackage of the <code>geneweaver.tools</code> namespace. For example, if your tool is called <code>MyTool</code>, then your package should be named <code>geneweaver.tools.my_tool</code>.</p> Namespaced Packages <p>Namespaced packages are a way to organize and structure Python projects that consist of multiple subpackages or modules. Namespaced packages are created by using a  dotted namespace in the package name. For example, if you want to create a package  called \"mypackage\" that contains subpackages \"foo\" and \"bar\", you could create a  namespaced package called \"mypackage.foo\" and \"mypackage.bar\". </p> <p>For more information, see the PEP 420  specification.</p>"},{"location":"tutorial/creating-new-tools/#python-interface","title":"Python Interface","text":"<p>To implement the python interface, you will need to implement a concrete class that inherits from the <code>geneweaver.tools.framework.AbstractTool</code> class. </p> <p>The <code>AbstractTool</code> class is defined in the <code>geneweaver.tools.framework</code> module, which is the core of the <code>geneweaver-tools</code> package.</p> <p>You will need to install the <code>geneweaver-tools</code> package in order to use the  <code>AbstractTool</code> class. You can install the <code>geneweaver-tools</code> package from PyPI using the following command:</p> PoetryPip <pre><code>$ poetry add geneweaver-tools\n</code></pre> <pre><code>$ pip install geneweaver-tools\n</code></pre>"},{"location":"tutorial/creating-new-tools/#tool-class","title":"Tool Class","text":"<p>The <code>AbstractTool</code> class is actually fairly simple, and only requires you to implement a few methods. Despite it's simplicity, the <code>AbstractTool</code> class provides a lot of  functionality that you can use to make your tool easier to use. Key to this usability is the framework's utilization of the <code>Pydantic</code> package.</p>"},{"location":"tutorial/creating-new-tools/#pydantic","title":"Pydantic","text":"<p>The <code>Pydantic</code> package is a python package that allows you to define data models in python. These data models can be used to validate and serialize data. The <code>AbstractTool</code> class uses the <code>Pydantic</code> package to define the input and output data of your analysis tool. The <code>Pydantic</code> package is also used to define the data models for the <code>geneweaver</code> package, which is used to define the data models for the Geneweaver web application.</p>"},{"location":"tutorial/creating-new-tools/#the-run-method","title":"The Run Method","text":"<p>The <code>AbstractTool</code> class requires you to implement a <code>run</code> method. This method is where you will implement the core functionality of your tool. The <code>run</code> method will be called when your tool is run. </p> <p>The <code>run</code> method takes a single argument <code>tool_input</code>, which is an instance of the  <code>ToolInput</code> class. The <code>ToolInput</code> class is defined in the <code>geneweaver.tools.framework</code> module, and is a subclass of the <code>Pydantic</code> <code>BaseModel</code> class. The <code>ToolInput</code> class is used to define the input data model for your tool.</p> <p>The <code>run</code> method must return an instance of the <code>ToolOutput</code> class. The <code>ToolOutput</code> class is defined in the <code>geneweaver.tools.framework</code> module, and is a subclass of the <code>Pydantic</code> <code>BaseModel</code> class. The <code>ToolOutput</code> class is used to define the output data model for your tool.</p> <p>This means that the abstract method signature for the <code>run</code> method is as follows:</p> <pre><code>@abstractmethod\ndef run(self: AbstractTool, tool_input: ToolInput) -&gt; ToolOutput:\n    \"\"\"Run the tool.\"\"\"\n</code></pre>"},{"location":"tutorial/creating-new-tools/#input-and-output-abstract-properties","title":"Input and Output Abstract Properties","text":"<p>Your tool class must also implement two abstract properties: <code>input</code> and<code>output</code>. These  properties are used to define the input and output data models, and must return the uninstantiated <code>ToolInput</code> and <code>ToolOutput</code> classes, respectively.</p> <p>The abstract method signatures for the <code>input</code> and <code>output</code> properties are as follows:</p> <pre><code>@property\n@abstractmethod\ndef input(self: AbstractTool) -&gt; Type[ToolInput]:\n    \"\"\"Input schema for the tool.\"\"\"\n\n@property\n@abstractmethod\ndef output(self: AbstractTool) -&gt; Type[ToolOutput]:\n    \"\"\"Output schema for the tool.\"\"\" \n</code></pre>"},{"location":"tutorial/creating-new-tools/#overrideable-properties","title":"Overrideable Properties","text":"<p>Your tool class can also implement a few overrideable properties. These properties are used to define the metadata for your tool, and are used to display information about your tool in the Geneweaver web application.</p> <ul> <li><code>tool_name</code>: The name of your tool. This is used to display the name of your tool   in the Geneweaver web application. By default, this is set to the name of your   tool class.</li> <li><code>static_files_location</code>: The location of the static files for your tool. This is   used to load static data like images and CSS files for your tool in the Geneweaver   web application. By default, this is set to the <code>static</code> directory in the same   directory as your tool class.</li> </ul>"},{"location":"tutorial/creating-new-tools/#tool-workflow-definition","title":"Tool Workflow Definition","text":"<p>Scientific Workflows</p> <p>A scientific workflow is a series of interconnected tasks or computational steps  that are designed to solve a specific problem or address a scientific question. Not all analysis tools will need to define a scientific workflow, and for single-step tools, this property can be left undefined as it can be inferred by the Geneweaver web application. </p> <p>However, complex analysis tools are encouraged to define a scientific workflow.</p> <p>Read more about how Geneweaver uses scientific workflows to define analysis tools on the Scientific Workflows reference page.</p> <ul> <li><code>workflow_definition</code>: The workflow definition for your tool. This is used to   define the workflow for your tool in the Geneweaver web application. By default,   this is set to the <code>workflow.nf</code> file in the same directory as your tool class.</li> <li><code>workflow_type</code>: The workflow type for your tool. This is used to define the   workflow type for your tool in the Geneweaver web application. By default, this   is set to <code>WorkflowType.NEXTFLOW</code>. </li> </ul>"},{"location":"tutorial/creating-new-tools/#javascript-interface","title":"JavaScript Interface","text":"<p>Warning</p> <p>This section is still under construction.</p>"},{"location":"tutorial/downloading_geneset_command_line/","title":"Downloading a Geneset From the Command Line","text":"<p>This guide will walk you through how to download a geneset from Geneweaver on the  command line. This can be useful if you want to automate the downloading of genesets from Geneweaver, or if you want to use the geneset data in a local analysis tool, or if you want to access Geneweaver data from somewhere without a web browser.</p>"},{"location":"tutorial/downloading_geneset_command_line/#step-0-install-the-gweave-command-line-tool","title":"Step 0: Install the <code>gweave</code> Command Line Tool","text":""},{"location":"tutorial/downloading_geneset_command_line/#optional-but-recommended","title":"Optional (But Recommended)","text":"<p>Create a virtual environment for the <code>geneweaver-client</code> package. <pre><code>python3 -m venv geneweaver-client\nsource geneweaver-client/bin/activate\n</code></pre></p> <pre><code>pip install geneweaver-client\n</code></pre>"},{"location":"tutorial/downloading_geneset_command_line/#step-1-login-to-geneweaver","title":"Step 1: Login to Geneweaver","text":"<pre><code>gweaver beta auth login --reauth\n</code></pre>"},{"location":"tutorial/downloading_geneset_command_line/#step-2-download-geneset-data","title":"Step 2: Download Geneset Data","text":"<pre><code>gweave -p alpha api genesets get 1234 --gene-id-type=Wormbase\n</code></pre> <p>The <code>-p</code> flag will format the results in a way that is easier to read.</p>"},{"location":"tutorial/downloading_geneset_command_line/#pretty-printing","title":"Pretty Printing","text":"<p>You can save the results to a file by using the <code>&gt;</code> operator. <pre><code>gweave -p alpha api genesets get 1234 --gene-id-type=Wormbase &gt; geneset_123.json\n</code></pre></p>"},{"location":"tutorial/downloading_geneset_command_line/#specifying-gene-id-type","title":"Specifying Gene ID Type","text":"<p>The <code>--gene-id</code> flag is optional. If you do not specify a gene ID type, the default  will be whatever the geneset was originally uploaded as.</p> <p>You can specify any gene ID type that is available in Geneweaver, specifically any of the <code>GeneIdentifier</code> types available in the geneweaver.core.enum module  (<code>geneweaver-core</code> package).</p>"},{"location":"tutorial/downloading_geneset_command_line/#geneidentifier-types","title":"GeneIdentifier Types","text":"<p>Warning</p> <p>The <code>GeneIdentifier</code> types are reproduced here for convenience, but the most  up-to-date list can be found in the <code>geneweaver-core</code> package by using the <code>geneweaver.core.enum.GeneIdentifier</code> class.</p> <ul> <li>\"Entrez\"</li> <li>\"Ensemble Gene\"</li> <li>\"Ensemble Protein\"</li> <li>\"Ensemble Transcript\"</li> <li>\"Unigene\"</li> <li>\"Gene Symbol\"</li> <li>\"Unannotated\"</li> <li>\"MGI\"</li> <li>\"HGNC\"</li> <li>\"RGD\"</li> <li>\"ZFIN\"</li> <li>\"FlyBase\"</li> <li>\"Wormbase\"</li> <li>\"SGD\"</li> <li>\"miRBase\"</li> <li>\"CGNC\"</li> </ul>"},{"location":"tutorial/exploring-data-in-javascript/","title":"Exploring data in javascript","text":"<p>Seeking Contributors!</p> <p>We know this page should exist, but we haven't found the time to write it yet. If you would like to contribute to this page, please see the  git repository.</p>"},{"location":"tutorial/finding-genesets/","title":"Finding Genesets","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install geneweaver-client\n</pre> !pip install geneweaver-client In\u00a0[1]: Copied! <pre>from geneweaver.client.auth import login\n</pre> from geneweaver.client.auth import login In\u00a0[2]: Copied! <pre>login()\n</pre> login() <pre>1. On your computer or mobile device navigate to:  https://geneweaver.auth0.com/activate?user_code=VPPC-FWSQ\n2. Enter the following code:  VPPC-FWSQ\nAuthenticated!\n- Id Token: eyJhbGciOi...\n</pre> In\u00a0[4]: Copied! <pre>from geneweaver.client.auth import get_access_token\n</pre> from geneweaver.client.auth import get_access_token In\u00a0[6]: Copied! <pre>import requests\n</pre> import requests In\u00a0[56]: Copied! <pre>result = requests.get(\n    \"https://geneweaver.jax.org/api/genesets\",\n    params={\n        \"search_text\": \"cancer\",\n        \"curation_tier\": \"Tier I\",\n        \"limit\": 10\n    },\n    headers={\"Authorization\": f\"Bearer {get_access_token()}\"}\n)\nresult.ok\n</pre> result = requests.get(     \"https://geneweaver.jax.org/api/genesets\",     params={         \"search_text\": \"cancer\",         \"curation_tier\": \"Tier I\",         \"limit\": 10     },     headers={\"Authorization\": f\"Bearer {get_access_token()}\"} ) result.ok Out[56]: <pre>True</pre> In\u00a0[57]: Copied! <pre>cancer_genesets = result.json()[\"data\"]\n</pre> cancer_genesets = result.json()[\"data\"] In\u00a0[58]: Copied! <pre>for i in cancer_genesets:\n    print(i[\"name\"])\n</pre> for i in cancer_genesets:     print(i[\"name\"]) <pre>MP:0010337 increased chronic lymphocytic leukemia incidence\nMSigDB Geneset - MORF_ZNF10\nMSigDB Geneset - KRAS.LUNG.BREAST_UP.V1_UP\nMSigDB Geneset - MORF_HDAC2\nMSigDB Geneset - GCM_PTPRD\nGWAS Catalog Data for breast carcinoma in 10,052 European ancestry cases, 12,575 European ancestry controls\nMSigDB Geneset - MORF_TFDP2\nGWAS Catalog Data for response to platinum based chemotherapy, non-small cell lung carcinoma in 327 European ancestry individuals\nMSigDB Geneset - MORF_PML\nMSigDB Geneset - GCM_ERCC4\n</pre> In\u00a0[60]: Copied! <pre>result = requests.get(\n    \"https://geneweaver.jax.org/api/genesets\",\n    params={\n        \"search_text\": \"gwas &amp; cancer\",\n        \"curation_tier\": \"Tier I\",\n        \"limit\": 10\n    },\n    headers={\"Authorization\": f\"Bearer {get_access_token()}\"}\n)\nresult.ok\n</pre> result = requests.get(     \"https://geneweaver.jax.org/api/genesets\",     params={         \"search_text\": \"gwas &amp; cancer\",         \"curation_tier\": \"Tier I\",         \"limit\": 10     },     headers={\"Authorization\": f\"Bearer {get_access_token()}\"} ) result.ok Out[60]: <pre>True</pre> In\u00a0[61]: Copied! <pre>gwas_cancer_genesets = result.json()[\"data\"]\n</pre> gwas_cancer_genesets = result.json()[\"data\"] In\u00a0[62]: Copied! <pre>for i in gwas_cancer_genesets:\n    print(i[\"name\"])\n</pre> for i in gwas_cancer_genesets:     print(i[\"name\"]) <pre>GWAS Catalog Data for breast carcinoma in 10,052 European ancestry cases, 12,575 European ancestry controls\nGWAS Catalog Data for response to platinum based chemotherapy, non-small cell lung carcinoma in 327 European ancestry individuals\nGWAS Catalog Data for lung carcinoma in 2,331 Han Chinese ancestry lung cancer cases, 1,006 Han Chinese ancestry non-cardia gastric cancer cases, 2,031 Han Chinese ancestry esophageal squamous-cell carcinoma cases, 4,006 Han Chinese ancestry controls\nGWAS Catalog Data for lung carcinoma, squamous cell carcinoma, gastric carcinoma in 2,331 Han Chinese ancestry lung cancer cases, 1,006 Han Chinese ancestry non-cardia gastric cancer cases, 2,031 Han Chinese ancestry esophageal squamous-cell carcinoma cases, 4,006 Han Chinese ancestry controls\nGWAS Catalog Data for estrogen-receptor negative breast cancer in 4,939 European ancestry cases, 14,352 European ancestry controls\nGWAS Catalog Data for breast carcinoma in 899 European ancestry cases, 804 European ancestry controls\nGWAS Catalog Data for breast carcinoma in 1,426 European ancestry cases, 1,301 European ancestry controls\nGWAS Catalog Data for ovarian carcinoma in 1,817 European ancestry cases, 2,353 European ancestry controls\nGWAS Catalog Data for breast carcinoma in 1,367 Sardinian cases, 1,658 Sardinian controls\nGWAS Catalog Data for endometrial carcinoma in 4,907 European ancestry cases, 11,945 European ancestry controls\n</pre> In\u00a0[66]: Copied! <pre>for i in gwas_cancer_genesets:\n    print(f\"GS{i['id']} has {i['count']} genes\")\n</pre> for i in gwas_cancer_genesets:     print(f\"GS{i['id']} has {i['count']} genes\") <pre>GS267835 has 98 genes\nGS270261 has 1 genes\nGS268187 has 3 genes\nGS268186 has 3 genes\nGS271027 has 30 genes\nGS269914 has 1 genes\nGS270401 has 7 genes\nGS270122 has 2 genes\nGS267760 has 2 genes\nGS268492 has 8 genes\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/finding-genesets/#dependencies-and-set-up","title":"Dependencies and Set Up\u00b6","text":""},{"location":"tutorial/finding-genesets/#finding-cancer-related-genesets","title":"Finding Cancer Related Genesets\u00b6","text":""},{"location":"tutorial/finding-genesets/#finding-gwas-cancer-related-genesets","title":"Finding GWAS Cancer Related Genesets\u00b6","text":""},{"location":"tutorial/geneweaver_client_login/","title":"Client Login","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install geneweaver-client\n</pre> !pip install geneweaver-client In\u00a0[2]: Copied! <pre>!gweave beta auth --help\n</pre> !gweave beta auth --help <pre>                                                                                                    \n Usage: gweave beta auth [OPTIONS] COMMAND [ARGS]...                                                \n                                                                                                    \n The auth commands allow you to authenticate with the GeneWeaver API.                               \n                                                                                                    \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 login                             Run the device authorization flow.             \u2502\n\u2502 print-access-token                Print the current user's access token.         \u2502\n\u2502 print-identity-token              Print the current user's identity token.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n</pre> In\u00a0[4]: Copied! <pre>!gweave beta auth login\n</pre> !gweave beta auth login <pre>1. On your computer or mobile device navigate to:  https://geneweaver.auth0.com/activate?user_code=PNTH-VVCC\n2. Enter the following code:  PNTH-VVCC\nAuthenticated!\n- Id Token: eyJhbGciOi...\n</pre> In\u00a0[5]: Copied! <pre>!gweave beta auth print-access-token\n</pre> !gweave beta auth print-access-token <pre>eyJhbGciOiJSUzI1...\n</pre> In\u00a0[6]: Copied! <pre>!gweave beta auth print-identity-token\n</pre> !gweave beta auth print-identity-token <pre>eyJhbGciOiJSUzI1...\n</pre> In\u00a0[7]: Copied! <pre>from geneweaver.client.auth import login\n</pre> from geneweaver.client.auth import login In\u00a0[8]: Copied! <pre># Run the login function and follow the link in the output.\n# Confirm that the code matches the output here,\n# then sign-up or login.\nlogin()\n# Wait for the \"Authenticated!\" message, then continue.\n</pre> # Run the login function and follow the link in the output. # Confirm that the code matches the output here, # then sign-up or login. login() # Wait for the \"Authenticated!\" message, then continue. <pre>1. On your computer or mobile device navigate to:  https://geneweaver.auth0.com/activate?user_code=RNPC-MKQJ\n2. Enter the following code:  RNPC-MKQJ\nAuthenticated!\n- Id Token: eyJhbGciOi...\n</pre> In\u00a0[12]: Copied! <pre>from geneweaver.client.auth import get_access_token\n</pre> from geneweaver.client.auth import get_access_token In\u00a0[13]: Copied! <pre>get_access_token()\n</pre> get_access_token() Out[13]: <pre>'eyJhbGciOiJSUzI1N...'</pre>"},{"location":"tutorial/geneweaver_client_login/#client-login","title":"Client Login\u00b6","text":"<p>The following tutorial will demonstrate how to use the Geneweaver Client package to log in to the Geneweaver API. This will allow you to access the Geneweaver API from the command line or from within a Python script.</p> <p>The Geneweaver Client (<code>geneweaver-client</code>) package is available on PyPI and can be installed with pip or poetry. The package provides many useful functions for interacting with Geneweaver from a client context, including utility functions to make authentication simple.</p> <p>This tutorial will demonstrate these utility functions from a Jupyter Notebook, but they can also be used from the command line or from within a Python script.</p>"},{"location":"tutorial/geneweaver_client_login/#install-the-geneweaver-client-package","title":"Install the <code>geneweaver-client</code> package\u00b6","text":""},{"location":"tutorial/geneweaver_client_login/#using-the-command-line-client","title":"Using The Command Line Client\u00b6","text":""},{"location":"tutorial/geneweaver_client_login/#access-help-documentation","title":"Access Help Documentation\u00b6","text":""},{"location":"tutorial/geneweaver_client_login/#login-to-geneweaver","title":"Login To Geneweaver\u00b6","text":""},{"location":"tutorial/geneweaver_client_login/#using-the-python-package","title":"Using The Python Package\u00b6","text":""},{"location":"tutorial/geneweaver_client_login/#login-to-geneweaver","title":"Login To Geneweaver\u00b6","text":""},{"location":"tutorial/map-gene-ids/","title":"Map Gene IDs","text":"In\u00a0[1]: Copied! <pre>import requests\n</pre> import requests In\u00a0[2]: Copied! <pre>with open('gene_names.txt', 'r') as file:\n    file_content = file.read().strip()\n    ids = [id.strip('\"') for id in file_content.split(',')]\n</pre> with open('gene_names.txt', 'r') as file:     file_content = file.read().strip()     ids = [id.strip('\"') for id in file_content.split(',')] In\u00a0[3]: Copied! <pre>len(ids)\n</pre> len(ids) Out[3]: <pre>32285</pre> In\u00a0[4]: Copied! <pre>ids[:5]\n</pre> ids[:5] Out[4]: <pre>['Xkr4', 'Gm1992', 'Gm19938', 'Gm37381', 'Rp1']</pre> In\u00a0[5]: Copied! <pre>payload = {\n    \"source_ids\": ids,\n    \"target_gene_id_type\": \"Ensemble Gene\",\n    \"species\": \"Mus Musculus\"\n}\n</pre> payload = {     \"source_ids\": ids,     \"target_gene_id_type\": \"Ensemble Gene\",     \"species\": \"Mus Musculus\" } <p>The GeneWeaver API uses JSON, so let's specufy that in our request headers.</p> In\u00a0[6]: Copied! <pre>headers = {\n    'accept': 'application/json',\n    'Content-Type': 'application/json'\n}\n</pre> headers = {     'accept': 'application/json',     'Content-Type': 'application/json' } In\u00a0[7]: Copied! <pre>response = requests.post('https://geneweaver.jax.org/api/genes/mapping', json=payload, headers=headers)\n</pre> response = requests.post('https://geneweaver.jax.org/api/genes/mapping', json=payload, headers=headers) In\u00a0[8]: Copied! <pre>mapping = {\n    r[\"original_ref_id\"]: r[\"mapped_ref_id\"]\n    for r in response.json()['gene_ids_map']\n}\n</pre> mapping = {     r[\"original_ref_id\"]: r[\"mapped_ref_id\"]     for r in response.json()['gene_ids_map'] } <p>We can now easily access a list of our mapped IDs.</p> In\u00a0[9]: Copied! <pre>mapped_ids = list(mapping.values())\n</pre> mapped_ids = list(mapping.values()) In\u00a0[10]: Copied! <pre>len(mapped_ids)\n</pre> len(mapped_ids) Out[10]: <pre>32050</pre> In\u00a0[11]: Copied! <pre>mapped_ids[:5]\n</pre> mapped_ids[:5] Out[11]: <pre>['ENSMUSG00000066586',\n 'ENSMUSG00000027596',\n 'ENSMUSG00000030359',\n 'ENSMUSG00000027597',\n 'ENSMUSG00000019986']</pre> <p>And we can see which IDs couldn't be mapped.</p> In\u00a0[12]: Copied! <pre>unmapped_ids = [\n    _id for _id in ids if _id not in mapping\n]\n</pre> unmapped_ids = [     _id for _id in ids if _id not in mapping ]  In\u00a0[13]: Copied! <pre>len(unmapped_ids)\n</pre> len(unmapped_ids) Out[13]: <pre>235</pre> In\u00a0[14]: Copied! <pre>unmapped_ids[:5]\n</pre> unmapped_ids[:5] Out[14]: <pre>['Gm28653', 'Ptp4a1.1', 'Arhgef4.1', 'Asdurf', 'AC169382.1']</pre>"},{"location":"tutorial/map-gene-ids/#map-gene-ids","title":"Map Gene IDs\u00b6","text":"<p>This tutorial will show you how to directly call the GeneWeaver API to map Gene IDs within a species. For this example, we will map Gene Symbols to Ensemble Gene IDs.</p> <p>To get started, you can  </p>"},{"location":"tutorial/map-gene-ids/#initialize-gene-ids","title":"Initialize Gene IDs\u00b6","text":"<p>First, you will need to initalize a list of the Gene IDs you want to map. Here, we load identifiers from a file.</p> <p>After the end of this step you will need to have a list of gene IDs as shown below.</p>"},{"location":"tutorial/map-gene-ids/#call-the-geneweaver-rest-api","title":"Call The GeneWeaver ReST API\u00b6","text":"<p>First we'll construct our ReST call.</p>"},{"location":"tutorial/map-gene-ids/#process-results","title":"Process Results\u00b6","text":"<p>The mapping endpoint will return a dictionary with a list of results available on the <code>gene_ids_map</code> key. Let's process that into a dictionary with the original IDs as keys and te new IDs as values.</p>"},{"location":"tutorial/nci_60_example_01/","title":"NCI-60 Example Workflow","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install geneweaver-client\n</pre> !pip install geneweaver-client In\u00a0[\u00a0]: Copied! <pre>!pip install scikit-learn\n</pre> !pip install scikit-learn In\u00a0[\u00a0]: Copied! <pre>from geneweaver.client.datasets.nci60 import DNACombinedaCGHGeneSummary\n</pre> from geneweaver.client.datasets.nci60 import DNACombinedaCGHGeneSummary In\u00a0[\u00a0]: Copied! <pre># Initializing the dataset will download the required data from nci.nih.gov\nds = DNACombinedaCGHGeneSummary()\n</pre> # Initializing the dataset will download the required data from nci.nih.gov ds = DNACombinedaCGHGeneSummary() In\u00a0[\u00a0]: Copied! <pre># Use the LINKOUT attribute to get a link to the original data download page\nds.LINKOUT\n</pre> # Use the LINKOUT attribute to get a link to the original data download page ds.LINKOUT Out[\u00a0]: <pre>'https://discover.nci.nih.gov/cellminer/loadDownload.do'</pre> In\u00a0[\u00a0]: Copied! <pre>ds.gene_names[:5]\n</pre> ds.gene_names[:5] Out[\u00a0]: <pre>0        C1orf222\n1          WASH7P\n2           OR4F5\n3       LOC729737\n4    LOC100288069\nName: Gene name d, dtype: object</pre> In\u00a0[\u00a0]: Copied! <pre>ds.entrez_ids[:5]\n</pre> ds.entrez_ids[:5] Out[\u00a0]: <pre>0       339457\n1       653635\n2        79501\n3       729737\n4    100288069\nName: Entrez gene id e, dtype: int64</pre> In\u00a0[\u00a0]: Copied! <pre>intensity = ds.intensity.transpose()\n</pre> intensity = ds.intensity.transpose() In\u00a0[\u00a0]: Copied! <pre>intensity[:10]\n</pre> intensity[:10] Out[\u00a0]: 0 1 2 3 4 5 6 7 8 9 ... 23390 23391 23392 23393 23394 23395 23396 23397 23398 23399 BR:MCF7 -0.229 -0.229 -0.229 -0.229 -0.229 -0.229 -0.229 -0.229 -0.229 -0.229 ... 0.054 0.387 -0.245 0.096 0.096 0.037 -0.071 -0.071 -0.149 -0.149 BR:MDA-MB-231 -0.181 -0.181 -0.181 -0.181 -0.181 -0.181 -0.181 -0.181 -0.181 -0.181 ... 0.321 0.305 0.134 -0.253 -0.205 -0.283 -0.213 -0.213 -0.265 -0.214 BR:HS 578T 0.214 0.214 0.214 0.214 0.214 0.214 0.214 0.214 0.214 0.214 ... 0.171 0.191 0.100 0.394 0.394 0.361 0.417 0.417 0.417 0.417 BR:BT-549 0.303 0.303 0.303 0.303 0.303 0.303 0.303 0.303 0.303 0.303 ... 0.178 0.191 -0.100 -0.053 -0.024 -0.077 -0.022 -0.022 -0.022 0.008 BR:T-47D -0.179 -0.179 -0.179 -0.179 -0.179 -0.179 -0.179 -0.179 -0.179 -0.179 ... 0.341 0.341 0.124 -0.232 -0.207 -0.239 -0.205 -0.205 -0.205 -0.205 CNS:SF-268 0.388 0.388 0.388 0.388 0.388 0.388 0.388 0.388 0.388 0.388 ... 0.359 0.388 -0.127 -0.018 -0.018 -0.142 -0.020 -0.020 -0.030 -0.030 CNS:SF-295 -0.029 -0.029 -0.029 -0.029 -0.029 -0.029 -0.029 -0.029 -0.029 -0.029 ... -0.053 -0.018 0.229 0.141 0.141 0.083 0.222 0.154 0.140 0.140 CNS:SF-539 0.363 0.363 0.363 0.363 0.363 0.363 0.363 0.363 0.363 0.363 ... 0.297 0.297 -0.029 0.127 0.127 0.027 0.131 0.131 0.240 0.125 CNS:SNB-19 0.078 0.078 0.078 0.078 0.078 0.078 0.078 0.078 0.078 0.078 ... 0.015 0.033 -0.236 -0.186 -0.186 -0.250 -0.100 -0.156 -0.175 -0.127 CNS:SNB-75 0.295 0.171 0.171 0.171 0.171 0.171 0.171 0.295 0.295 0.295 ... 0.269 0.333 0.417 0.102 0.102 0.107 0.132 0.132 0.108 0.161 <p>10 rows \u00d7 23400 columns</p> In\u00a0[\u00a0]: Copied! <pre>from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n</pre> from sklearn.preprocessing import StandardScaler from sklearn.decomposition import PCA In\u00a0[\u00a0]: Copied! <pre>scaler = StandardScaler()\nintensity_data_scaled = scaler.fit_transform(intensity)\n</pre> scaler = StandardScaler() intensity_data_scaled = scaler.fit_transform(intensity) In\u00a0[\u00a0]: Copied! <pre>pca = PCA()\npr_out = pca.fit_transform(intensity_data_scaled)\n</pre> pca = PCA() pr_out = pca.fit_transform(intensity_data_scaled) In\u00a0[\u00a0]: Copied! <pre>components = pca.components_\n</pre> components = pca.components_ In\u00a0[\u00a0]: Copied! <pre>explained_variance = pca.explained_variance_\n</pre> explained_variance = pca.explained_variance_ In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>def cols(vec):\n    # Create a rainbow color palette for the unique values\n    unique_vals = np.unique(vec)\n    color_palette = plt.cm.rainbow(np.linspace(0, 1, len(unique_vals)))\n\n    # Create a dictionary to map each unique value to a color\n    color_map = {val: color_palette[i] for i, val in enumerate(unique_vals)}\n\n    # Return a list of colors corresponding to the values in vec\n    return [color_map[val] for val in vec]\n\n# Plotting\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))\n\n# 1st plot (Z1 vs Z2)\naxes[0].scatter(pr_out[:, 0], pr_out[:, 1], c=cols(intensity.index), marker='o')\naxes[0].set_xlabel(\"Z1\")\naxes[0].set_ylabel(\"Z2\")\n\n# 2nd plot (Z1 vs Z3)\naxes[1].scatter(pr_out[:, 0], pr_out[:, 2], c=cols(intensity.index), marker='o')\naxes[1].set_xlabel(\"Z1\")\naxes[1].set_ylabel(\"Z3\")\n\nplt.show()\n</pre> def cols(vec):     # Create a rainbow color palette for the unique values     unique_vals = np.unique(vec)     color_palette = plt.cm.rainbow(np.linspace(0, 1, len(unique_vals)))      # Create a dictionary to map each unique value to a color     color_map = {val: color_palette[i] for i, val in enumerate(unique_vals)}      # Return a list of colors corresponding to the values in vec     return [color_map[val] for val in vec]  # Plotting fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))  # 1st plot (Z1 vs Z2) axes[0].scatter(pr_out[:, 0], pr_out[:, 1], c=cols(intensity.index), marker='o') axes[0].set_xlabel(\"Z1\") axes[0].set_ylabel(\"Z2\")  # 2nd plot (Z1 vs Z3) axes[1].scatter(pr_out[:, 0], pr_out[:, 2], c=cols(intensity.index), marker='o') axes[1].set_xlabel(\"Z1\") axes[1].set_ylabel(\"Z3\")  plt.show() In\u00a0[\u00a0]: Copied! <pre>import plotly.io as pio\nimport plotly.express as px\npio.templates.default = \"plotly_white\"\nfor Z in [1,2]:\n    fig = px.scatter(x=pr_out[:, 0], y=pr_out[:, Z], color=intensity.index, width=600)\n    fig.update_layout(xaxis_title='Z1', yaxis_title=f'Z{Z+1}')\n    fig.show()\n</pre> import plotly.io as pio import plotly.express as px pio.templates.default = \"plotly_white\" for Z in [1,2]:     fig = px.scatter(x=pr_out[:, 0], y=pr_out[:, Z], color=intensity.index, width=600)     fig.update_layout(xaxis_title='Z1', yaxis_title=f'Z{Z+1}')     fig.show() In\u00a0[\u00a0]: Copied! <pre>from scipy.spatial.distance import pdist, squareform\nfrom scipy.cluster.hierarchy import linkage, dendrogram, cut_tree\n</pre> from scipy.spatial.distance import pdist, squareform from scipy.cluster.hierarchy import linkage, dendrogram, cut_tree In\u00a0[\u00a0]: Copied! <pre>data_dist = pdist(intensity_data_scaled)\n</pre> data_dist = pdist(intensity_data_scaled) In\u00a0[\u00a0]: Copied! <pre>linkage_matrix = linkage(data_dist, method='complete')\n</pre> linkage_matrix = linkage(data_dist, method='complete') In\u00a0[\u00a0]: Copied! <pre>plt.figure(figsize=(10, 7))\ndendrogram(linkage_matrix, labels=intensity.index.tolist())\nplt.title(\"Complete Linkage\")\nplt.xlabel(\"Cell Line\")\nplt.show()\n</pre> plt.figure(figsize=(10, 7)) dendrogram(linkage_matrix, labels=intensity.index.tolist()) plt.title(\"Complete Linkage\") plt.xlabel(\"Cell Line\") plt.show() <p>From here, we arbitrarily decide to select the top four clusters from the linkage analysis.</p> In\u00a0[\u00a0]: Copied! <pre>hc_clusters = cut_tree(linkage_matrix, n_clusters=4).flatten()\n</pre> hc_clusters = cut_tree(linkage_matrix, n_clusters=4).flatten() In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\n</pre> import pandas as pd In\u00a0[\u00a0]: Copied! <pre>table = pd.crosstab(hc_clusters,\n                    intensity.index.tolist(),\n                    rownames=['clusters'],\n                    colnames=['labels'])\n</pre> table = pd.crosstab(hc_clusters,                     intensity.index.tolist(),                     rownames=['clusters'],                     colnames=['labels'])  In\u00a0[\u00a0]: Copied! <pre>table\n</pre> table Out[\u00a0]: labels BR:BT-549 BR:HS 578T BR:MCF7 BR:MDA-MB-231 BR:T-47D CNS:SF-268 CNS:SF-295 CNS:SF-539 CNS:SNB-19 CNS:SNB-75 ... PR:DU-145 PR:PC-3 RE:786-0 RE:A498 RE:ACHN RE:CAKI-1 RE:RXF 393 RE:SN12C RE:TK-10 RE:UO-31 clusters 0 0 1 1 1 0 0 1 1 1 1 ... 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 1 0 0 0 0 ... 0 1 0 0 0 0 0 1 0 1 <p>4 rows \u00d7 60 columns</p> In\u00a0[\u00a0]: Copied! <pre>def get_columns_in_cluster(cluster_idx):\n  row_values = table.loc[cluster_idx]\n  columns_with_value_1 = row_values[row_values == 1]\n  column_names = columns_with_value_1.index.tolist()\n  return column_names\n</pre> def get_columns_in_cluster(cluster_idx):   row_values = table.loc[cluster_idx]   columns_with_value_1 = row_values[row_values == 1]   column_names = columns_with_value_1.index.tolist()   return column_names In\u00a0[\u00a0]: Copied! <pre>print(len(get_columns_in_cluster(1)))\nprint(len(get_columns_in_cluster(2)))\n</pre> print(len(get_columns_in_cluster(1))) print(len(get_columns_in_cluster(2))) <pre>2\n3\n</pre> In\u00a0[\u00a0]: Copied! <pre>group_1 = ds.intensity.loc[:, get_columns_in_cluster(1)]\ngroup_2 = ds.intensity.loc[:, get_columns_in_cluster(2)]\n</pre> group_1 = ds.intensity.loc[:, get_columns_in_cluster(1)] group_2 = ds.intensity.loc[:, get_columns_in_cluster(2)] In\u00a0[\u00a0]: Copied! <pre>min_intensity = 0.3\ninterest_genes_1 = group_1[group_1.gt(min_intensity).all(axis=1)]\ninterest_genes_2 = group_2[group_2.gt(min_intensity).all(axis=1)]\n</pre> min_intensity = 0.3 interest_genes_1 = group_1[group_1.gt(min_intensity).all(axis=1)] interest_genes_2 = group_2[group_2.gt(min_intensity).all(axis=1)] In\u00a0[\u00a0]: Copied! <pre>interest_genes_1.index = ds.entrez_ids[interest_genes_1.index]\ninterest_genes_2.index = ds.entrez_ids[interest_genes_2.index]\n</pre> interest_genes_1.index = ds.entrez_ids[interest_genes_1.index] interest_genes_2.index = ds.entrez_ids[interest_genes_2.index] In\u00a0[\u00a0]: Copied! <pre>interest_genes_1.index\n</pre> interest_genes_1.index Out[\u00a0]: <pre>Int64Index([     3158,     83998,    343505,     11085,      4853,    653820,\n               337875,      2210,    647121, 100874392,\n            ...\n                26953,     90865,     89882,    115426,      2731,         0,\n                    0,         0,         0,         0],\n           dtype='int64', name='Entrez gene id e', length=268)</pre> In\u00a0[\u00a0]: Copied! <pre>interest_genes_1\n</pre> interest_genes_1 Out[\u00a0]: BR:BT-549 OV:OVCAR-4 Entrez gene id e 3158 0.323 0.370 83998 0.323 0.370 343505 0.323 0.370 11085 0.323 0.370 4853 0.323 0.370 ... ... ... 0 0.323 0.370 0 0.617 0.550 0 0.626 0.565 0 0.626 0.565 0 0.681 0.681 <p>268 rows \u00d7 2 columns</p> In\u00a0[\u00a0]: Copied! <pre># Remove Rows Without a Gene Identifier\ninterest_genes_1 = interest_genes_1.drop(0, errors=\"ignore\")\ninterest_genes_2 = interest_genes_2.drop(0, errors=\"ignore\")\n</pre> # Remove Rows Without a Gene Identifier interest_genes_1 = interest_genes_1.drop(0, errors=\"ignore\") interest_genes_2 = interest_genes_2.drop(0, errors=\"ignore\") In\u00a0[\u00a0]: Copied! <pre>interest_genes_1\n</pre> interest_genes_1 Out[\u00a0]: BR:BT-549 OV:OVCAR-4 Entrez gene id e 3158 0.323 0.370 83998 0.323 0.370 343505 0.323 0.370 11085 0.323 0.370 4853 0.323 0.370 ... ... ... 26953 0.432 0.308 90865 0.432 0.308 89882 0.432 0.308 115426 0.432 0.308 2731 0.432 0.308 <p>263 rows \u00d7 2 columns</p> In\u00a0[\u00a0]: Copied! <pre>!pip install geneweaver-boolean-algebra\n</pre> !pip install geneweaver-boolean-algebra In\u00a0[\u00a0]: Copied! <pre>from geneweaver.tools.boolean_algebra import (\n    BooleanAlgebra,\n    BooleanAlgebraType,\n    BooleanAlgebraInput\n)\nfrom geneweaver.core.schema.gene import GeneValue\nfrom geneweaver.core import parse\nboolean = BooleanAlgebra()\n</pre> from geneweaver.tools.boolean_algebra import (     BooleanAlgebra,     BooleanAlgebraType,     BooleanAlgebraInput ) from geneweaver.core.schema.gene import GeneValue from geneweaver.core import parse boolean = BooleanAlgebra() In\u00a0[\u00a0]: Copied! <pre>gene_values_1 = parse.iterable.to_gene_value_list_binary(interest_genes_1.index)\ngene_values_2 = parse.iterable.to_gene_value_list_binary(interest_genes_2.index)\n</pre> gene_values_1 = parse.iterable.to_gene_value_list_binary(interest_genes_1.index) gene_values_2 = parse.iterable.to_gene_value_list_binary(interest_genes_2.index) In\u00a0[\u00a0]: Copied! <pre>result = boolean.run(BooleanAlgebraInput(\n    type=BooleanAlgebraType.INTERSECTION,\n    input_genesets=[gene_values_1, gene_values_2]\n))\n</pre> result = boolean.run(BooleanAlgebraInput(     type=BooleanAlgebraType.INTERSECTION,     input_genesets=[gene_values_1, gene_values_2] )) In\u00a0[\u00a0]: Copied! <pre>geneset_values = list(result.result[(0,1)])\n</pre> geneset_values = list(result.result[(0,1)]) In\u00a0[\u00a0]: Copied! <pre># Import the login and acces token functions.\nfrom geneweaver.client.auth import login, get_access_token\n</pre> # Import the login and acces token functions. from geneweaver.client.auth import login, get_access_token In\u00a0[\u00a0]: Copied! <pre># Run the login function and follow the link in the output.\n# Confirm that the code matches the output here,\n# then sign-up or login.\nlogin()\n# Wait for the \"Authenticated!\" message, then continue.\n</pre> # Run the login function and follow the link in the output. # Confirm that the code matches the output here, # then sign-up or login. login() # Wait for the \"Authenticated!\" message, then continue. <pre>1. On your computer or mobile device navigate to:  https://geneweaver.auth0.com/activate?user_code=CZDN-QSMN\n2. Enter the following code:  CZDN-QSMN\nAuthenticated!\n- Id Token: eyJhbGciOi...\n</pre> In\u00a0[\u00a0]: Copied! <pre>from geneweaver.core.schema.gene import GeneValue\nfrom geneweaver.core.schema.geneset import GenesetUpload\nfrom geneweaver.core.enum import GenesetScoreType, GenesetAccess\n</pre> from geneweaver.core.schema.gene import GeneValue from geneweaver.core.schema.geneset import GenesetUpload from geneweaver.core.enum import GenesetScoreType, GenesetAccess In\u00a0[\u00a0]: Copied! <pre># Create a GenesetUpload object\ngeneset = GenesetUpload(\n    name=\"My NCI-60 Dataset\",\n    label=\"\",\n    score_type=GenesetScoreType.BINARY,\n    description=\"A dataset I created from the NCI-60 Cancer Data.\",\n    pubmed_id=None,\n    access=GenesetAccess.PRIVATE,\n    species='human',\n    gene_identifier='entrez',\n    gene_list=geneset_values\n)\n</pre> # Create a GenesetUpload object geneset = GenesetUpload(     name=\"My NCI-60 Dataset\",     label=\"\",     score_type=GenesetScoreType.BINARY,     description=\"A dataset I created from the NCI-60 Cancer Data.\",     pubmed_id=None,     access=GenesetAccess.PRIVATE,     species='human',     gene_identifier='entrez',     gene_list=geneset_values ) In\u00a0[\u00a0]: Copied! <pre>from geneweaver.client.api.v3 import genesets as geneset_api\n</pre> from geneweaver.client.api.v3 import genesets as geneset_api In\u00a0[\u00a0]: Copied! <pre># After logging in, the get_access_token() function will retrieve an\n# API token for you to use\n#\n# geneset_id = geneset_api.upload(get_access_token(), geneset)\n#\n# Except this API is currently under construction, so we'll need to use\n# the web interface\n</pre> # After logging in, the get_access_token() function will retrieve an # API token for you to use # # geneset_id = geneset_api.upload(get_access_token(), geneset) # # Except this API is currently under construction, so we'll need to use # the web interface In\u00a0[\u00a0]: Copied! <pre>from geneweaver.core.render.gene_list import gene_list_str\n</pre> from geneweaver.core.render.gene_list import gene_list_str <p>Once you run the function below, copy the output and the head over to https://geneweaver.org/.</p> In\u00a0[\u00a0]: Copied! <pre>gene_list_str(geneset_values)\n</pre> gene_list_str(geneset_values) Out[\u00a0]: <pre>'54108\\t1.0\\n100616268\\t1.0\\n79943\\t1.0\\n2738\\t1.0\\n7564\\t1.0\\n54742\\t1.0\\n100616318\\t1.0\\n81858\\t1.0\\n727957\\t1.0\\n286077\\t1.0\\n575\\t1.0\\n375686\\t1.0\\n8581\\t1.0\\n8928\\t1.0\\n286076\\t1.0\\n203062\\t1.0\\n4062\\t1.0\\n23144\\t1.0\\n113655\\t1.0\\n619434\\t1.0\\n441381\\t1.0\\n100126338\\t1.0\\n79581\\t1.0\\n26233\\t1.0\\n642658\\t1.0\\n6132\\t1.0\\n54512\\t1.0\\n203054\\t1.0\\n2765\\t1.0\\n23237\\t1.0\\n100129885\\t1.0\\n80778\\t1.0\\n66004\\t1.0\\n286122\\t1.0\\n225689\\t1.0\\n100288181\\t1.0\\n116447\\t1.0\\n80728\\t1.0\\n84875\\t1.0\\n286102\\t1.0\\n5339\\t1.0\\n84988\\t1.0\\n9831\\t1.0\\n26873\\t1.0\\n29894\\t1.0\\n22827\\t1.0\\n4796\\t1.0\\n100130274\\t1.0\\n23513\\t1.0\\n1537\\t1.0\\n5747\\t1.0\\n1584\\t1.0\\n78998\\t1.0\\n1585\\t1.0\\n9684\\t1.0\\n65265\\t1.0\\n11156\\t1.0\\n8733\\t1.0\\n286075\\t1.0\\n340393\\t1.0\\n1936\\t1.0\\n7264\\t1.0\\n3297\\t1.0\\n83481\\t1.0\\n114822\\t1.0\\n51337\\t1.0\\n731779\\t1.0\\n83696\\t1.0\\n9401\\t1.0\\n286101\\t1.0\\n137797\\t1.0\\n57210\\t1.0\\n58500\\t1.0\\n22898\\t1.0\\n93100\\t1.0\\n90990\\t1.0\\n51236\\t1.0\\n100126351\\t1.0\\n100133669\\t1.0\\n338328\\t1.0\\n8629\\t1.0\\n8694\\t1.0\\n2907\\t1.0\\n100302196\\t1.0\\n50626\\t1.0\\n90987\\t1.0\\n340385\\t1.0\\n7553\\t1.0\\n414919\\t1.0\\n28991\\t1.0\\n84232\\t1.0\\n286128\\t1.0\\n55630\\t1.0\\n84948\\t1.0\\n389692\\t1.0\\n4061\\t1.0\\n57152\\t1.0\\n724031\\t1.0\\n27161\\t1.0\\n642475\\t1.0\\n23246\\t1.0\\n389690\\t1.0\\n2843\\t1.0\\n340390\\t1.0\\n51160\\t1.0\\n286103\\t1.0\\n2875\\t1.0\\n340371\\t1.0\\n8000\\t1.0\\n65263\\t1.0\\n79792\\t1.0\\n83482\\t1.0'</pre>"},{"location":"tutorial/nci_60_example_01/#overview","title":"Overview\u00b6","text":"<p>This tutorial demonstrates how Geneweaver's tools can play a part in data science workflows relating to finding and organizing genomic data.</p> <p>The workflow demonstrated here loosely follows the statiscal workflow presented in section 12.5.4 in An Introduction to Statistical Learning with Applications in R (ISLR).</p> <p>To get started, you can  </p>"},{"location":"tutorial/nci_60_example_01/#install-required-packages","title":"Install Required Packages\u00b6","text":"<p>This tutorial depends on the <code>geneweaver-client</code> library, as well as <code>scikit-learn</code>, <code>matplotlib</code>, and <code>scipy</code>. Installing <code>geneweaver-client</code> will also install the <code>pandas</code> and <code>numpy</code> packages.</p> <p>If you are running this in Google CoLab, <code>matplotlib</code> and <code>scipy</code> should be pre-installed.</p> <p>If you have already downloaded <code>geneweaver-client</code>, you will need to make sure you have version <code>0.2.0a0</code> or higher.</p>"},{"location":"tutorial/nci_60_example_01/#initialize-the-example-dataset","title":"Initialize the Example Dataset\u00b6","text":"<p>The <code>geneweaver-client</code> package comes with example datasets to help you get started. This tutorial will use a dataset from NCI-60 cancer dataset so as to align with the exercises found in Chapter 12.5.4 in An Introduction to Statistical Learning (ISLR).</p>"},{"location":"tutorial/nci_60_example_01/#explore-the-dataset","title":"Explore The Dataset\u00b6","text":""},{"location":"tutorial/nci_60_example_01/#gene-identifiers","title":"Gene Identifiers\u00b6","text":"<p>This dataset comes with both gene symbols and entrez ids as possible identifiers.</p>"},{"location":"tutorial/nci_60_example_01/#intensity-values","title":"Intensity Values\u00b6","text":"<p>Following along with Chapter 12.5.4 in An Introduction to Statistical Learning, we can get the intensity values for the NCI-60 dataset.</p> <p>This roughly matches the <code>nci.data &lt;- NCI60$data</code> code in the ISLR text.</p>"},{"location":"tutorial/nci_60_example_01/#find-data-of-interest","title":"Find Data of Interest\u00b6","text":""},{"location":"tutorial/nci_60_example_01/#principal-components-analysis","title":"Principal Components Analysis\u00b6","text":"<p>First, let's reproduce the Principal Component Analysis as performed in An Introduction to Statistical Learning.</p>"},{"location":"tutorial/nci_60_example_01/#projection-plots","title":"Projection Plots\u00b6","text":"<p>We reproduce here, in python, the projections of the NCI60 cancer cell lines onto the frst three principal components.</p> <p>This roughly matches the R code in the ISLR text:</p> <pre><code>&gt; Cols &lt;- function(vec) {\n+ cols &lt;- rainbow(length(unique(vec)))\n+ return(cols[as.numeric(as.factor(vec))])\n+ }\n&gt; par(mfrow = c(1, 2))\n&gt; plot(pr.out$x[, 1:2], col = Cols(nci.labs), pch = 19,\nxlab = \"Z1\", ylab = \"Z2\")\n&gt; plot(pr.out$x[, c(1, 3)], col = Cols(nci.labs), pch = 19,\nxlab = \"Z1\", ylab = \"Z3\")\n</code></pre>"},{"location":"tutorial/nci_60_example_01/#projection-plots-with-plotly","title":"Projection Plots with Plotly\u00b6","text":"<p>We can also use the Plotly library to easily get interactive plots. Even though these plots are fully interactive, they actually require less code than in our previous example.</p>"},{"location":"tutorial/nci_60_example_01/#clustering-linkage","title":"Clustering &amp; Linkage\u00b6","text":"<p>We can use Scipy to perform heirarchical clustering in the same way it's presented in ISLR.</p>"},{"location":"tutorial/nci_60_example_01/#filter-the-dataset","title":"Filter The Dataset\u00b6","text":"<p>Now that we've clustered the data by cell line, we can go back and filter our original dataset to just our cluster of interest. Here we select the second (index <code>1</code>) and third (index <code>2</code>) cluster  for simplicity, since we know that they contain two and three cell lines respectively.</p>"},{"location":"tutorial/nci_60_example_01/#filter-to-columns-of-interest","title":"Filter to Columns of Interest\u00b6","text":"<p>Using the cell line labels from our earlier clustering, we can filter the intensity values to include just the cell lines of interest (columns).</p>"},{"location":"tutorial/nci_60_example_01/#filter-to-rows-of-interest","title":"Filter to Rows of Interest\u00b6","text":"<p>We can also filter out rows (genes) that don't meet an intensity threshold, or some other criteria. Here we remove any row where each cell line doesn't have an intensity of at least 0.3.</p>"},{"location":"tutorial/nci_60_example_01/#label-the-gene-identifiers","title":"Label The Gene Identifiers\u00b6","text":"<p>We know that we would like to use Entrez IDs as out gene identifiers, so we add those as labels to our rows.</p> <p>We could also use the gene symbols here if that were our preference, we would just replace <code>ds.entrez_ids</code> with <code>ds.gene_names</code>.</p>"},{"location":"tutorial/nci_60_example_01/#remove-rows-without-identifiers","title":"Remove Rows Without Identifiers\u00b6","text":"<p>Some of the NCI-60 rows don't have identifiers, which are required for use with Geneweaver, so we remove these now.</p>"},{"location":"tutorial/nci_60_example_01/#run-a-genweaver-tool-locally","title":"Run a Genweaver Tool Locally\u00b6","text":"<p>Geneweaver provides a number of analysis tools that can be run through the website, but you may want to use one to preprocess your dataset before uploading it.</p> <p>We will use Geneweaver's Boolean Algebra tool to find an interesting intersection between two clusters.</p> <p>First, let's install the Geneweaver Boolean Algebra tool.</p>"},{"location":"tutorial/nci_60_example_01/#upload-data-to-geneweaver","title":"Upload Data to Geneweaver\u00b6","text":"<p>Now that we've identified genes of interest, we can upload them to Geneweaver. This will allow us to explore how our data relates to data in both in the Geneweaver application and in related resources, will allow us to use Geneweaver's integrated toolsets, and provides us an easy way to save, track and organize our data for later use.</p> <p>First, let's login so that the application can keep track of our work for us. The <code>geneweaver-client</code> package can help us with this process, even if we've don't have an account yet.</p>"},{"location":"tutorial/nci_60_example_01/#manually-upload-the-geneset","title":"Manually Upload the Geneset\u00b6","text":"<p>To manually upload the geneset, we will render the values we have into a string that can be entered on Geneweaver's Uplaod Geneset page.</p>"},{"location":"tutorial/nci_60_example_01/#geneweaverorg-instructions","title":"Geneweaver.org Instructions\u00b6","text":"<ol> <li><p>You will need to login if you haven't already.</p> </li> <li><p>Head over to the \"Upload GeneSet\" page, found in the \"Magage GeneSets\" menu on the top right of the page.</p> </li> <li><p>Once there, fill out the form, and remember that we're dealing with data from human beings (aka \"Homo Sapiens\"), and decided ealier to use the \"Entrez\" as our Gene Identifier type.</p> <ul> <li>If you instead used the \"gene_names\" attribute of the dataset, you would select \"Gene Symbol\" as your Gene Identifiers type.</li> </ul> </li> <li><p>Finally, paste the string value from the gene_list_str function we ran above, and click the \"Review GeneSet Upload\" to submit the dataset to Geneweaver for processing.</p> </li> </ol>"},{"location":"tutorial/nci_60_example_01/#acknowledgements","title":"Acknowledgements\u00b6","text":"<p>Thank you to Elissa Chesler and the entire Geneweaver.org team, The Jackson Laboratory, and Dr. Philip Bogden and Dr. Alan Jamieson of The Roux Institute. This work would not have been possible without you.</p> <p>The wonderful Plotly code was contributed by Jane Adams of Northeastern University, many thanks.</p>"},{"location":"tutorial/running-a-local-database/","title":"Running a local database","text":"<p>Geneweaver provides a subset of the data in the GeneWeaver database to make development against the database easier. The data in the local database is a subset of the data in the GeneWeaver web application database. </p> <p>Out Of Date</p> <p>The database behind the geneweaver web application is updated regularly to stay in sync with external data sources. </p> <p>While local database is updated periodically to reflect these changes, it should be expected that the local database is significantly out of date with respect to  the web application database.</p> <p>You should also not expect any regularity in the frequency of updates to the local database, as is expected with the web application database.</p>"},{"location":"tutorial/running-a-local-database/#postgresql-rdbms","title":"PostgreSQL RDBMS","text":"<p>The Geneweaver database is designed to be run on the  PostgreSQL RDBMS. You will need to install PostgreSQL version 11 to run the database. The Geneweaver team is experimenting with higher  versions of PostgreSQL, but we have not yet verified compatability with versions higher  than 11.</p> <p>Postgress.app</p> <p>If you are developing on MacOS, you can use Postgres.app to install PostgreSQL, just make sure to download a version that includes  PostgreSQL 11.</p>"},{"location":"tutorial/running-a-local-database/#postgresql-setup","title":"PostgreSQL Setup","text":"<p>You will need to create an empty database for the Geneweaver database. You can do this using the <code>createdb</code> command line tool that comes with PostgreSQL. </p> <pre><code>createdb geneweaver\n</code></pre> <p>Optionally, you can also set up users and permissions for the database. For example, if you want to create a user named <code>geneweaver</code> with access to the <code>geneweaver</code>  database, you can do the following:</p> <pre><code>createuser -P geneweaver\ncreatedb -O geneweaver geneweaver\n</code></pre>"},{"location":"tutorial/running-a-local-database/#downloads","title":"Downloads","text":"<p>The database is available as a schema only, or as both schema and data. Most users will want to download the schema and data, but if you are only interested in the schema, you can download that separately.</p> Schema &amp; DataSchema Only <p>The schema &amp; data download is available as a single file, <code>geneweaver.sql</code>.</p> <p>You can either download the file directly from  this link, or you can use the <code>wget</code> or <code>curl</code> command line tool to download the file.</p> wgetcurl <pre><code>wget https://storage.googleapis.com/gwdb-public/geneweaver.sql\n</code></pre> <p>```commandline curl -O https://storage.googleapis.com/gwdb-public/geneweaver.sql</p> <p>The schema only download is available as a single file, <code>geneweaver-schema.sql</code>.</p> <p>You can either download the file directly from  this link, or you can use the <code>wget</code> or <code>curl</code> command line tool to download the file.</p> wgetcurl <pre><code>wget https://storage.googleapis.com/gwdb-public/geneweaver-schema.sql\n</code></pre> <pre><code>curl -O https://storage.googleapis.com/gwdb-public/geneweaver-schema.sql\n</code></pre>"},{"location":"tutorial/running-a-local-database/#installation","title":"Installation","text":"<p>Once you have downloaded the database, you can install it using the <code>psql</code> command line tool that comes with PostgreSQL. Make sure that you specify the name of the database that you created in the steps above.</p> Schema &amp; DataSchema Only <pre><code>psql -d geneweaver -f geneweaver.sql\n</code></pre> <pre><code>psql -d geneweaver -f geneweaver-schema.sql\n</code></pre>"},{"location":"tutorial/running-a-local-database/#verification","title":"Verification","text":"<p>First, log into the database using the <code>psql</code> command line tool. If you set up a specifc user for the database, you will need to specify the user name and password when logging in.</p> <pre><code>psql -d geneweaver\n</code></pre> <p>You can verify that the database was installed correctly by running the following query:</p> <pre><code>SELECT COUNT(*) FROM gene;\n</code></pre>"},{"location":"tutorial/testing-new-tools/","title":"Testing new tools","text":"<p>Seeking Contributors!</p> <p>We know this page should exist, but we haven't found the time to write it yet. If you would like to contribute to this page, please see the  git repository.</p>"},{"location":"web-application/batch-upload/","title":"Batch Gene Set Upload","text":"<p>If you have many gene sets to upload, for example, the results of a clustering analysis, use the bulk upload form. An example of a bulk upload file is provided. Contact the GeneWeaver team for assistance with very large batch submissions and integration of large scale data resources.</p> <p>On the navigation bar, under \"Manage GeneSets\" select \"Upload Batch GeneSets\".</p> <p></p> <p>This page requires that a group is selected to curate the genesets. A private group can be used if the data will not become public. To learn why curation is necessary and how to curate go here.</p> <p>A sample upload file that includes the formatting rules is displayed on the page and a sample file may also be opened by clicking on the \"Sample File\" link.</p> <p>When your file is prepared, click on \"Batch Upload File\" to select it. Then click on \" Review GeneSet Upload\" to start the upload process.</p> <p>When completec, review the results of the upload and add annotations. See gene set details. To use your new gene  set in analyses, you must add it to projects.</p>"},{"location":"web-application/notifications/","title":"Notifications","text":"<p>Notifications are the mechanism GeneWeaver uses to send messages within the application. There is also an option to receive email for notifications, which can be controlled from the Account Settings page.</p> <p></p> <p></p> <p>Regardless of whether a user has been configured to receive emails, they will always receive messages through the Notifications page. The fact that you have pending notifications will be noted in the menu bar by a red indicator over the envelope icon.</p> <p></p> <p>The Notifications page itself is fairly straight forward listing the notifications that have not yet been seen in bold, and the rest of the notifications in normal font. There is a button at the bottom of the page that allows you to Load More Notifications  so that you can get your full history of notifications.</p> <p></p>"},{"location":"web-application/projects/","title":"Projects","text":"<p>You must add a gene set to a project in order to be able to select it for analysis. Projects consist of one or more gene sets. A gene set may be in many projects. A project may be associated with private and/or public groups.</p> <p>Projects can be created or selected in several places:</p> <ul> <li>Immediately after uploading a gene set</li> <li>Search results page</li> <li>My Projects page</li> <li>My GeneSets page</li> </ul> <p></p> <p>When using the My GeneSets page, click on each desired GeneSet, which is then highlighted. Then click the Add to Project button.</p>"},{"location":"web-application/projects/#my-projects-page","title":"My Projects Page","text":"<p>You can get to the My Projects Page from the navigation bar or footer (under Manage GeneSets) or from the icon in the center of the home page.</p> <p></p> <p>Use the search box to limit the list of projects by entering text that is included in the project name(s).</p> <p>Use the + on the left side of the project to show all its Gene Sets. Use the + on the right side of the Gene Set to see its figure label, description, and authors.</p> <p></p> <p>On this page you can use the action buttons on the right side of the page to:</p>"},{"location":"web-application/projects/#delete-projects","title":"Delete Projects","text":""},{"location":"web-application/projects/#remove-gene-sets-from-a-project","title":"Remove Gene Sets from a Project","text":""},{"location":"web-application/projects/#create-a-new-project","title":"Create a new Project","text":""},{"location":"web-application/projects/#add-gene-sets-to-another-project","title":"Add Gene Sets to Another Project","text":""},{"location":"web-application/projects/#export-to-omicssoft","title":"Export to OmicsSoft","text":"<p>The projects are listed in table rows that show each project's name, size (number of Gene Sets), and creation date. There are several icons that can be used for specific functions:</p>"},{"location":"web-application/projects/#expandcontract-the-projects-list-of-gene-sets","title":"Expand/Contract the Project's List of Gene Sets","text":""},{"location":"web-application/projects/#edit-the-project-name","title":"Edit the Project Name","text":"<p>Clicking on the pencil icon will open the Edit Project Name dialog box.</p> <p></p>"},{"location":"web-application/projects/#share-a-project-with-a-group","title":"Share a Project with a Group","text":"<p>Clicking this icon will open the Share dialog box where you can select multiple groups.</p> <p></p>"},{"location":"web-application/projects/#view-groups-the-project-is-shared-with","title":"View Groups the Project is Shared With","text":""},{"location":"web-application/projects/#the-star-icon-is-used-to-mark-rows-of-special-interest","title":"The Star Icon is used to Mark Rows of Special Interest","text":"<p>Each Gene Set row includes icons for these functions:</p> <p></p> <ul> <li>Add Gene Set to Projects (folder icon)</li> <li>Remove Gene Set from Project (trash icon)</li> <li>More Information (+ / -)</li> </ul> <p>Clicking the link on the Gene Set name will take you to the Gene Set Details  page.</p>"},{"location":"web-application/projects/#next-steps","title":"Next Steps","text":"<p>Once you have your project(s) in order, go to the Analysis page.</p>"},{"location":"web-application/uploading-genesets/","title":"Uploading Gene Sets","text":"<p>To compare individual user generated gene sets among a collection or to the large database of publicly available sets of genes, gene sets must first be uploaded and added to analysis projects. Registered users can log in and  upload single gene sets or make use of the  Batch Gene Set Upload process. If you have questions about what metadata to enter, see the General Definitions page and the Standards for Common Gene Set Types.</p>"},{"location":"web-application/uploading-genesets/#upload-a-single-gene-set","title":"Upload a Single Gene Set","text":"<ol> <li> <p>On the Navigation bar, open the Manage GeneSets Menu and select \"Upload GeneSet\".</p> </li> <li> <p>Fill in the descriptive metacontent fields with a GeneSet name that would be    interpretable to a general user of GeneWeaver, following    our curation standards and suggestions. A short    figure label is used to readily identify this gene set in visualization. Select a    score type used to associate genes with the list, e.g. a p-value, q-value,    correlation coefficient, effect size or binary association. The GeneSet description    field should be used to provide detailed information about how the genes were    associated with the list, including experimental and analysis information, rules for    inclusion, and source information if the gene set comes from a publication or other    data resource.</p> </li> <li> <p>Choose Access permissions for your gene set. First, use the pulldown menu to select    whether this is a public gene set available to any GeneWeaver user, or a private gene    set available only to you or your groups. Next, if the set is private, use the list    to select the groups that may access the gene set in database searches and analyses.</p> </li> <li> <p>Provide publication information. If a PubMed ID is available, enter it and click the    arrows. The publication information will be automatically imported. If the    publication is pending, or the gene set is not associated with a publication you may    enter a working title, authors and abstract information.</p> </li> <li> <p>Choose the species and identifier used in your gene list. It is beneficial to use an    identifier that best reflects the measured genomic feature on your list. For example,    in a microarray experiment, use the specific probe ids from the microarray, and in a    transcriptome alignment from RNA seq, use the transcript ID. Gene symbols are    frequently updated and are sometimes not unique. Once the gene set is in GeneWeaver    it is straightforward to display the gene symbols that best match the ids used in the    upload step.</p> </li> <li> <p>Type values, paste them in or select a file containing your gene list and scores by    clicking on \"Switch to File Upload\". Format your input as two column tab-delimited    text. For short gene sets, you may copy and paste a selection into the upload form.    For larger gene sets, you can prepare a separate text file for upload.</p> </li> </ol> <p></p> <p></p> <ol> <li> <p>Click \"Review GeneSet Upload\".</p> </li> <li> <p>Note that if any genes are entered incorrectly they will not be added, only those    that use a valid gene identifier will be included.</p> </li> <li> <p>Review results of the upload and add annotations.    See gene set details. To use your new gene set in analyses,    you must add it to projects. </p> </li> </ol>"},{"location":"web-application/user-registration/","title":"User Registration and Single Sign-On","text":"<p>GeneWeaver is transitioning to a new login procedure that will allow the use of Single Sign-On (SSO) and eliminate needing a GeneWeaver specific password.</p> <p>OAuth is an open standard for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. </p> <p>OAuth is being used as part of Single Sign-On (SSO), an identification system that allows websites to use other, trusted sites to verify users. This frees businesses from the need to hold passwords in their databases, cuts down on login troubleshooting, and decreases the damage a hack can cause. SSO systems work sort of like ID cards.</p> <p>Below is the new login page:</p> <p></p>"},{"location":"web-application/user-registration/#logging-in-or-registering-if-you-are-not-a-jackson-laboratory-user","title":"Logging in or registering if you are not a Jackson Laboratory user","text":"<p>Over time we will be adding the ability to use SSO for users that do not have a Jackson Laboratory email. Until then, continue to log in or register using your current email and GeneWeaver specific password.</p>"},{"location":"web-application/user-registration/#logging-in-or-registering-with-sso","title":"Logging in or registering with SSO","text":"<p>Existing user accounts with a Jackson Laboratory email have already been migrated to the new system. </p> <p>Instead of using your previous email address and password, select \u201cContinue with Jax Credentials\u201d. </p> <p>Note that if you are unable to use SSO credentials, your previous GeneWeaver email and password will still work for logging in.</p> <p>This example will continue using Jax Single Sign-On.</p> <p></p> <p>Select your account.</p> <p></p> <p>Enter your password. For internal Jax users, Jax SSO uses your domain password.</p> <p></p> <p>Success brings you to the GeneWeaver home page. Note your name is displayed on the menu bar.</p> <p></p> <p>Now that you are using SSO, your previous GeneWeaver password will no longer work.</p> <ul> <li>Always use the SSO method. </li> <li>Do not try to use the GeneWeaver account settings page to change your password. </li> <li>Do not use the GeneWeaver reset password page to change your password.</li> </ul> <p>To logout use the same menu choice as before.</p> <p></p>"},{"location":"web-application/user-registration/#im-confused-why-is-there-an-oauth-and-auth0","title":"I\u2019m confused, why is there an OAuth and Auth0?","text":"<p>OAuth 2.0 is a standardized authorization protocol, Auth0 is a company that sells an identity management platform with authentication and authorization services that implements the OAuth2 protocol (among others).</p>"},{"location":"web-application/users-and-groups/","title":"Users and Groups","text":"<p>GeneWeaver is available without registration to enable all users to search the database and analyze gene sets. Registered users can access several additional features including long-term storage of gene sets, projects and results. Registered users can also form  groups, designate administrators and share gene sets, projects and results to the  members of their user group.</p>"},{"location":"web-application/users-and-groups/#guest-user","title":"Guest User","text":"<p>If you prefer to not register, you will become a guest user by doing a search, selecting some gene sets and adding them to a new project. This project can be used by the analysis tools but will not persist beyond 24 hours.</p>"},{"location":"web-application/users-and-groups/#registration","title":"Registration","text":"<p>All pages contain a navigation bar at the top. In the right hand corner, click on \" Welcome Guest\" and select \"Create Account\". The only information needed is your name, email and a password. Jackson Laboratory users should use \"Continue with Jax Credentials\" (Single Sign-On). Other SSO log in options will be added in the future.</p>"},{"location":"web-application/users-and-groups/#accounts-page","title":"Accounts Page","text":"<p>Once registered, use the Welcome drop-down to log in. A logged-in user will see Welcome and their name on the navigation bar. Click there and select \"Account Settings\". There also is a link to the Account Settings page on the page footer.</p> <p>On your accounts page find the Manage Groups section. Here you can select the appropriate icons to:</p> <ul> <li>Create/Delete Group</li> <li>Edit / Add / Delete Members</li> <li>Email Members</li> <li>View Members</li> <li>View Curation Tasks</li> <li>Set Group Administration Options</li> </ul> <p>Your group can be private, only the members you choose can use it, or public to all.</p> <p></p> <p>By selecting the Join Public Group icon at the bottom of this section, a modal will be displayed allowing you to join one of many publicly available groups.</p> <p></p> <p>The accounts page is where you can:</p> <ul> <li>Change your password if you are not using Single Sign-On</li> <li>Choose to receive email notifications</li> <li>Generate an API Key</li> <li>Elect a Text Annotator (Monarch, NCBO or Both)</li> <li>Edit your name or email address</li> </ul>"},{"location":"web-application/view-genesets/","title":"View My Genesets","text":"<p>Genesets that you added are listed on the View My Genesets page. They can be added by uploading or using some of the tools, such as the boolean algebra tool.</p> <p></p> <p>Clicking on a geneset on this page will highlight it in yellow. Several can be selected this way and then added to a project or assigned to a curation group. The list can be sorted by clicking on a column header. Typing in the Search box will filter the list of genesets. The filter is case sensitive. Clicking the link on the geneset name will open the geneset details page. Clicking the edit icon will open the edit geneset page.</p>"},{"location":"web-application/view-genesets/#geneset-details-pages","title":"Geneset Details Pages","text":"<p>This page provides a comprehensive look at all the information that has been entered about a geneset. You can get to this page by clicking a link on the geneset name from any page that lists genesets, such as the My Geneset page, search results and some of the tool results.</p> <p></p> <p>The basic information is displayed here in detail: geneset name, geneset id number, tier, description, figure label, score type, date added, date of the most recent update, species and the publication information: URI, authors, title, journal and abstract. Scroll the page down to see the color coded annotation information from several ontology databases. Click on a link for any term to open the ontology webpage describing the term.</p> <p></p> <p>Further down on the page is a list of all the genes. If the list is long, it will be displayed using several pages. The \"uploaded as\" column shows the identifier used when this gene was uploaded. Select a choice in the \"gene symbol\" column to show the corresponding identifier in various other formats. Mouse over the \"homology\" boxes to see homology mappings to other species in GeneWeaver. The \"linkouts\" column contains icons allowing you to link to other websites, including Entrez, Ensembl, Gene Network, String, Allen Brain Atlas and Comparative Toxicogenomics Database. Other columns include the score, priority and emphasis.</p> <p>Check the box in the final column to select that gene to be added to another geneset by using the \"Add Genes to GeneSet\" button.</p> <p>The sort order of the columns can be changed by clicking on the uploaded as, score or priority columns. The genes listed can be limited by entering a gene in the \"Filter Gene Symbol\" box.</p> <p>At the top right of the page are several buttons:</p> <ul> <li> <p>Export Data has 3 formats:</p> <ol> <li>Export Data: a text file containing all the gene symbols for each gene</li> <li>Export OmicsSoft</li> <li>Export GeneSet Complete: a text file that can be used by GeneWeaver's batch    upload function.</li> </ol> </li> <li> <p>Similar Genesets will open a page showing the top 1,000   GeneWeaver genesets that are similar to this one.</p> </li> <li>Request Curation</li> <li>Add Geneset to a Project</li> <li>Share Geneset w/ Group(s)</li> </ul> <p>If you originally created the geneset that is displayed, then there are more functional buttons present that allow you to make changes.</p> <p></p> <p>The \"Set Threshold\" button opens a new page where you can change the significance threshold.</p> <p>The \"Delete GeneSet\" button will ask you to confirm that you want the geneset removed.</p> <p>Using the \"Edit MetaContent\" and \"Edit Genes\" buttons will open the edit geneset page.</p>"},{"location":"web-application/view-genesets/#edit-geneset-page","title":"Edit Geneset Page","text":"<p>You get to the edit geneset page from the geneset details page or from the upload geneset page. On this page is both a link and a button you can use to go to the geneset details page. Be sure to click on \"Save Updates\" before leaving the page if you have made any changes.</p>"},{"location":"web-application/view-genesets/#edit-metacontent","title":"Edit MetaContent","text":"<p>Click the \"Edit MetaContent\" button and the top portion of the page changes to a format that allows editing.</p> <p></p> <p>Here you can change the name, figure label, score type, description and access restrictions. If you know the PubMed ID, enter it and click the link next to the box for it to be looked up. Alternatively, click on \"Manual Entry\" and fill in the information.</p>"},{"location":"web-application/view-genesets/#ontology-annotations","title":"Ontology Annotations","text":"<p>Scroll below the publication area to see the ontology annotations.</p> <p></p> <p>You can enter a term in the box to search the ontologies for it. Click to select the desired one. Or select an ontology from the selection box. Click to expand the hierarchy and check the desired term(s).</p> <p>Click the \"Save Updates\" button.</p> <p></p> <p>In the Edit Metatdata mode, the ontology terms are displayed in a fashion that allows removal. The ontology columns can be sorted by clicking on the header.</p> <p></p>"},{"location":"web-application/view-genesets/#edit-genes","title":"Edit Genes","text":"<p>Click the \"Edit Genes\" button to see an editable list of all the genes in the geneset. They will be displayed on the screen below the annotations.</p> <p></p> <p>In the editing mode, you can change the species or identifier. Click on the edit icon for a gene and a form will open so you can edit the identifier or score. Click the trash icon to remove a gene from the geneset. Click on the \"Add Gene\" button to add another gene to the geneset. Make sure to click on \"Save Updates\" when you are done.</p>"},{"location":"web-application/view-genesets/#similar-genesets","title":"Similar Genesets","text":"<p>The view geneset details page has a button linking to this page. A message will be displayed if a similarity analysis needs to be run on the geneset with an option to \" Click here to start now\". There also is a button on the page that allows you to \"Refresh Similar GeneSets\" if the analysis is old.</p> <p>The \"Export GeneSets\" button will create a \"csv\" file of all the similar GeneSets. The columns include: geneset id, name, number of genes, and Jaccard Similarity score.</p> <p></p> <p></p> <p>Scroll down to see the list of similar genesets. You may select between 10 and 100 to display per page. This list will be sorted by the Jaccard Similarity. Click on any column to change the sort order. The tier, species and attribution columns allow selecting a filter in order to limit the number of genesets. You may also enter a string of characters into the \"Search\" box to filter the list by the geneset name.</p> <p>Check the box to the right of any genesets and use the \"Add to Projects\" button if you desire to keep a selection of these genesets for use later.</p> <p>Click on the \"Distribution\" button to add a distribution graph to the page.</p> <p></p> <p>Hover your mouse over the graph to see where each geneset is plotted.</p>"}]}